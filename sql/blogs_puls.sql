/*
Navicat MySQL Data Transfer

Source Server         : mysql
Source Server Version : 50725
Source Host           : localhost:3306
Source Database       : blogs_puls

Target Server Type    : MYSQL
Target Server Version : 50725
File Encoding         : 65001

Date: 2019-12-31 03:15:20
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_name` varchar(20) NOT NULL,
  `password` varchar(32) NOT NULL,
  `admin_status` int(2) NOT NULL DEFAULT '0',
  `admin_createTime` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1003 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES ('1001', 'admin', '21232f297a57a5a743894a0e4a801fc3', '0', '2019-12-23 00:50:31');
INSERT INTO `admin` VALUES ('1002', '123456', 'e10adc3949ba59abbe56e057f20f883e', '0', '2019-12-23 00:51:03');

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_title` varchar(50) NOT NULL,
  `article_theme` varchar(255) NOT NULL,
  `article_content` longtext NOT NULL,
  `article_readnum` int(11) NOT NULL DEFAULT '0',
  `article_creationtime` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  `article_updatetime` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  `article_admin_id` int(11) NOT NULL,
  `article_isdelete` int(11) NOT NULL DEFAULT '0',
  `article_isoriginal` int(11) NOT NULL DEFAULT '0',
  `article_isrecommend` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1037 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('1001', 'JavaWeb项目查询数据库获得数据显示在jsp页面上', '先来简单的例子吧。大概如下：index.jsp页面中只有一个按钮，用来跳转到Servlet操作数据，Servlet中对数据库查询操作后将信息保存在request对象中通过转发传递到showinfo.jsp页面（如果你对数据的操作也是在jsp中，java代码逻辑部分其实是一样的，注意跳转路径即可；用了@Controllor同理，跳转的逻辑也是一样的）', '<main>\r\n			<div class=\"blog-content-box\">\r\n				\r\n				<article class=\"baidu_pl\">\r\n					\r\n					<div id=\"article_content\" class=\"article_content clearfix\">\r\n						<link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\r\n						<link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css\">\r\n						<div class=\"htmledit_views\" id=\"content_views\">\r\n							<p>先来简单的例子吧。大概如下：index.jsp页面中只有一个按钮，用来跳转到Servlet操作数据，Servlet中对数据库查询操作后将信息保存在request对象中通过转发传递到showinfo.jsp页面（如果你对数据的操作也是在jsp中，java代码逻辑部分其实是一样的，注意跳转路径即可；用了@Controllor同理，跳转的逻辑也是一样的）</p>\r\n\r\n							<p>把数据库建好</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-sql hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`User`</span> (</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-string\">`username`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-string\">`password`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-string\">`address`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">) </div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>插入一个数据</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-sql hljs\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">User</span> <span class=\"hljs-keyword\">values</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"Martin\"</span>,<span class=\"hljs-string\">\"12345\"</span>,<span class=\"hljs-string\">\"zjut\"</span>)</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>建立一个Dynamic Web Project，目录如下：</p>\r\n\r\n							<p><img alt=\"\" class=\"has\" height=\"415\" src=\"https://img-blog.csdnimg.cn/20181106185938316.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcnQxbm4=,size_16,color_FFFFFF,t_70\"\r\n								 width=\"379\"></p>\r\n\r\n							<p>User.java</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\" style=\"width:1128px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.entity;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> String username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> String password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> String address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">return</span> id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.id = id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">return</span> username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span><span class=\"hljs-params\">(String username)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.username = username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">return</span> password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.password = password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">return</span> address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(String address)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.address = address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-meta\">@Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"User [id=\"</span> + id + <span class=\"hljs-string\">\", username=\"</span> + username + <span class=\"hljs-string\">\", password=\"</span> + password + <span class=\"hljs-string\">\", address=\"</span> + address + <span class=\"hljs-string\">\"]\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, String username, String password, String address)</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"47\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">super</span>();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"48\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.id = id;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"49\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.username = username;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"50\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.password = password;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"51\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">this</span>.address = address;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"52\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"53\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"54\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"55\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">super</span>();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"56\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"57\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"58\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>DBHelper.java</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\" style=\"width:1086px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.utils;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.Connection;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.DriverManager;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.SQLException;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DBHelper</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String driver = <span class=\"hljs-string\">\"com.mysql.cj.jdbc.Driver\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String url = <span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/webtest?useUnicode=true&amp;characterEncoding=UTF-8\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String username = <span class=\"hljs-string\">\"root\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String password = <span class=\"hljs-string\">\"123456\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Connection conn=<span class=\"hljs-keyword\">null</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">static</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			Class.forName(driver);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		} <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			e.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Connection <span class=\"hljs-title\">getConnection</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">if</span>(conn==<span class=\"hljs-keyword\">null</span>) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				conn = DriverManager.getConnection(url,username,password);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				System.out.println(<span class=\"hljs-string\">\"数据库初始化成功\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			} <span class=\"hljs-keyword\">catch</span> (SQLException e) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				e.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				System.out.println(<span class=\"hljs-string\">\"数据库初始化失败\"</span>);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-keyword\">return</span> conn;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		}<span class=\"hljs-keyword\">else</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-keyword\">return</span> conn;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>&nbsp;ServletDemo.java</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-java hljs\"><ol class=\"hljs-ln\" style=\"width:1136px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">package</span> com.servlet;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.io.IOException;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.Connection;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.ResultSet;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.SQLException;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> java.sql.Statement;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javax.servlet.annotation.WebServlet;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> com.entity.User;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> com.utils.DBHelper;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/servlet/ServletDemo\"</span>)</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServletDemo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ServletDemo</span><span class=\"hljs-params\">()</span> </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">        <span class=\"hljs-keyword\">super</span>();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    }</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		Connection conn = DBHelper.getConnection();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		String sql=<span class=\"hljs-string\">\"select * from User\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-keyword\">try</span> {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			Statement st = conn.createStatement();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			ResultSet rs = st.executeQuery(sql);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			User user = <span class=\"hljs-keyword\">new</span> User();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-keyword\">while</span>(rs.next()) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				user.setId(rs.getInt(<span class=\"hljs-string\">\"id\"</span>));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				user.setUsername(rs.getString(<span class=\"hljs-string\">\"username\"</span>));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				user.setPassword(rs.getString(<span class=\"hljs-string\">\"password\"</span>));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">				user.setAddress(rs.getString(<span class=\"hljs-string\">\"address\"</span>));</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-comment\">//将数据库中查询到的信息封装在user对象中，use对象保存在request中，之后将通过request对象将数据传递到页面</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-comment\">//需要的话也可以只传递一个参数request.setAttribute(\"id\", user.getId());</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			request.setAttribute(<span class=\"hljs-string\">\"user\"</span>, user);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			<span class=\"hljs-comment\">//这里是转发，从Servlet跳转到showinfo.jsp页面，并且带上request和response对象中原有的参数</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			request.getRequestDispatcher(<span class=\"hljs-string\">\"/showinfo.jsp\"</span>).forward(request, response);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">					</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"47\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		} <span class=\"hljs-keyword\">catch</span> (SQLException e) {</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"48\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">			e.printStackTrace();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"49\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"50\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"51\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"52\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"53\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"54\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		doGet(request, response);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"55\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"56\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"57\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>这里用的是转发，可以保存request对象中的数据；至于重定向则是另外一个新的request，所以原有的数据会消失，在jsp获取不到。</p>\r\n\r\n							<p>&nbsp;index.jsp，只一个按钮</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"servlet/ServletDemo\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"get\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> &gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>showinfo.jsp，这里需要注意的是导入类：import=\"com.entity.User\"</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"language-html hljs xml\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%@</span> <span class=\"hljs-attr\">page</span> <span class=\"hljs-attr\">language</span>=<span class=\"hljs-string\">\"java\"</span> <span class=\"hljs-attr\">contentType</span>=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-attr\">pageEncoding</span>=<span class=\"hljs-string\">\"UTF-8\"</span> <span class=\"hljs-attr\">import</span>=<span class=\"hljs-string\">\"com.entity.User\"</span>%&gt;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"Content-Type\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Insert title here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span></span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">User</span> <span class=\"hljs-attr\">user</span> = <span class=\"hljs-string\">(User)request.getAttribute(</span>\"<span class=\"hljs-attr\">user</span>\");</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">%&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">id:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=user.getId()</span> %&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">username:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=user.getUsername()</span> %&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">password:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=user.getPassword()</span> %&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">address:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=user.getAddress()</span> %&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">也可以用el表达式，但是同样需要servlet先将值存放在request中，但是用el表达式的话需要在上面加上：</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">如下，获取id这样写就可以</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">${user.getId()}</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"> --&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>启动tomcat操作点击按钮即可结果如下</p>\r\n\r\n							<p><img alt=\"\" class=\"has\" height=\"147\" src=\"https://img-blog.csdnimg.cn/20181106210151833.jpeg\" width=\"636\"></p>\r\n\r\n							<hr>\r\n							<p>ps:分界线以上是原创，以下是在某原博主的内容之后的补充</p>\r\n\r\n							<p>转载原文及源代码链接：<a href=\"https://blog.csdn.net/qq_23994787/article/details/73612870\" rel=\"nofollow\">https://blog.csdn.net/qq_23994787/article/details/73612870</a></p>\r\n\r\n							<p>&nbsp;showall.jsp</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"hljs vbscript-html\"><ol class=\"hljs-ln\" style=\"width:959px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"xml\"></span><span class=\"vbscript\">&lt;%@ page language=<span class=\"hljs-string\">\"java\"</span> contentType=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    pageEncoding=<span class=\"hljs-string\">\"UTF-8\"</span>%&gt;<span class=\"xml\">  </span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"vbscript\">&lt;%@ taglib uri=<span class=\"hljs-string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"hljs-string\">\"c\"</span>%&gt;</span><span class=\"xml\"></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"vbscript\">&lt;%</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-built_in\">String</span> path = <span class=\"hljs-built_in\">request</span>.getContextPath();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-built_in\">String</span> basePath = <span class=\"hljs-built_in\">request</span>.getScheme()+<span class=\"hljs-string\">\"://\"</span>+<span class=\"hljs-built_in\">request</span>.getServerName()+<span class=\"hljs-string\">\":\"</span>+<span class=\"hljs-built_in\">request</span>.getServerPort()+path+<span class=\"hljs-string\">\"/\"</span>;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">%&gt;<span class=\"xml\"></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"Content-Type\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"</span></span><span class=\"vbscript\">&lt;%=basePath%&gt;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>所有用户页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>${xiaoxi}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>  <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"600\"</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"0\"</span> &gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>性别<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>家乡<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>备注<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	  		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">  		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">     </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">c:forEach</span> <span class=\"hljs-attr\">var</span>=<span class=\"hljs-string\">\"U\"</span> <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">\"${userAll}\"</span> &gt;</span> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"UpdateServlet\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.id}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"id\"</span> &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.name}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.sex}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.pwd}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"pwd\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.home}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"home\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"${U.info}\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"info\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"DeleteServlet?id=${U.id}\"</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"更新\"</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">c:forEach</span>&gt;</span>  </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">     </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>SearchAllServlet.java程序如下,导包之类的略</p>\r\n\r\n							<pre class=\"has\" name=\"code\"><code class=\"hljs java\"><ol class=\"hljs-ln\" style=\"width:1136px\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SearchAllServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span></span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-meta\">@Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-comment\">// TODO Auto-generated method stub</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		doPost(request,response);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"> </div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-meta\">@Override</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		<span class=\"hljs-comment\">// TODO Auto-generated method stub</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		UserDao ud = <span class=\"hljs-keyword\">new</span> UserDaoImpl();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		List&lt;User&gt; userAll = ud.getUserAll();</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		request.setAttribute(<span class=\"hljs-string\">\"userAll\"</span>, userAll);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">		request.getRequestDispatcher(<span class=\"hljs-string\">\"/showall.jsp\"</span>).forward(request, response);</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	}</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">	</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">}</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\r\n\r\n							<p>&nbsp;</p>\r\n<p>数据库查询到的所有用户数据保存在List集合userAll中，通过request.setAttribute(\"userAll\",userAll)传入jsp</p>\r\n<p>jsp通过&lt;c:forEach var=\"U\" items=\"${userAll}\" &gt;取出数据并进行遍历</p>\r\n<p>以上，需要注意的是showall中用到了&lt;c:forEach&gt;标签，并且传值的时候使用了el表达式${...}，因此还需要导入包jstl.jar和standard.jar并且在showall.jsp中增加：</p>\r\n<p>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%&gt;</p>\r\n\r\n		</main>', '1', '2019-12-30 21:54:30', '2019-12-30 21:54:30', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1002', 'java面试复习---基础', '面向过程：性能较高。面向过程语言大多是可以直接编译成机械码，直接就能在电脑上运行；而面向过程语言在运行时需要进行类的实例化，开销大并且消耗资源；而对于Java语言的性能较差问题，主要原因是它属于半编译语言，最终的执行代码不是可以直接被CPU执行的二进制机械码。', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\r\n			<!-- flowchart 箭头图标 勿删 -->\r\n			<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n				<path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n			</svg>\r\n			<h3><a name=\"t0\"></a><a id=\"java_0\"></a>java面试复习—基础</h3>\r\n			<h4><a id=\"1_2\"></a>1.面向对象和面向过程的区别</h4>\r\n			<ul>\r\n				<li>面向过程：<strong>性能较高</strong>。面向过程语言大多是可以直接编译成机械码，直接就能在电脑上运行；而面向过程语言在运行时需要进行类的实例化，开销大并且消耗资源；而对于Java语言的性能较差问题，主要原因是它属于半编译语言，最终的执行代码不是可以直接被CPU执行的二进制机械码。</li>\r\n				<li>面向对象：<strong>易维护，易复用，易拓展</strong>。这些优点完全建立在面向对象语言的三大特性之上的，我不说大家应该都耳熟能详了，也就是<strong>封装，继承，多态</strong>，也正是基于此，我们才能用Java语言设计成低耦合的系统，是系统更加灵活。</li>\r\n			</ul>\r\n			<h4><a id=\"2Java_7\"></a>2.Java语言有哪些特点？</h4>\r\n			<ul>\r\n				<li>面向对象（封装继承多态）</li>\r\n				<li>平台无关性（Java虚拟机实现了一次编译，多次运行）</li>\r\n				<li>可靠性</li>\r\n				<li>安全性</li>\r\n				<li>支持网络编程</li>\r\n				<li>编译与解释并存</li>\r\n			</ul>\r\n			<h4><a id=\"3JVM___JDK__JRE__16\"></a>3.对JVM JDK JRE 的通俗解答。</h4>\r\n			<ul>\r\n				<li>\r\n					<p>JVM：是运行java字节码的虚拟机。多系统多实现（windows,Linux，macOS等），设计的目的是为了使用相同的字节码，产生一直的运行效果，即俗话说的一次编译，到处运行。<img src=\"https://img-blog.csdnimg.cn/20191229211355226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMjc5NA==,size_16,color_FFFFFF,t_70\"\r\n						 alt=\"在这里插入图片描述\"><br>\r\n						我们需要着重理解的是.class–&gt;机器码这一步，JVM类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这样的效率十分慢，并且有的方法和代码是需要多次执行的（也就是我们常说的热点代码块）。因此就衍生出了JIT编译器，它是运行时编译，首先字节码文件编译一次，然后将编译好的二进制机器码保存好下次使用，而我们知道，机器码的运行效率肯定高于Java解释器，这也充分说明了Java是编译与解释共存的语言。</p>\r\n				</li>\r\n				<li>\r\n					<p>JDK: Java开发工具包。拥有JRE所拥有的的一切，还有编译器（javac）和工具,它能够创建和编译程序。</p>\r\n				</li>\r\n				<li>\r\n					<p>JRE:Java运行时环境。它是运行已编译Java程序所需的所有内容的集合。包括JVM，java类库，java命令和其他一些基础组件，但是，它不能用于创建新程序。</p>\r\n				</li>\r\n			</ul>\r\n			<h4><a id=\"4JavaC_24\"></a>4.Java和C++有什么区别？</h4>\r\n			<ul>\r\n				<li>都是面向对象语言，支持封装继承多态</li>\r\n				<li>Java不提供指针来直接访问内存，程序内存更安全</li>\r\n				<li>Java的类是单继承的，C++实现多继承；虽然Java到的类不可以多继承，但是接口可以实现多继承。</li>\r\n				<li>Java有自动内存管理机制，不需要程序员手动释放内存。</li>\r\n				<li>在C语言中，字符串用‘\\0’来标识结束，但是java中没有结束符概念。</li>\r\n			</ul>\r\n			<h4><a id=\"5Java_32\"></a>5.Java应用程序跟小程序之间有哪些差别？</h4>\r\n			<ul>\r\n				<li>\r\n					<p>应用程序的启动入口是main（）方法。</p>\r\n				</li>\r\n				<li>\r\n					<p>小程序的启动入口是init（）或run()方法。</p>\r\n				</li>\r\n			</ul>\r\n			<h4><a id=\"6_40\"></a>6.重载与重写的区别</h4>\r\n			<ul>\r\n				<li>重载：发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。<br>\r\n					<img src=\"https://img-blog.csdnimg.cn/20191229211323619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxMjc5NA==,size_16,color_FFFFFF,t_70\"\r\n					 alt=\"在这里插入图片描述\"></li>\r\n				<li>重写：发生在子类中，是子类对父类的允许访问的方法的实现过程进行重新编写，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，<strong>私有方法</strong>（private修饰）不可被重写。一句话总结，<strong>方法提供的行为改变，方法的外貌没有改变</strong>。</li>\r\n			</ul>\r\n			<h4><a id=\"7Java_46\"></a>7.Java面向对象编程三大特性：封装继承多态</h4>\r\n			<ul>\r\n				<li>封装：把一个对象的<strong>属性私有化</strong>，同时提供一些<strong>可以被外界访问的属性的方法</strong>，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</li>\r\n				<li>继承：使用<strong>已存在的类的定义作为基础建立新类</strong>的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但<strong>不能</strong>选择性地继承父类。三大要点：<strong>1</strong>.子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。<strong>2</strong>.子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<strong>3</strong>.子类可以用自己的方式实现父类的方法（方法重写）。</li>\r\n				<li>多态：指程序中定义的<strong>引用变量所指向的具体类型</strong>和通过该引用变量发出的方法调用在<strong>编程时并不确定</strong>，而是在程序运行期间才确定。通俗讲，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。实现多态的方式（Java）：继承和接口</li>\r\n			</ul>\r\n			<h4><a id=\"8StringStringBuilderStringBufferString_52\"></a>8.String，StringBuilder和StringBuffer的区别是什么？String为什么不可变？</h4>\r\n			<ul>\r\n				<li>\r\n					<p>可变性：String类中使用final关键字修饰的字符数组来保存字符串。<code>private final char value[]</code>。后两者都继承AbstractStringBuilder类，这个类也是用字符数组保存字符串，但是没有用final关键字修饰，所有这连个对象是可变的。</p>\r\n				</li>\r\n				<li>\r\n					<p>线程安全性：String对象是不可变的，也就可以理解为常量，线程安全；StringBuffer对方法加了同步锁，所以线程安全；而StringBuilder没有加锁，所以非线程安全。</p>\r\n				</li>\r\n				<li>\r\n					<p>性能：StringBuilder &gt; StringBuffer &gt; String</p>\r\n					<p>每次对String类型进行改变时，都会生成一个新的String对象，然后将指针指向新的String对象内存地址。因此最慢。</p>\r\n					<p>StringBuilder虽然比StringBuffer性能提升了10~15%作用，但是要冒多线程不安全的风险。</p>\r\n				</li>\r\n				<li>\r\n					<p>使用总结：1.操作少量数据，用String。2.单线程操作字符串缓冲区下操作大量数据，使用StringBuilder 3.多线程操作字符串缓冲区下操作大量数据，使用StringBuffer</p>\r\n				</li>\r\n			</ul>\r\n			<h4><a id=\"9Java_66\"></a>9.在Java中定义一个不做事的无参构造方法的作用？</h4>\r\n			<p>Java程序在执行子类的构造方法之前，如果没有用**super()**来调用父类特定的构造方法，那么程序默认取父类的无参构造方法。但是父类中没有无参构造方法，就会编译报错了。解决方案以下二选一即可：</p>\r\n			<ul>\r\n				<li>在父类中补上一个无参构造方法</li>\r\n				<li>在子类中使用**super（）**方法调用父类一个特定的有参构造。</li>\r\n			</ul>\r\n			<h4><a id=\"10_73\"></a>10.接口和抽象类的区别</h4>\r\n			<p>1.接口的方法默认是public，所有方法在接口中不能有实现（java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</p>\r\n			<p>2.接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）</p>\r\n			<p>3.接口中变量必须是public static final 修饰，而抽象类中不一定。</p>\r\n			<p>4.一个类可以实现多个接口，但只能实现一个抽象类。</p>\r\n			<p>5.从设计层面来讲，抽象是对类的抽象，是一种模板设计；接口是对行为的抽象，是一种行为规范。</p>\r\n			<p>11.成员变量和局部变量的区别有哪些？</p>\r\n			<ul>\r\n				<li>\r\n					<p>从语法形式上看，成员变量属于类，局部变量属于局部代码块。成员变量可以被public，private,static等修饰符修饰，而局部变量不可被修饰；但是<strong>都能被final关键字修饰</strong>。</p>\r\n				</li>\r\n				<li>\r\n					<p>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</p>\r\n				</li>\r\n				<li>\r\n					<p>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</p>\r\n				</li>\r\n				<li>\r\n					<p>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值</p>\r\n				</li>\r\n			</ul>\r\n			<h4><a id=\"11_97\"></a>11.一个类的构造方法的作用是什么？若一个类没有声明构造方法，能正确执行吗？为什么？</h4>\r\n			<ul>\r\n				<li>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</li>\r\n			</ul>\r\n			<h4><a id=\"12_101\"></a>12.在调用子类的构造方法之前会先调用父类的无参构造方法，其目的是？</h4>\r\n			<p>帮助子类完成初始化工作。</p>\r\n			<h4><a id=\"13equals_105\"></a>13.==与equals方法</h4>\r\n			<p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型<mark>比较的是值，引用数据类型</mark>比较的是内存地址)。</p>\r\n			<p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p>\r\n			<ul>\r\n				<li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li>\r\n				<li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li>\r\n			</ul>\r\n			<h4><a id=\"14hashcodeequal_114\"></a>14.hashcode()与equal（）方法</h4>\r\n			<p>介绍</p>\r\n			<p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()\r\n				定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p>\r\n			<p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p>\r\n			<p>为什么要有 hashCode</p>\r\n			<p><strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode\r\n				值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code>方法来检查\r\n				hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了\r\n				equals 的次数，相应就大大提高了执行速度。</p>\r\n			<p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个int整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。<strong>hashCode()在散列表中才有用，在其它情况下没用</strong>。在散列表中hashCode()\r\n				的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p>\r\n			<ol>\r\n				<li>如果两个对象相等，则hashcode一定也是相同的</li>\r\n				<li>两个对象相等,对两个对象分别调用equals方法都返回true</li>\r\n				<li>两个对象有相同的hashcode值，它们也不一定是相等的</li>\r\n				<li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li>\r\n				<li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li>\r\n			</ol>\r\n\r\n		</div>', '2', '2019-12-30 22:01:36', '2019-12-30 22:01:36', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1003', '  前后端分离了，然后呢？', '前后端分离已经是业界所共识的一种开发/部署模式了。所谓的前后端分离，并不是传统行业中的按部门划分，一部分人纯做前端（HTML/CSS/JavaScript/Flex），另一部分人纯做后端，因为这种方式是不工作的：比如很多团队采取了后端的模板技术（JSP, FreeMarker, ERB等等），前端的开发和调试需要一个后台Web容器的支持，从而无法做到真正的分离（更不用提在部署的时候，由于动态内容和静态内容混在一起，当设计动态静态分流的时候，处理起来非常麻烦）。', '<div id=\"left_content_pages\">\r\n					\r\n		\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<h3>　　前言</h3>\r\n							<p>　　前后端分离已经是业界所共识的一种开发/部署模式了。所谓的前后端分离，并不是传统行业中的按部门划分，一部分人纯做前端（HTML/CSS/JavaScript/Flex），另一部分人纯做后端，因为这种方式是不工作的：比如很多团队采取了后端的模板技术（JSP,\r\n								FreeMarker,\r\n								ERB等等），前端的开发和调试需要一个后台Web容器的支持，从而无法做到真正的分离（更不用提在部署的时候，由于动态内容和静态内容混在一起，当设计动态静态分流的时候，处理起来非常麻烦）。关于前后端开发的另一个讨论可以<a\r\n								 href=\"http://icodeit.org/2015/06/do-we-really-short-for-front-end-developer/\">参考这里</a>。</p>\r\n							<p>　　即使通过API来解耦前端和后端开发过程，前后端通过<code>RESTFul</code>的接口来通信，前端的静态内容和后端的动态计算分别开发，分别部署，集成仍然是一个绕不开的问题 —\r\n								前端/后端的应用都可以独立的运行，但是集成起来却不工作。我们需要花费大量的精力来调试，直到上线前仍然没有人有信心所有的接口都是工作的。</p>\r\n							<h3>　　一点背景</h3>\r\n							<p>　　一个典型的Web应用的布局看起来是这样的：</p>\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"static/imgs/292223367904833.png\"\r\n								 alt=\"typical web application\" width=\"611\" height=\"258\"></p>\r\n							<p>　　前后端都各自有自己的开发流程，构建工具，测试集合等等。前后端仅仅通过接口来编程，这个接口可能是JSON格式的RESTFul的接口，也可能是XML的，重点是后台只负责数据的提供和计算，而完全不处理展现。而前端则负责拿到数据，组织数据并展现的工作。这样结构清晰，关注点分离，前后端会变得相对独立并松耦合。</p>\r\n							<p>　　上述的场景还是比较理想，我们事实上在实际环境中会有非常复杂的场景，比如异构的网络，异构的操作系统等等:</p>\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"static/imgs/292223395569386.png\"\r\n								 alt=\"real word application\" width=\"608\" height=\"259\"></p>\r\n							<p>　　在实际的场景中，后端可能还会更复杂，比如用C语言做数据采集，然后通过Java整合到一个数据仓库，然后该数据仓库又有一层Web Service，最后若干个这样的Web\r\n								Service又被一个Ruby的聚合Service整合在一起返回给前端。在这样一个复杂的系统中，后台任意端点的失败都可能阻塞前端的开发流程，因此我们会采用mock的方式来解决这个问题：</p>\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"static/imgs/292223373996246.png\"\r\n								 alt=\"mock application\" width=\"585\" height=\"249\"></p>\r\n							<p>　　这个<code>mock</code>服务器可以启动一个简单的HTTP服务器，然后将一些静态的内容serve出来，以供前端代码使用。这样的好处很多:</p>\r\n							<ol>\r\n								<li>前后端开发相对独立</li>\r\n								<li>后端的进度不会影响前端开发</li>\r\n								<li>启动速度更快</li>\r\n								<li>前后端都可以使用自己熟悉的技术栈（让前端的学maven，让后端的用gulp都会很不顺手）</li>\r\n							</ol>\r\n							<p>　　但是当集成依然是一个令人头疼的难题。我们往往在集成的时候才发现，本来协商的数据结构变了：<code>deliveryAddress</code>字段本来是一个字符串，现在变成数组了（业务发生了变更，系统现在可以支持多个快递地址）；<code>price</code>字段变成字符串，协商的时候是<code>number</code>；用户邮箱地址多了一个层级等等。这些变动在所难免，而且时有发生，这会花费大量的调试时间和集成时间，更别提修改之后的回归测试了。</p>\r\n							<p>　　所以仅仅使用一个静态服务器，然后提供<code>mock</code>数据是远远不够的。我们需要的<code>mock</code>应该还能做到：</p>\r\n							<ol>\r\n								<li>前端依赖指定格式的mock数据来进行UI开发</li>\r\n								<li>前端的开发和测试都基于这些mock数据</li>\r\n								<li>后端产生指定格式的mock数据</li>\r\n								<li>后端需要测试来确保生成的mock数据正是前端需要的</li>\r\n							</ol>\r\n							<p>　　简而言之，我们需要商定一些契约，并将这些契约作为可以被测试的中间格式。然后前后端都需要有测试来使用这些契约。一旦契约发生变化，则另一方的测试会失败，这样就会驱动双方协商，并降低集成时的浪费。</p>\r\n							<p>　　一个实际的场景是：前端发现已有的某个契约中，缺少了一个<code>address</code>的字段，于是就在契约中添加了该字段。然后在UI上将这个字段正确的展现了（当然还设置了字体，字号，颜色等等）。但是后台生成该契约的服务并没有感知到这一变化，当运行生成契约部分测试（后台）时，测试会失败了\r\n								— 因为它并没有生成这个字段。于是后端工程师就找前端来商量，了解业务逻辑之后，他会修改代码，并保证测试通过。这样，当集成的时候，就不会出现UI上少了一个字段，但是谁也不知道是前端问题，后端问题，还是数据库问题等。</p>\r\n							<p>　　而且实际的项目中，往往都是多个页面，多个API，多个版本，多个团队同时进行开发，这样的契约会降低非常多的调试时间，使得集成相对平滑。</p>\r\n							<p>　　在实践中，契约可以定义为一个JSON文件，或者一个XML的payload。只需要保证前后端<strong>共享同一个契约集合</strong>来做测试，那么集成工作就会从中受益。一个最简单的形式是：提供一些静态的<code>mock</code>文件，而前端所有发往后台的请求都被某种机制拦截，并转换成对该静态资源的请求。</p>\r\n							<ol>\r\n								<li><a href=\"https://github.com/dreamhead/moco\">moco</a>，基于Java</li>\r\n								<li><a href=\"http://wiremock.org/index.html\">wiremock</a>，基于Java</li>\r\n								<li><a href=\"http://www.sinatrarb.com/\">sinatra</a>，基于Ruby</li>\r\n							</ol>\r\n							<p>　　看到<code>sinatra</code>被列在这里，可能熟悉<code>Ruby</code>的人会反对：它可是一个<code>后端</code>全功能的的程序库啊。之所以列它在这里，是因为<code>sinatra</code>提供了一套简洁优美的<code>DSL</code>，这个<code>DSL</code>非常契合<code>Web</code>语言，我找不到更漂亮的方式来使得这个<code>mock\r\n									server</code>更加易读，所以就采用了它。</p>\r\n							<h3>　　一个例子</h3>\r\n							<p>　　我们以这个应用为示例，来说明如何在前后端分离之后，保证代码的质量，并降低集成的成本。这个应用场景很简单：所有人都可以看到一个条目列表，每个登陆用户都可以选择自己喜欢的条目，并为之加星。加星之后的条目会保存到用户自己的<code>个人中心</code>中。用户界面看起来是这样的：</p>\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"static/imgs/292223367904833.png\"\r\n								 alt=\"bookmarks\" width=\"606\" height=\"460\"></p>\r\n							<p>　　不过为了专注在我们的中心上，我去掉了诸如登陆，个人中心之类的页面，假设你是一个已登录用户，然后我们来看看如何编写测试。</p>\r\n							<h4>　　前端开发</h4>\r\n							<p>　　根据通常的做法，前后端分离之后，我们很容易<code>mock</code>一些数据来自己测试：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">[\r\n				    {\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span>: 1<span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">url</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://abruzzi.github.com/2015/03/list-comprehension-in-python/</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">title</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Python中的 list comprehension 以及 generator</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">publicDate</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2015年3月20日</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\r\n				    },\r\n				    {\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span>: 2<span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">url</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://abruzzi.github.com/2015/03/build-monitor-script-based-on-inotify/</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">title</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">使用inotify/fswatch构建自动监控脚本</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">publicDate</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2015年2月1日</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\r\n				    },\r\n				    {\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span>: 3<span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">url</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://abruzzi.github.com/2015/02/build-sample-application-by-using-underscore-and-jquery/</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">title</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">使用underscore.js构建前端应用</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">publicDate</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2015年1月20日</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\r\n				    }\r\n				]</span></pre>\r\n							</div>\r\n							<p>　　然后，一个可能的方式是通过请求这个json来测试前台：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">$(function() {\r\n				  $.get(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/mocks/feeds.json</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">).then(function(feeds) {\r\n				      var feedList </span>=<span style=\"color: #000000;\"> new Backbone.Collection(extended);\r\n				      var feedListView </span>=<span style=\"color: #000000;\"> new FeedListView(feedList);\r\n				\r\n				      $(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">.container</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">).append(feedListView.render());\r\n				  });\r\n				});</span></pre>\r\n							</div>\r\n							<p>　　这样当然是可以工作的，但是这里发送请求的<code>url</code>并不是最终的，当集成的时候我们又需要修改为真实的<code>url</code>。一个简单的做法是使用<code>Sinatra</code>来做一次url的转换：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>get <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/api/feeds</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				  content_type </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">application/json</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">\r\n				  File.open(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">mocks/feeds.json</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">).read\r\n				end</span></pre>\r\n							</div>\r\n							<p>　　这样，当我们和实际的服务进行集成时，只需要连接到那个服务器就可以了。</p>\r\n							<p>　　注意，我们现在的核心是<code>mocks/feeds.json</code>这个文件。这个文件现在的角色就是一个契约，至少对于前端来说是这样的。紧接着，我们的应用需要渲染<code>加星</code>的功能，这就需要另外一个契约：找出当前用户加星过的所有条目，因此我们加入了一个新的契约：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">[\r\n				    {\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span>: 3<span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">url</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://abruzzi.github.com/2015/02/build-sample-application-by-using-underscore-and-jquery/</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">title</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">使用underscore.js构建前端应用</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n				        </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">publicDate</span><span style=\"color: #800000;\">\"</span>: <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2015年1月20日</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">\r\n				    }\r\n				]</span></pre>\r\n							</div>\r\n							<p>　　然后在<code>sinatra</code>中加入一个新的映射：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>get <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/api/fav-feeds/:id</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				  content_type </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">application/json</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">\r\n				  File.open(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">mocks/fav-feeds.json</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">).read\r\n				end</span></pre>\r\n							</div>\r\n							<p>　　通过这两个请求，我们会得到两个列表，然后根据这两个列表的交集来绘制出所有的星号的状态（有的是空心，有的是实心）：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">$.when(feeds, favorite).then(function(feeds, favorite) {\r\n				    var ids </span>= _.pluck(favorite[0], <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">);\r\n				    var extended </span>=<span style=\"color: #000000;\"> _.map(feeds[0], function(feed) {\r\n				        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> _.extend(feed, {status: _.includes(ids, feed.id)});\r\n				    });\r\n				\r\n				    var feedList </span>=<span style=\"color: #000000;\"> new Backbone.Collection(extended);\r\n				    var feedListView </span>=<span style=\"color: #000000;\"> new FeedListView(feedList);\r\n				\r\n				    $(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">.container</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">).append(feedListView.render());\r\n				});</span></pre>\r\n							</div>\r\n							<p>　　剩下的一个问题是当点击红心时，我们需要发请求给后端，然后更新红心的状态：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">toggleFavorite: function(event) {\r\n				    event.preventDefault();\r\n				    var that </span>=<span style=\"color: #000000;\"> this;\r\n				    $.post(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/api/feeds/</span><span style=\"color: #800000;\">\'</span>+this.model.get(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)).done(function(){\r\n				        var status </span>= that.model.get(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">status</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">);\r\n				        that.model.set(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">status</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">, !status);\r\n				    });\r\n				}</span></pre>\r\n							</div>\r\n							<p>　　这里又多出来一个请求，不过使用Sinatra我们还是可以很容易的支持它：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>post <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/api/feeds/:id</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				end</span></pre>\r\n							</div>\r\n							<p>　　可以看到，在没有后端的情况下，我们一切都进展顺利 — 后端甚至还没有开始做，或者正在由一个进度比我们慢的团队在开发，不过无所谓，他们不会影响我们的。</p>\r\n							<p>　　不仅如此，当我们写完前端的代码之后，可以做一个<code>End2End</code>的测试。由于使用了mock数据，免去了数据库和网络的耗时，这个<code>End2End</code>的测试会运行的非常快，并且它确实起到了端到端的作用。这些测试在最后的集成时，还可以用来当UI测试来运行。所谓一举多得。</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">encoding: utf-8</span>\r\n				require <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">spec_helper</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">\r\n				\r\n				describe </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">Feeds List Page</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				  let(:list_page) {FeedListPage.new}\r\n				\r\n				  before do\r\n				      list_page.load\r\n				  end\r\n				\r\n				  it </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">user can see a banner and some feeds</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				      expect(list_page).to have_banner\r\n				      expect(list_page).to have_feeds\r\n				  end\r\n				\r\n				  it </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">user can see 3 feeds in the list</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				      expect(list_page.all_feeds).to have_feed_items count: </span>3<span style=\"color: #000000;\">\r\n				  end\r\n				\r\n				  it </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">feed has some detail information</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> do\r\n				      first </span>=<span style=\"color: #000000;\"> list_page.all_feeds.feed_items.first\r\n				      expect(first.title).to eql(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Python中的 list comprehension 以及 generator</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\r\n				  end\r\n				end</span></pre>\r\n							</div>\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"static/imgs/292223375248974.png\"\r\n								 alt=\"end 2 end\" width=\"603\" height=\"183\"></p>\r\n							<p>　　关于如何编写这样的测试，可以参考之前写的<a href=\"http://icodeit.org/2015/01/page-object-with-site-prism/\">这篇文章</a>。</p>\r\n							<h4>　　后端开发</h4>\r\n							<p>　　我在这个示例中，后端采用了<code>spring-boot</code>作为示例，你应该可以很容易将类似的思路应用到Ruby或者其他语言上。</p>\r\n							<p>　　首先是请求的入口，<code>FeedsController</code>会负责解析请求路径，查数据库，最后返回JSON格式的数据。</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">@Controller\r\n				@RequestMapping(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/api</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\r\n				public </span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> FeedsController {\r\n				\r\n				    @Autowired\r\n				    private FeedsService feedsService;\r\n				\r\n				    @Autowired\r\n				    private UserService userService;\r\n				\r\n				    public void setFeedsService(FeedsService feedsService) {\r\n				        this.feedsService </span>=<span style=\"color: #000000;\"> feedsService;\r\n				    }\r\n				\r\n				    public void setUserService(UserService userService) {\r\n				        this.userService </span>=<span style=\"color: #000000;\"> userService;\r\n				    }\r\n				\r\n				    @RequestMapping(value</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/feeds</span><span style=\"color: #800000;\">\"</span>, method =<span style=\"color: #000000;\"> RequestMethod.GET)\r\n				    @ResponseBody\r\n				    public Iterable</span>&lt;Feed&gt;<span style=\"color: #000000;\"> allFeeds() {\r\n				        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> feedsService.allFeeds();\r\n				    }\r\n				\r\n				\r\n				    @RequestMapping(value</span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/fav-feeds/{userId}</span><span style=\"color: #800000;\">\"</span>, method =<span style=\"color: #000000;\"> RequestMethod.GET)\r\n				    @ResponseBody\r\n				    public Iterable</span>&lt;Feed&gt; favFeeds(@PathVariable(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">userId</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) Long userId) {\r\n				        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> userService.favoriteFeeds(userId);\r\n				    }\r\n				}</span></pre>\r\n							</div>\r\n							<p>　　具体查询的细节我们就不做讨论了，感兴趣的可以在文章结尾处找到代码库的链接。那么有了这个Controller之后，我们如何测试它呢？或者说，如何让契约变得实际可用呢？</p>\r\n							<p><code>　　sprint-test</code>提供了非常优美的DSL来编写测试，我们仅需要一点代码就可以将契约用起来，并实际的<strong>监督</strong>接口的修改：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">private MockMvc mockMvc;\r\n				private FeedsService feedsService;\r\n				private UserService userService;\r\n				\r\n				@Before\r\n				public void setup() {\r\n				    feedsService </span>= mock(FeedsService.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n				    userService </span>= mock(UserService.<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n				\r\n				    FeedsController feedsController </span>=<span style=\"color: #000000;\"> new FeedsController();\r\n				    feedsController.setFeedsService(feedsService);\r\n				    feedsController.setUserService(userService);\r\n				\r\n				    mockMvc </span>=<span style=\"color: #000000;\"> standaloneSetup(feedsController).build();\r\n				}</span></pre>\r\n							</div>\r\n							<p>　　建立了mockmvc之后，我们就可以编写Controller的单元测试了：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">@Test\r\n				public void shouldResponseWithAllFeeds() throws Exception {\r\n				    when(feedsService.allFeeds()).thenReturn(Arrays.asList(prepareFeeds()));\r\n				\r\n				    mockMvc.perform(get(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/api/feeds</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\r\n				            .andExpect(status().isOk())\r\n				            .andExpect(content().contentType(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">application/json;charset=UTF-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\r\n				            .andExpect(jsonPath(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$</span><span style=\"color: #800000;\">\"</span>, hasSize(3<span style=\"color: #000000;\">)))\r\n				            .andExpect(jsonPath(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$[0].publishDate</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #0000ff;\">is</span><span style=\"color: #000000;\">(notNullValue())));\r\n				}</span></pre>\r\n							</div>\r\n							<p>　　当发送<code>GET</code>请求到<code>/api/feeds</code>上之后，我们期望返回状态是200，然后内容是<code>application/json</code>。然后我们预期返回的结果是一个长度为3的数组，然后数组中的第一个元素的<code>publishDate</code>字段不为空。</p>\r\n							<p>　　注意此处的<code>prepareFeeds</code>方法，事实上它会去加载<code>mocks/feeds.json</code>文件 — 也就是前端用来测试的mock文件：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">private Feed[] prepareFeeds() throws IOException {\r\n				    URL resource </span>= getClass().getResource(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/mocks/feeds.json</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n				    ObjectMapper mapper </span>=<span style=\"color: #000000;\"> new ObjectMapper();\r\n				    </span><span style=\"color: #0000ff;\">return</span> mapper.readValue(resource, Feed[].<span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">);\r\n				}</span></pre>\r\n							</div>\r\n							<p>　　这样，当后端修改<code>Feed</code>定义（添加/删除/修改字段），或者修改了mock数据等，都会导致测试失败；而前端修改mock之后，也会导致测试失败 — 不要惧怕失败 —\r\n								这样的失败会促进一次协商，并驱动出最终的service的契约。</p>\r\n							<p>　　对应的，测试<code>/api/fav-feeds/{userId}</code>的方式类似：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #000000;\">@Test\r\n				public void shouldResponseWithUsersFavoriteFeeds() throws Exception {\r\n				    when(userService.favoriteFeeds(any(Long.</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\">)))\r\n				        .thenReturn(Arrays.asList(prepareFavoriteFeeds()));\r\n				\r\n				    mockMvc.perform(get(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/api/fav-feeds/1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\r\n				            .andExpect(status().isOk())\r\n				            .andExpect(content().contentType(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">application/json;charset=UTF-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">))\r\n				            .andExpect(jsonPath(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$</span><span style=\"color: #800000;\">\"</span>, hasSize(1<span style=\"color: #000000;\">)))\r\n				            .andExpect(jsonPath(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$[0].title</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #0000ff;\">is</span>(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">使用underscore.js构建前端应用</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)))\r\n				            .andExpect(jsonPath(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">$[0].publishDate</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #0000ff;\">is</span><span style=\"color: #000000;\">(notNullValue())));\r\n				}</span></pre>\r\n							</div>\r\n							<h3>　　总结</h3>\r\n							<p>　　前后端分离是一件容易的事情，而且团队可能在短期可以看到很多好处，但是如果不认真处理集成的问题，分离反而可能会带来更长的集成时间。通过面向契约的方式来组织各自的测试，可以带来很多的好处：更快速的<code>End2End</code>测试，更平滑的集成，更安全的分离开发等等。</p>\r\n		\r\n						</div>\r\n		\r\n		\r\n					</div>\r\n		\r\n		\r\n		\r\n				</div>\r\n				</div>', '10', '2019-12-30 23:44:04', '2019-12-30 23:44:04', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1004', '程序员的重复劳动陷阱', '不知道大家有没有这样的感觉，每次加入一个新的公司/组，一开始总是要学这个学那个，可能会花很多时间看现有的代码，然后花一些时间实现一点点小的功能，等到经过一段时间后，自己对工作越来越得心应手，提来的类似需求马上就可以做，以做得多做得快为骄傲，觉的这样可以更受老板青睐，可以升职加薪。', '<div id=\"left_content_pages\">\r\n\r\n			<div class=\"contents_main\">\r\n				<div id=\"ArticleCnt\">\r\n					<p>　　同样是一样的计算机专业毕业，进入职场的职位和工作都差不多，为何有些程序员短短几年就成长为全能选手或领域专家，有些程序员还在做CRUD？</p>\r\n					<h2 id=\"程序员的重复劳动陷阱\"><span style=\"font-size: 16px;\">　　程序员的重复劳动陷阱</span></h2>\r\n					<p>　　不知道大家有没有这样的感觉，每次加入一个新的公司/组，一开始总是要学这个学那个，可能会花很多时间看现有的代码，然后花一些时间实现一点点小的功能，等到经过一段时间后，自己对工作越来越得心应手，提来的类似需求马上就可以做，以做得多做得快为骄傲，觉的这样可以更受老板青睐，可以升职加薪。</p>\r\n					<p>　　我在毕业第三年的时候加入前公司，在加入公司的第一个季度，我主要再做一些边缘工具以及理解系统，从第二个季度开始在组里的核心业务上开发。当时自己为了能够快速的出成果，会从组里所有的任务里挑看着比较容易实现的做，往往一天就可以做完一个或者两个任务。做完一个任务后，发现backlog里面有相似的任务，我也“赶紧”抢过来assign给自己，然后快速的做完，提交code\r\n						review。从那个季度开始我每个季度做的工单越来越多，超过组里的所有其他成员，自己也对自己的“高效”洋洋得意，觉的自己工作的非常充实，进步很大。</p>\r\n					<p>　　然而在这个过程中，我已经不知不觉得掉到“重复劳动”的陷阱中去了。</p>\r\n					<p>　　我们在写代码的时候，有一个原则交叫DRY（<strong>D</strong>on\'t&nbsp;<strong>R</strong>epeat&nbsp;<strong>Y</strong>ouself）原则，简单通俗的说就是不要copy\r\n						paste代码，能抽象成函数的抽象成函数，能抽象成基类的抽象成基类。但是程序员的工作本身也应该遵循一样的道理，那就是尽量不要做重复的工作。</p>\r\n					<h2 id=\"重复劳动对程序员的危害\"><span style=\"font-size: 16px;\">　　重复劳动对程序员的危害</span></h2>\r\n					<p>　　回到开篇的问题，同样是一样的计算机专业毕业，进入职场的职位和工作都差不多，为何有些程序员短短几年就成长为全能选手或领域专家，有些程序员还在做CRUD？</p>\r\n					<p><br class=\"Apple-interchange-newline\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img2018.cnblogs.com/blog/1694706/201906/1694706-20190617211339162-1142166449.jpg\"\r\n						 alt=\"\"></p>\r\n					<p>　　大部分的技术学习曲线类似于上图，经历过短暂的入门期和相对长一些的积累期之后，可能大部分技术都会进入到高效期。在入门期和积累期的时候可能技能使用的效率会低一些，进入到高效期之后，随着技能使用的效率大大提高，工作所产生的“输出”也越来越大。因此“高效期“给人以充实的假象。</p>\r\n					<p>　　一旦自己的某项技术进入到高效期，在此基础上的提升会非常困难，可能之前工作三个月所掌握的新知识，比之后一年在工作中积累的要多。有时候我们看一个程序员工作了5年，但是他可能第一年学习并熟悉所用的技术，接下来4年都在做相同的工作，解决类似的需求，那么他的5年工作经验等于1年乘以5。</p>\r\n					<p>　　而有些程序员，他每工作一段时间之后，都会钻研技术更深的部分，或者去学习新的技术，总是保持着在尝试自己并不擅长的领域，那么这样的程序员，他的5年工作经验会比前一种程序员要多。</p>\r\n					<h2 id=\"如何摆脱重复劳动的循环\"><span style=\"font-size: 16px;\">　　如何摆脱重复劳动的循环</span></h2>\r\n					<p>　　既然重复劳动的危害这么大，那么我们是否可以摆脱重复劳动的循环呢？</p>\r\n					<p>　　有的时候，程序员自己也不想老是重复的干类似的东西，但是无奈被派发的任务重复的很多，似乎自己可以选择的不多。</p>\r\n					<p>　　在我自己在第三年大量重复劳动之后，我的经理找到我谈话，说我不应该这样重复自己，同样的事情做一两次就好了，再重复的做对自己的帮助不大。我分享一下我是怎么样避免重复的劳动的：</p>\r\n					<ol>\r\n						<li>找到Pattern，解决一类问题而不是一个问题。当你解决了N次类似的需求的时候，是否可以把这些问题抽象出来，是否可以去自动化的实现这类需求？改了N次bug之后，是否可以发现bug的规律，能够开发出静态分析工具来抓住这些bug？</li>\r\n						<li>尝试用新的技术解决同样的问题。有时当项目的实现并没有多少规定的时候，我们可以在一定的自由度下尝试新的工具。今年年初的时候我去尝试修改一个已有的内部工具前段，持着学习新技术的心理，我用Redux重新实现了前段，而不是在原有的jQuery的前段基础上修改。</li>\r\n						<li>尝试换岗。换岗位可以直接的让你接受不同的项目，做一些不同的事情。我在上家公司的第一组待了近三年才换组，现在来看应该更早的时候尝试不同的事情。换岗位也会带来一些其他的问题，比如到新岗位之后可能会影响晋升速度，需要重新建立自己的权威等等。</li>\r\n						<li>换工作。换工作是一个终极大招，它会带来很多其他的变化，不建议只是为了脱离重复劳动而换工作。如果没有养成良好的学习习惯，那么换一份新工作之后也很有可能陷入到新的重复劳动的循环中。</li>\r\n					</ol>\r\n					<h2 id=\"重复劳动不可以完全避免\"><span style=\"font-size: 16px;\">　　重复劳动不可以完全避免</span></h2>\r\n					<p>　　重复劳动是否可以完全避免呢？</p>\r\n					<p>　　我觉的是不可以避免的。以上的内容都是基于程序员成长的角度去分析问题，重复劳动是有害的。但是将程序员的劳动视为价值输出的话，熟练的价值输出确实也是程序员的价值之一，可以争取到更高的薪酬。</p>\r\n					<p>　　我们站在组织的角度上来看，重复的需求永远存在，这些重复的需求需要被完成。如果在人员配置有限的情况下，不可避免的单个个体成员需要去进行一定的重复劳动。而由于时间上的紧迫性，可能必须要用高效粗暴的方法来实现。</p>\r\n					<p>　　如果你是公司的初创成员，需要在初期做大量的重复工作来从无到有的实现新的产品，那毫无疑问这是应该做的，因为这样的重复劳动带来的收益可能是巨大的。</p>\r\n					<p>　　希望大家在工作中都可以正确的认识到重复劳动的陷阱，让自己能够保持持久的成长。</p>\r\n				</div>\r\n\r\n\r\n			</div>\r\n			\r\n		</div>', '20', '2019-12-30 22:13:57', '2019-12-30 22:13:57', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1005', '为什么说DOM操作很慢', '首先，DOM对象本身也是一个js对象，所以严格来说，并不是操作这个对象慢，而是说操作了这个对象后，会触发一些浏览器行为，比如布局（layout）和绘制（paint）。下面主要先介绍下这些浏览器行为，阐述一个页面是怎么最终被呈现出来的，另外还会从代码的角度，来说明一些不好的实践以及一些优化方案。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　一直都听说DOM很慢，要尽量少的去操作DOM，于是就想进一步去探究下为什么大家都会这样说，在网上学习了一些资料，这边整理出来。</p>\r\n							<p>　　首先，DOM对象本身也是一个js对象，所以严格来说，并不是操作这个对象慢，而是说操作了这个对象后，会触发一些浏览器行为，比如布局（layout）和绘制（paint）。下面主要先介绍下这些浏览器行为，阐述一个页面是怎么最终被呈现出来的，另外还会从代码的角度，来说明一些不好的实践以及一些优化方案。</p>\r\n							<h2>　　浏览器是如何呈现一张页面的</h2>\r\n							<p>　　一个浏览器有许多模块，其中负责呈现页面的是渲染引擎模块，比较熟悉的有WebKit和Gecko等，这里也只会涉及这个模块的内容。</p>\r\n							<p>　　先用文字大致阐述下这个过程：</p>\r\n							<ul>\r\n								<li>解析HTML，并生成一棵DOM tree</li>\r\n								<li>解析各种样式并结合DOM tree生成一棵Render tree</li>\r\n								<li>对Render tree的各个节点计算布局信息，比如box的位置与尺寸</li>\r\n								<li>根据Render tree并利用浏览器的UI层进行绘制</li>\r\n							</ul>\r\n							<p>　　其中DOM tree和Render tree上的节点并非一一对应，比如一个\"<code>display:none\"</code>的节点就只会存在于DOM tree上，而不会出现在Render\r\n								tree上，因为这个节点不需要被绘制。</p>\r\n							<p style=\"text-align: center;\"><img width=\"624\" height=\"289\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201602/1-20160219104627050-1270673052.jpg\"></p>\r\n							<p><span style=\"line-height: 1.8;\">　　上图是Webkit的基本流程，在术语上和Gecko可能会有不同，这里贴上Gecko的流程图，不过文章下面的内容都会统一使用Webkit的术语。</span></p>\r\n							<p style=\"text-align: center;\"><img width=\"624\" height=\"290\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201602/1-20160219104627034-1997891554.jpg\"></p>\r\n							<p><span style=\"line-height: 1.8;\">　　影响页面呈现的因素有许多，比如link的位置会影响首屏呈现等。但这里主要集中讨论与layout相关的内容。</span></p>\r\n							<p>　　paint是一个耗时的过程，然而layout是一个更耗时的过程，我们无法确定layout一定是自上而下或是自下而上进行的，甚至一次layout会牵涉到整个文档布局的重新计算。</p>\r\n							<p>　　但是layout是肯定无法避免的，所以我们主要是要最小化layout的次数。</p>\r\n							<h2 id=\"layout\">　　什么情况下浏览器会进行layout</h2>\r\n							<p>　　在考虑如何最小化layout次数之前，要先了解什么时候浏览器会进行layout。</p>\r\n							<p>　　layout（reflow）一般被称为布局，这个操作是用来计算文档中元素的位置和大小，是渲染前重要的一步。在HTML第一次被加载的时候，会有一次layout之外，js脚本的执行和样式的改变同样会导致浏览器执行layout，这也是本文的主要要讨论的内容。</p>\r\n							<p>　　一般情况下，浏览器的layout是lazy的，也就是说：在js脚本执行时，是不会去更新DOM的，任何对DOM的修改都会被暂存在一个队列中，在当前js的执行上下文完成执行后，会根据这个队列中的修改，进行一次layout。</p>\r\n							<p>　　然而有时希望在js代码中立刻获取最新的DOM节点信息，浏览器就不得不提前执行layout，这是导致DOM性能问题的主因。</p>\r\n							<p>　　如下的操作会打破常规，并触发浏览器执行layout：</p>\r\n							<ul>\r\n								<li>通过js获取需要计算的DOM属性</li>\r\n								<li>添加或删除DOM元素</li>\r\n								<li>resize浏览器窗口大小</li>\r\n								<li>改变字体</li>\r\n								<li>css伪类的激活，比如:hover</li>\r\n								<li>通过js修改DOM元素样式且该样式涉及到尺寸的改变</li>\r\n							</ul>\r\n							<p>　　我们来通过一个例子直观的感受下：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read</span>\r\n		<span style=\"color: #0000ff;\">var</span> h1 =<span style=\"color: #000000;\"> element1.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write (invalidates layout)</span>\r\n		element1.style.height = (h1 * 2) + \'px\'<span style=\"color: #000000;\">;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read (triggers layout)</span>\r\n		<span style=\"color: #0000ff;\">var</span> h2 =<span style=\"color: #000000;\"> element2.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write (invalidates layout)</span>\r\n		element2.style.height = (h2 * 2) + \'px\'<span style=\"color: #000000;\">;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read (triggers layout)</span>\r\n		<span style=\"color: #0000ff;\">var</span> h3 =<span style=\"color: #000000;\"> element3.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write (invalidates layout)</span>\r\n		element3.style.height = (h3 * 2) + \'px\';  </pre>\r\n							</div>\r\n							<p>　　clientHeight，这个属性是需要计算得到的，于是就会触发浏览器的一次layout。我们来利用chrome（v47.0）的开发者工具看下（截图中的timeline\r\n								record已经经过筛选，仅显示layout）：</p>\r\n							<p><img width=\"600\" height=\"592\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201602/1-20160219104627128-1703439703.jpg\"></p>\r\n							<p>　　上面的例子中，代码首先修改了一个元素的样式，接下来读取另一个元素的<code>clientHeight</code>属性，由于之前的修改导致当前DOM被标记为脏，为了保证能准确的获取这个属性，浏览器会进行一次layout（我们发现chrome的开发者工具良心的提示了我们这个性能问题）。</p>\r\n							<p>　　优化这段代码很简单，预先读取所需要的属性，在一起修改即可。</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read</span>\r\n		<span style=\"color: #0000ff;\">var</span> h1 =<span style=\"color: #000000;\"> element1.clientHeight;  \r\n		</span><span style=\"color: #0000ff;\">var</span> h2 =<span style=\"color: #000000;\"> element2.clientHeight;  \r\n		</span><span style=\"color: #0000ff;\">var</span> h3 =<span style=\"color: #000000;\"> element3.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write (invalidates layout)</span>\r\n		element1.style.height = (h1 * 2) + \'px\'<span style=\"color: #000000;\">;  \r\n		element2.style.height </span>= (h2 * 2) + \'px\'<span style=\"color: #000000;\">;  \r\n		element3.style.height </span>= (h3 * 2) + \'px\'; </pre>\r\n							</div>\r\n							<p>　　看下这次的情况：<img width=\"551\" height=\"543\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images2015.cnblogs.com/news/1/201602/1-20160219104627316-284959754.jpg\"></p>\r\n							<p>　　下面再介绍一些其他的优化方案。</p>\r\n							<h2 id=\"layout\">　　最小化layout的方案</h2>\r\n							<p>　　上面提到的一个批量读写是一个，主要是因为获取一个需要计算的属性值导致的，那么哪些值是需要计算的呢？</p>\r\n							<p>　　这个链接里有介绍大部分需要计算的属性：<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html\">http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html</a></p>\r\n							<p>　　再来看看别的情况：</p>\r\n							<h3 id=\"dom\">　　面对一系列DOM操作</h3>\r\n							<p>　　针对一系列DOM操作（DOM元素的增删改），可以有如下方案：</p>\r\n							<ul>\r\n								<li>documentFragment</li>\r\n								<li>display: none</li>\r\n								<li>cloneNode</li>\r\n							</ul>\r\n							<p>　　比如（仅以documentFragment为例）：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #0000ff;\">var</span> fragment =<span style=\"color: #000000;\"> document.createDocumentFragment();  \r\n		</span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i=0; i &lt; items.length; i++<span style=\"color: #000000;\">){  \r\n		  </span><span style=\"color: #0000ff;\">var</span> item = document.createElement(\"li\"<span style=\"color: #000000;\">);\r\n		  item.appendChild(document.createTextNode(</span>\"Option \" +<span style=\"color: #000000;\"> i);\r\n		  fragment.appendChild(item);\r\n		}\r\n		list.appendChild(fragment);  </span></pre>\r\n							</div>\r\n							<p>　　这类优化方案的核心思想都是相同的，就是先对一个不在Render tree上的节点进行一系列操作，再把这个节点添加回Render tree，这样无论多么复杂的DOM操作，最终都只会触发一次layout。</p>\r\n							<h3>　　面对样式的修改</h3>\r\n							<p>　　针对样式的改变，我们首先需要知道并不是所有样式的修改都会触发layout，因为我们知道layout的工作是计算RenderObject的尺寸和大小信息，那么我如果只是改变一个颜色，是不会触发layout的。</p>\r\n							<p>　　这里有一个网站<a href=\"http://csstriggers.com/\">CSS triggers</a>，详细列出了各个CSS属性对浏览器执行layout和paint的影响。</p>\r\n							<p>　　像下面这种情况，和上面讲优化的部分是一样的，注意下读写即可。</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>elem.style.height = \"100px\"; <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> mark invalidated  </span>\r\n		elem.style.width = \"100px\"<span style=\"color: #000000;\">;  \r\n		elem.style.marginRight </span>= \"10px\"<span style=\"color: #000000;\">;\r\n		\r\n		elem.clientHeight </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> force layout here </span></pre>\r\n							</div>\r\n							<p>　　但是要提一下动画，这边讲的是js动画，比如：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> animate (from, to) {  \r\n		  </span><span style=\"color: #0000ff;\">if</span> (from === to) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">\r\n		\r\n		  requestAnimationFrame(</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> () {\r\n		    from </span>+= 5<span style=\"color: #000000;\">\r\n		    element1.style.height </span>= from + \"px\"<span style=\"color: #000000;\">\r\n		    animate(from, to)\r\n		  })\r\n		}\r\n		\r\n		animate(</span>100, 500) </pre>\r\n							</div>\r\n							<p>　　动画的每一帧都会导致layout，这是无法避免的，但是为了减少动画带来的layout的性能损失，可以将动画元素绝对定位，这样动画元素脱离文本流，layout的计算量会减少很多。</p>\r\n							<h3 id=\"requestanimationframe\">　　使用requestAnimationFrame</h3>\r\n							<p>　　任何可能导致重绘的操作都应该放入<code>requestAnimationFrame</code></p>\r\n							<p>　　在现实项目中，代码按模块划分，很难像上例那样组织批量读写。那么这时可以把写操作放在<code>requestAnimationFrame</code>的callback中，统一让写操作在下一次paint之前执行。</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read</span>\r\n		<span style=\"color: #0000ff;\">var</span> h1 =<span style=\"color: #000000;\"> element1.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write</span>\r\n		requestAnimationFrame(<span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">() {  \r\n		  element1.style.height </span>= (h1 * 2) + \'px\'<span style=\"color: #000000;\">;\r\n		});\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Read</span>\r\n		<span style=\"color: #0000ff;\">var</span> h2 =<span style=\"color: #000000;\"> element2.clientHeight;\r\n		\r\n		</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> Write</span>\r\n		requestAnimationFrame(<span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">() {  \r\n		  element2.style.height </span>= (h2 * 2) + \'px\'<span style=\"color: #000000;\">;\r\n		});</span></pre>\r\n							</div>\r\n							<p><img width=\"615\" height=\"608\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201602/1-20160219104627300-883434888.jpg\"></p>\r\n							<p>　　可以很清楚的观察到Animation Frame触发的时机，MDN上说是在paint之前触发，不过我估计是在js脚本交出控制权给浏览器进行DOM的invalidated check之前执行。</p>\r\n							<h2>　　其他注意点</h2>\r\n							<p>　　除了由于触发了layout而导致性能问题外，这边再列出一些其他细节：</p>\r\n							<p>　　缓存选择器的结果，减少DOM查询。这里要特别提下HTMLCollection。HTMLCollection是通过<code>document.getElementByTagName</code>得到的对象类型，和数组类型很类似但是每次获取这个对象的一个属性，都相当于进行一次DOM查询：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre><span style=\"color: #0000ff;\">var</span> divs = document.getElementsByTagName(\"div\"<span style=\"color: #000000;\">);  \r\n		</span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">var</span> i = 0; i &lt; divs.length; i++){  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">infinite loop  </span>\r\n		  document.body.appendChild(document.createElement(\"div\"<span style=\"color: #000000;\">));\r\n		}</span></pre>\r\n							</div>\r\n							<p>　　比如上面的这段代码会导致无限循环，所以处理HTMLCollection对象的时候要做些缓存。</p>\r\n							<p>　　另外，减少DOM元素的嵌套深度并优化css，去除无用的样式对减少layout的计算量有一定帮助。</p>\r\n							<p>　　在DOM查询时，<code>querySelector</code>和<code>querySelectorAll</code>应该是最后的选择，它们功能最强大，但执行效率很差，如果可以的话，尽量用其他方法替代。</p>\r\n							<p>　　下面两个jsperf的链接，可以对比下性能。</p>\r\n							<p>　　1）<a href=\"https://jsperf.com/getelementsbyclassname-vs-queryselectorall/162\">https://jsperf.com/getelementsbyclassname-vs-queryselectorall/162</a></p>\r\n							<p>　　2）<a href=\"http://jsperf.com/getelementbyid-vs-queryselector/218\">http://jsperf.com/getelementbyid-vs-queryselector/218</a></p>\r\n							<h2 id=\"view\">　　自己对View层的想法</h2>\r\n							<p>　　上面的内容理论方面的东西偏多，从实践的角度来看，上面讨论的内容，正好是View层需要处理的事情。已经有一个库FastDOM来做这个事情，不过它的代码是这样的：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>fastdom.read(<span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">() {  \r\n							  console.log(</span>\'read\'<span style=\"color: #000000;\">);\r\n							});\r\n		\r\n						fastdom.write(</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\">() {  \r\n						  console.log(</span>\'write\'<span style=\"color: #000000;\">);\r\n						});</span></pre>\r\n							</div>\r\n							<p>　　问题很明显，会导致<code>callback hell</code>，并且也可以预见到像FastDOM这样的imperative的代码缺乏扩展性，关键在于用了<code>requestAnimationFrame</code>后就变成了异步编程的问题了。要让读写状态同步，那必然需要在DOM的基础上写个Wrapper来内部控制异步读写，不过都到了这份上，感觉可以考虑直接上React了......</p>\r\n							<p>　　总之，尽量注意避免上面说到的问题，但如果用库，比如jQuery的话，layout的问题出在库本身的抽象上。像React引入自己的组件模型，用过virtual\r\n								DOM来减少DOM操作，并可以在每次state改变时仅有一次layout，我不知道内部有没有用<code>requestAnimationFrame</code>之类的，感觉要做好一个View层就挺有难度的，之后准备学学React的代码。希望自己一两年后会过来再看这个问题的时候，可以有些新的见解。</p>\r\n							\r\n							\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n			\r\n		</div>', '10', '2019-12-30 23:57:07', '2019-12-30 23:57:07', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1006', '怎么轻松学习JavaScript', '辛苦学习后又看似和实际应用脱节。通常学了很久的js基础之后，变量、函数、对象你也都略知一二，但一到公司开发项目的时候，却又难以下手。因为公司在开发实际项目的时候通常都是直接用它的衍生库，如：jquery，angular，boostrap，amaze，layui，ueditor等，而这些库又多如牛毛，同时还有自己的难点。让你都不知道该学哪个好，甚至都怀疑自己学的是不是js了，好像有多个版本的js一样，总是学不完......', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								js给初学者的印象总是那么的“杂而乱”，相信很多初学者都在找轻松学习js的途径。我试着总结自己学习多年js的经验，希望能给后来的学习者探索出一条“轻松学习js之路”。js给人那种感觉的原因多半是因为它如下的特点：</p>\r\n							<p style=\"padding-left: 30px;\">A：本身知识很抽象、晦涩难懂，如：闭包、内置对象、DOM。</p>\r\n							<p style=\"padding-left: 30px;\">B：本身内容很多，如函数库、对象库就一大堆。</p>\r\n							<p style=\"padding-left: 30px;\">C：混合多种编程思想。它里面不但牵涉面向过程编程思想，又有面向对象编程思想，同时，它的面向对象还和别的编程语言（如：C++，JAVA，PHP）不大一样。就好像又是新的一样，让你对曾经学的面向对象产生了怀疑......</p>\r\n							<p style=\"padding-left: 30px;\">D：辛苦学习后又看似和实际应用脱节。通常学了很久的js基础之后，变量、函数、对象你也都略知一二，但一到公司开发项目的时候，却又难以下手。因为公司在开发实际项目的时候通常都是直接用它的衍生库，如：jquery，angular，boostrap，amaze，layui，ueditor等，而这些库又多如牛毛，同时还有自己的难点。让你都不知道该学哪个好，甚至都怀疑自己学的是不是js了，好像有多个版本的js一样，总是学不完......</p>\r\n							<p style=\"padding-left: 30px;\">那么，怎么才能在js领域内学的轻松甚至游刃有余呢？我总结了一些实战意义的js学习经验：</p>\r\n							<p style=\"padding-left: 30px;\"><strong>首先要紧紧抓住它的地位</strong></p>\r\n							<p style=\"padding-left: 30px;\">&nbsp;</p>\r\n							<p><a href=\"http://upload-images.jianshu.io/upload_images/5256822-d6ea1ce7970bef4d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n								 target=\"_blank\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/5256822-d6ea1ce7970bef4d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n									 data-original-src=\"http://upload-images.jianshu.io/upload_images/5256822-d6ea1ce7970bef4d?imageMogr2/auto-orient/strip\"></a></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								时刻都不能忘记，否则很容易犯“一叶障目不见泰山”的错误。不要学了很久就知道js是编程语言，就是写代码，而且特点就是乱七八糟就完了，那样是学不好js的。要时时抓住它的地位，确切的说是它在整个Web中的地位：它属于前端的核心，主要用来操控和重新调整DOM，通过修改DOM结构，从而来达到修改页面效果的目的。要用这个中心思想去指导后续的一切js的学习，并且形成条件反射。</p>\r\n							<p style=\"padding-left: 30px;\"><strong><strong>要有一条清晰的学习路线</strong></strong></p>\r\n							<p><a href=\"http://upload-images.jianshu.io/upload_images/5256822-1e595907df2472c2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n								 target=\"_blank\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/5256822-1e595907df2472c2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n									 data-original-src=\"http://upload-images.jianshu.io/upload_images/5256822-1e595907df2472c2?imageMogr2/auto-orient/strip\"></a></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个只能是过来人给你提供参考了。我的学习路线如下：</p>\r\n							<p style=\"padding-left: 30px;\"><strong>A：js基础部分</strong>，如：定义变量、函数、数组、字符串等的处理，内置函数、内置对象等；</p>\r\n							<p style=\"padding-left: 30px;\"><strong>B：js面向过程编程思想</strong>，封装出各个函数，试着用这些去做一些常见的小功能，如：选项卡、自定义多选按钮、自定义播放器、3D幻灯片；</p>\r\n							<p style=\"padding-left: 30px;\"><strong>C：js面向对象编程思想</strong>，试着去封装一些你自己的对象，提供出有意义的接口出来；</p>\r\n							<p style=\"padding-left: 30px;\"><strong>D：学了上述的内容，然后学常用的库，这里必须学jquery</strong>；</p>\r\n							<p style=\"padding-left: 30px;\"><strong>E：学基于jquery之上的常见插件</strong>，如：bootstrap，Layer，富文本编辑器等；</p>\r\n							<p style=\"padding-left: 30px;\"><strong>F：综合应用上面的多种库写实际项目的模板</strong>，多写几套。</p>\r\n							<p style=\"padding-left: 30px;\"><strong><strong>注意学习方法</strong></strong></p>\r\n							<p><a href=\"http://upload-images.jianshu.io/upload_images/5256822-bfbbb3deffcba908?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n								 target=\"_blank\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/5256822-bfbbb3deffcba908?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n									 data-original-src=\"http://upload-images.jianshu.io/upload_images/5256822-bfbbb3deffcba908?imageMogr2/auto-orient/strip\"></a></p>\r\n							<p style=\"padding-left: 30px;\">我的学习方法总结如下：</p>\r\n							<p style=\"padding-left: 30px;\"><strong>A：多买几本国外的js书籍</strong>，不要购买那种20天精通之类的书。否则你是很难学通的，更可怕的是：本来你买本好书自学3个月可能学会的，它们硬是能折腾你两年......</p>\r\n							<p style=\"padding-left: 30px;\">书籍推荐（仅供参考）</p>\r\n							<p style=\"padding-left: 30px;\">《JavaScript&nbsp;DOM编程艺术》</p>\r\n							<p style=\"padding-left: 30px;\">《JavaScript权威指南》</p>\r\n							<p style=\"padding-left: 30px;\">《javaScript&nbsp;DOM高级程序设计》</p>\r\n							<p style=\"padding-left: 30px;\">《JavaScript设计模式》</p>\r\n							<p style=\"padding-left: 30px;\">《锋利的jquery》</p>\r\n							<p style=\"padding-left: 30px;\">争取把书上的功能都自己练习多次，不是一次。书读百遍，其义自见。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>B：从多角度去学习和领悟</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								充分调动你所学的东西，从多角度去做某一功能，如：以前你是从面向过程角度做的，现在改为从面向对象的角度再来做，或者继续做成可以直接使用的插件，提供属性、方法等出来。争取让你做的这个功能逐渐能使用到实际项目中来。这样的好处：既综合应用了你的所学，又能有实际意义。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>C：一定不要好高骛远</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								不要放过哪怕很小的动手机会，如做一个选项卡。千万不要认为有了类似的甚至更好的插件就不需要自己写了，知识是别人的，不是你的，你即使会用了也对你的技术技能水平没有任何提升。你要多问自己，如果要我来做，我该怎么做？</p>\r\n							<p style=\"padding-left: 30px;\"><strong>D：脚踏实地的同时，也不要脱离实际</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 多看现在网上已经出现的效果好的功能，让它去激发你的学习热情，尽量去学着模拟，调动你的知识去和实际相结合。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>E：多写总结</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								这种总结不但包括源代码、显示效果截图，还应该很容易犯的错误和对应的解决方法以及最后一两句精简的结论性语句。对自己写的总结不是写完了就了事了，要多回顾、多改进、多精简。到做项目的时候，应该是看里面的一两句话就知道是讲什么了，而不要再去看长篇大论了。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>F：构建知识导图</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个可以让你越学越清晰，比如：<a href=\"http://www.phpkhbd.com/sky.html\" target=\"_blank\">http://www.phpkhbd.com/sky.html</a>，你可以按你喜欢的任何形式去做，只要自己印象深刻就行。</p>\r\n							<p style=\"padding-left: 30px;\">注意：知识导图也应该是经常修改、修正，让它更合理、更清晰。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>注意事项</strong></p>\r\n							<p><a href=\"http://upload-images.jianshu.io/upload_images/5256822-bdcaea6856af0f41?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n								 target=\"_blank\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/5256822-bdcaea6856af0f41?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n									 data-original-src=\"http://upload-images.jianshu.io/upload_images/5256822-bdcaea6856af0f41?imageMogr2/auto-orient/strip\"></a></p>\r\n							<p style=\"padding-left: 30px;\"><strong>A：充分利用一切手段</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								很多人总感觉时间紧，没有大块的时间学习。我要说你不会学了，你不应该只是抱怨，而是要利用一切手段去学习，要知道，不一定只有看书才叫学习。当你冷静的坐在某个地方，思考了一下，总结了一下，你也都叫学习，但凡有灵感，就可以记录下来，比如：记录在手机上，等方便了再记录在专门的地方。这都叫学习。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>B：贵在坚持</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								要沉的下心。没有一蹴而就的成功，否则那也不是成功，只能叫“侥幸”。不但要老老实实的把每个功能都试着去实现，而且要精益求精地不断去修正，这个过程是漫长的，也是考验一个人是否是人才的标准。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>C：注意培养信心</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								此时的你，不适合一来就看很复杂很炫的网页效果的源代码，也不适合一来就学jquery，angular，vue，bootstrap这些东西。这些内容包含了很多深奥的知识在里面，在没有任何基础的情况下直接学这些，会严重打击你的自信心。而此时你是弱小的，你需要的是培养信心，而不是反过来，否则结局很可能是“夭折”，离学有所成也就遥遥无期了。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>D：多跟学的好的过来人学习</strong></p>\r\n							<p style=\"padding-left: 30px;\">站在巨人的肩上，才能看的更远。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>E：不要浪费在工具的不停选择上</strong></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;js的编辑工具很多，如果无从下手，建议使用：sublime，或者使用Hbuilder。很多公司里的技术人员都用这些，你直接用这个也减少了和别人之间的沟通问题。我也是用这个，感觉很好。</p>\r\n							<p style=\"padding-left: 30px;\"><strong>总结</strong></p>\r\n							<p><a href=\"http://upload-images.jianshu.io/upload_images/5256822-0f3b58bd6989f4f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n								 target=\"_blank\"><img style=\"margin-right: auto; margin-left: auto; display: block;\" alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/5256822-0f3b58bd6989f4f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"\r\n									 data-original-src=\"http://upload-images.jianshu.io/upload_images/5256822-0f3b58bd6989f4f4?imageMogr2/auto-orient/strip\"></a></p>\r\n							<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n								感觉js学起来“杂而乱”的原因是因为你太“聪明”了，一开始就管的太宽，利害得失也计算的太精细。要求太完美则心里承受能力下降，很容易出现“障”。此时，你应该“笨”一些，不要考虑那么长远，“傻人有傻福”，只要做好今天就够了。一些不合理的学习方法和心态也让你迷失了自我，如：心浮气躁、眼高手低、好高骛远，这些都会让你在“乱七八糟”的js面前深陷迷雾、不能自拔。此时，你应该重新定位自己的位置，重新去认识js，放下包袱，方能轻松上阵。把杯子先倒空，才能灌新水......其实，js是前端的核心。影响越来越深的互联网+会渴求越来越多的js人才，只有经历过真正刻骨铭心的学习经历，才能造就出赢得未来的真正精英。</p>\r\n						</div>\r\n\r\n					</div>\r\n					\r\n			</div>\r\n			\r\n		</div>', '10', '2019-12-31 00:00:25', '2019-12-31 00:00:25', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1007', '关于响应式布局', '可切换的固定布局、弹性布局、混合布局都是目前可被采用的响应式布局方式：其中可切换的固定布局的实现成本最低，但拓展性比较差；而弹性布局与混合布局效果具响应性，都是比较理想的响应式布局实现方式。只是对于不同类型的页面排版布局实现响应式设计，需要采用不用的实现方式。通栏、等分结构的适合采用弹性布局方式、而对于非等分的多栏结构往往需要采用混合布局的实现方式。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　在谈响应式布局前，我们先梳理下网页设计中整体页面排版布局，常见的主要有如下几种类型：</p>\r\n							<p>　　<strong>布局类型</strong></p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"238\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721256602145.png\"></p>\r\n							<p>　　<strong>布局实现</strong></p>\r\n							<p>　　采用何种方式实现布局设计，也有不同的方式，这里基于页面的实现单位而言，分为四种类型：固定布局、可切换的固定布局、弹性布局、混合布局。</p>\r\n							<ol>\r\n								<li><strong>固定布局：</strong>以像素作为页面的基本单位，不管设备屏幕及浏览器宽度，只设计一套尺寸；</li>\r\n								<li><strong>可切换的固定布局：</strong>同样以像素作为页面单位，参考主流设备尺寸，设计几套不同宽度的布局。通过设别的屏幕尺寸或浏览器宽度，选择最合适的那套宽度布局；</li>\r\n								<li><strong>弹性布局：</strong>以百分比作为页面的基本单位，可以适应一定范围内所有尺寸的设备屏幕及浏览器宽度，并能完美利用有效空间展现最佳效果；</li>\r\n								<li><strong>混合布局：</strong>同弹性布局类似，可以适应一定范围内所有尺寸的设备屏幕及浏览器宽度，并能完美利用有效空间展现最佳效果；只是混合像素、和百分比两种单位作为页面单位。</li>\r\n							</ol>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"889\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721250356502.png\"></p>\r\n							<p>　　可切换的固定布局、弹性布局、混合布局都是目前可被采用的响应式布局方式：其中可切换的固定布局的实现成本最低，但拓展性比较差；而弹性布局与混合布局效果具响应性，都是比较理想的响应式布局实现方式。只是对于不同类型的页面排版布局实现响应式设计，需要采用不用的实现方式。通栏、等分结构的适合采用弹性布局方式、而对于非等分的多栏结构往往需要采用混合布局的实现方式。</p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"257\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721250207974.png\"></p>\r\n							<p>　　<strong>布局响应</strong></p>\r\n							<p>　　对页面进行响应式的设计实现，需要对相同内容进行不同宽度的布局设计，有两种方式：桌面优先（从桌面端开始向下设计）；移动优先（从移动端向上设计）；</p>\r\n							<p>　　无论基于那种模式的设计，要兼容所有设备，布局响应时不可避免地需要对模块布局做一些变化（发生布局改变的临界点称之为断点），</p>\r\n							<p>　　我们通过JS获取设备的屏幕宽度，来改变网页的布局，这一过程我们可以称之为布局响应屏幕。常见的主要有如下几种方式：</p>\r\n							<p>　　<strong>布局不变，即页面中整体模块布局不发生变化，主要有：</strong></p>\r\n							<ul>\r\n								<li><strong>模块中内容：挤压－拉伸；</strong></li>\r\n								<li><strong><strong>模块中内容：</strong>换行－平铺；</strong></li>\r\n								<li><strong><strong>模块中内容：</strong>删减－增加；</strong></li>\r\n							</ul>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721259881046.png\"></p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721255046659.png\"></p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721250044746.png\"></p>\r\n							<p>　　<strong>布局改变，即页面中的整体模块布局发生变化，主要有：</strong></p>\r\n							<ul>\r\n								<li><strong>模块位置变换；</strong></li>\r\n								<li><strong>模块展示方式改变：隐藏－展开；</strong></li>\r\n								<li><strong>模块数量改变：删减－增加<strong>；</strong></strong></li>\r\n							</ul>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721262856787.png\"></p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721264882960.png\"></p>\r\n							<p data-mce-=\"\"><img width=\"660\" height=\"414\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/24634/201503/031721274104343.png\"></p>\r\n							<p>　　很多时候，单一方式的布局响应无法满足理想效果，需要结合多种组合方式，但原则上尽可能时保持简单轻巧，而且同一断点内（发生布局改变的临界点称之为断点）保持统一逻辑。否则页面实现得太过复杂，也会影响整体体验和页面性能。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n\r\n				</div>\r\n			</div>\r\n\r\n\r\n		</div>', '10', '2019-12-31 00:03:51', '2019-12-31 00:03:51', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1008', '如何阅读技术书籍', '不知道大家有没有这种感受？当你拿到一本书并准备读时，总是想在几天之内就把它看完；看到后面就不想往前翻；每天以看了多少页书为衡量自己今天的价值，而不是吸收了多少知识；看完一本书总感觉脑袋空空的，看了后面忘了前面的......当然你可能还会碰到很多看书的烦恼，下面我就谈谈自己对看书的一些思考。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　不知道大家有没有这种感受？当你拿到一本书并准备读时，总是想在几天之内就把它看完；看到后面就不想往前翻；每天以看了多少页书为衡量自己今天的价值，而不是吸收了多少知识；看完一本书总感觉脑袋空空的，看了后面忘了前面的......当然你可能还会碰到很多看书的烦恼，下面我就谈谈自己对看书的一些思考。</p>\r\n							<p>　　首先这里先做一个假定，假设你手里读的书一定是一本经典的、优秀的书。如果不是，那么就赶紧扔了，一本好书是一个好老师，而一本渣书简直害死人...</p>\r\n							<p>　　接下来我把计算机类的书大致归为三大类：</p>\r\n							<p>　　（1）语言方面的书。比如C、Java、Python等等</p>\r\n							<p>　　（2）算法书籍。《算法导论》、《编程珠玑》等等</p>\r\n							<p>　　（3）某一特定类别的书。比如操作系统、编译原理、网络、Linux内核、服务器原理等等需要很大的精力才能彻底掌握的书。</p>\r\n							<p>　　当然这个归类是非常粗浅的，针对不同种类的书，我们的阅读策略也会有所侧重。</p>\r\n							<p>　　<strong>首先针对第一类书。诀窍就一个字：练。</strong></p>\r\n							<p>　　作为一个新手，千万不要陷入语言的细枝末节中，有些人学语言的方式实在是让人哭笑不得，比如他要学Java，他拿着一本java编程思想使劲地看，看了后面忘了前面，把自己搞的痛苦不堪，最后感叹一句：Java真难！（我亲眼见过，，还不止一两个，也是醉了）。还有一些人，从网上或者什么地方找来一些教学视频，然后坐在那一边翘着二郎腿一边貌似“聚精会神”地看，中途偶尔QQ上来人了还要聊几句（哥们，你当是看电影么？）。这两种学习方式看上去不同，其实本质上是一样的，都是一种被动地接受知识的方式。</p>\r\n							<p>　　这种方式及其低效，记住：<strong>代码是敲出来的，不是看或者听出来的！</strong>无论你是看书或者看视频，其实都不要紧，关键是一定要自己动手把它敲出来。当书看完或者视频看完后，你手上应该有大量的代码，这个时候再把这些代码敲个十几遍，此时你的脑子里留下的就是代码而不是文字或者声音了。</p>\r\n							<p>　　说到这，让我想起了我们的英语教育，，个人感觉学英语最有效的方法就是把自己置于一个英语环境或给自己创造一个英语环境，接下来就是使劲地说。。这样，不到几个月，保证你的英语棒棒哒！而不是拼命地背单词或看语法。。（好了，不吐槽英语了O(∩_∩)O！）。</p>\r\n							<p>　　<strong>接下来说说该如何看算法书。诀窍：理解+运用。</strong></p>\r\n							<p>　　学算法不同于学语言，学算法最重要的不是记忆，而是理解。关于如何理解算法那也没什么好说的了，看每个人的悟性还有坚持了，当然去网上找一些容易理解的资料或者跟同学探讨会对你学算法非常有帮助。</p>\r\n							<p>　　我们这里重点说说为什么要强调运用。因为算法这种东西本质上是比较难理解的，比较难理解的东西就比较容易遗忘，比如你好不容易花了很长时间理解一个动归算法或KMP算法，然后你自认为自己彻底掌握了，然后扔在那几个月不管它。然后就没有然后了......</p>\r\n							<p>　　因此算法一旦理解了以后相当重要的一点就是一定要去运用，在不同的场景中去运用。那么到底怎么运用呢？比如你的算法书后面的习题，还有现在很多高校有很好的ACM\r\n								OJ，上面有大量的算法设计题，这些都是非常好的资源。当你用你目前已经理解的算法去解算法题时，这个过程本身会进一步促进你对这个算法的理解，并且加强你的记忆。比如可能过一段时间你把这个算法忘了，但是当你一想起你解的那道题时，你又把那个算法回忆起来了。因为我们人脑总是不太容易记住那些抽象的概念，而对那些具体的东西记得比较牢。</p>\r\n							<p>　　话说回来，运用算法去解题是非常花费时间的，有时候一道题你可能半天都AC不了。。所以我建议那些现在还在读书的学生，如果你未来想走IT技术的道路，还是去学学算法吧。对你是绝对有好处的！你工作以后可能想学都没时间了！</p>\r\n							<p>　　<strong>最后谈谈对第三类书的学习。</strong></p>\r\n							<p>　　第三类书通常都是一些理论性很强的书，比较难以消化，而且短时期内看不出它有什么价值。对于很多程序员来说感觉用不上。但是可以这么说：对这一类书理解有多深决定了你是一个攻城狮还是一个程序猿。</p>\r\n							<p>　　当然每个人都有他自己的选择，并不是所有人都想在技术这条路上走得很远，如果你是那个想在技术上成就自己的人，那么欢迎一起来探讨。如果不是，那么就当随便看看好了。</p>\r\n							<p>　　针对这一类书籍的特点，我总结了自己的读书方法——三遍读书法。是的，没错！起码三遍。对于这类书籍，要么不读，要读起码读三遍。其实，在现实中，有很多人对于自己读过的书是不太愿意再去读的，不管是技术书还是其他方面的书。这可能跟人把读书看得过于功利有关，认为读过的书再去读就是浪费时间，还不如去读新的书。</p>\r\n							<p>　　如果你问一个人你为什么要读一本书时，他可能会告诉你为了学新的知识或获取新的思想。的确，目的确实没错，可是往往他忽略了一个简单的道理：一本书如果只读一遍，那么你最多只能吸收10%的知识。如果你再读第二遍、第三遍。。。你所吸收的知识就能成倍地增长，当你再读下去的时候，你已经不止是简单地再吸收书本身的知识了，你会形成自己的思考，也许这就是古人说的读书百遍，其义自现吧！</p>\r\n							<p>　　所以说，如果一本经典的书拿来，你只准备看一遍，那么还是别看了，纯粹浪费时间！既然说一本好书要读好几遍，那么问题来了：我该如何读这本书呢？是从头到脚重复地看还是有其他的方法呢？当然有。我这里为什么要提三遍读书法，这其实是对投入与产出的一种权衡，谁都知道多看几遍越好，但是现实中往往很难让你有足够的时间去反复地看，这时候就需要找到能尽可能用最少的时间来获得最大的收获的方法。</p>\r\n							<p>　　那么三遍读书法具体是怎么来操作的呢？假如你拿到一本技术书籍</p>\r\n							<p>　　<strong>第一遍</strong></p>\r\n							<p>　　尽可能在比较短的时间内过完这本书。<strong>在第一遍中，不要陷入某个具体的知识点，这一遍的主要目的是能把握每个章节的重要知识点，记住，是把握，而不是理解透彻。</strong>这一遍讲究的是快、高效。千万不要拖太长的时间。而且对于第一遍读完后的“成果”要牢记，最好把它记录下来，因为它们是整本书的骨架。</p>\r\n							<p>　　<strong>第二遍</strong></p>\r\n							<p>　　第二遍讲究的是慢、理解。<strong>第二遍一定要慢，要尽可能地把知识点都理解，千万不要贪快，不要讲究进度。</strong>记住，在这一遍中：欲速则不达！遇到实在不懂的点，可以先放一放，等看到后面了再回过头来理解一下，或者请教一下其他人。</p>\r\n							<p>　　不建议边看边做笔记，最好在读完每一章或者每一节后，把书本合上，然后在脑子里去回忆你看过的部分，尤其是重点知识点，然后把它记录下来，这样比单纯记笔记效率要高很多。（个人比较推荐写博客。千万别觉得自己水平不够，不好意思写博客。记住，写博客不仅仅是为了给别人看，更重要的是对自己学过知识点的一种思路上的整理，通常这种整理都是非常高效的。另外，新手往往觉得写博客很费时间，但是相信我，如果你真的用心在写博客，它绝对不会辜负你的这些时间的！）这样一遍完成后，你对整本书已经有了一个比较完整的理解了。这个时候，你可以去看看你自己写的博客，不用着急读第三遍。</p>\r\n							<p>　　<strong>第三遍</strong></p>\r\n							<p>　　通常如果你认认真真地读完第二遍后，你可以先放一放。人的大脑还是需要一些时间来慢慢消化的，哪怕是潜意识的，况且，短时间内连续读好几遍确实会让人感觉厌烦。这样<strong>过了一段时间后（比如去看看一些其它书啊等等），你再开始读第三遍，相信这个时候你很感觉很轻松</strong>（人往往对熟悉的知识有一种愉悦感），这个时候你不仅仅巩固了你之前的知识，甚至有可能还会让你产生新的想法，比如当你把操作系统的理论知识都掌握得差不多时，你可能会好奇它究竟是怎么工作的，你会产生想要去读内核源码的冲动。当然这就进入另一种境界啦！（当你研究过源码再来看操作系统的理论书籍时，你甚至都能知道哪些书写得好哪些书写得渣了呢！\\(^o^)/~）。</p>\r\n							<p>　　最后，我还是想说，哪怕对于这些理论性很强的书，<strong>要想真正得理解它们，还需要动手实践</strong>，比如学操作系统的可以试着去看源码，学编译原理的可以试着自己做一个小型编译器，学网络原理的可以自己去搭建网络环境来加深对网络的理解等等。</p>\r\n							<p>　　借用陆游的名句：<strong>纸上得来终觉浅，绝知此事要躬行！</strong></p>\r\n							<p>　　当然，以上只是我个人对看书的一些想法，也不一定对。每个人都有适合自己的方法。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n		</div>', '5', '2019-12-31 00:06:15', '2019-12-31 00:06:15', '1001', '0', '1', '1');
INSERT INTO `article` VALUES ('1009', '你解决的问题比你编写的代码更重要！', '无论从那时起编程的路径如何，业务和软件开发之间的分离仍然存在问题 - 或者是第一次召开会议时的“工程”。如果开发人员过于专注于开发，他们可能会错过他们编写的软件背后的目的。他们可能看不到不需要任何代码的隐藏解决方案。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　<strong>英文原文：</strong> <a href=\"https://levelup.gitconnected.com/the-problem-you-solve-is-more-important-than-the-code-you-write-d0e5493132c6\"\r\n								 target=\"_blank\">The problem you solve is more important than the code you write.</a></p>\r\n							<p>　　译/_小生_</p>\r\n							<h3>　　软件的目的有时会被遗忘<img width=\"600\" height=\"257\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"\" src=\"https://p0.ssl.qhimg.com/t011098530ff688687f.jpg\"></h3>\r\n							<p>　　程序员似乎忘记了软件的真正目的，那就是解决现实问题。</p>\r\n							<p>　　50年前，在1968年，由北约科学委员会主办的<a href=\"http://homepages.cs.ncl.ac.uk/brian.randell/NATO/NATOReports/\">软件工程工作会议召开</a>。那时，人们开始注意到软件正在成为社会的基本组成部分。然而，它也变得难以理解。在那次会议之后，编程开始成为一个新的行业。它开始摆脱商界人士的控制。</p>\r\n							<p>　　无论从那时起编程的路径如何，业务和软件开发之间的分离仍然存在问题 -\r\n								或者是第一次召开会议时的“工程”。如果开发人员过于专注于开发，他们可能会错过他们编写的软件背后的目的。他们可能看不到不需要任何代码的隐藏解决方案。</p>\r\n							<p>　　这里有一个例子。</p>\r\n							<p>　　有一家初创公司正在建造一种设备，允许一个人使用蓝牙解锁他们家的门。与设备通信的可视界面是一个小部件，即使手机被锁定也可见。它只有一个名为“打开门”的按钮。</p>\r\n							<p>　　当用户靠近房子时，他们会抓住手机，找到小部件，然后单击按钮打开。</p>\r\n							<p>　　有人看着那个工作流程并问：</p>\r\n							<blockquote>\r\n								<p>如果我们使用蓝牙，我们的商业模式接受任何拥有手机的人都可以进入房子，为什么我们需要让某人拿起手机并按下按钮？当检测到设备靠近1米时，我们允许门解锁。这样我们就不需要为设计和编写可视化界面付出代价了！</p>\r\n							</blockquote>\r\n							<p>　　蓝牙故事是狭隘焦点的一个很好的例子：目标是以最小的努力解锁门。如果传感器是无线的，那么设计可视界面是没有意义的。</p>\r\n							<p>　　如果您了解业务正在尝试实现的目标以及对用户的价值，您可以将这些知识与您对该技术可能性的了解相结合。只有这样，您才能获得足够的信息以获得更好的答案，并得出结论。</p>\r\n							<p>　　这是如何解决编程问题的一个很好的例子，而<a href=\"https://medium.freecodecamp.org/code-that-dont-exist-is-the-code-you-don-t-need-to-debug-88985ed9604\">不必编写除解锁功能代码</a>之外的任何其他代码。然而，就像<a\r\n								 href=\"https://levelup.gitconnected.com/how-to-use-technical-debt-in-your-favor-98bae475ba68\">技术债务一样</a>，没有什么可以作为在其余部分编写垃圾代码的借口。</p>\r\n							<blockquote>\r\n								<p>并非每个代码都是有价值的</p>\r\n							</blockquote>\r\n							<p>　　有时，严重bug的修复可能不是优先事项。如果您是加密交换，并且您的系统允许<a href=\"https://medium.com/@fagnerbrack/the-day-a-bug-was-fixed-only-because-the-ceo-called-in-f653a34079eb\">重复存款</a>一次，那么如果解决问题的成本很高，人工干预可能是最佳的成本效益解决方案。</p>\r\n							<p>　　严重性和优先级之间的这种权衡让我想起了<a href=\"https://www.facebook.com/gazza\">一位同事</a>最近向我展示的模型。它被称为优先级矩阵，这是一种<a href=\"https://medium.com/@fagnerbrack/you-cant-call-yourself-an-explorer-without-a-map-4e19ce51daa3\">二维模型</a>，可用于根据错误影响的用户数量和严重程度确定错误的优先级。<img\r\n								 width=\"494\" height=\"484\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://p0.ssl.qhimg.com/t011b4ebd4f7e91a4cf.png\"></p>\r\n							<p>　　前面描述的单个重复存款问题属于影响<strong>一个用户</strong>的<strong>不便</strong>类别。因此，优先3。</p>\r\n							<blockquote>\r\n								<p>并非每个bug都值得修复</p>\r\n							</blockquote>\r\n							<p>　　作为开发人员，尝试为所有内容编写脚本是很常见的。但是，一些可重复的任务可能不值得自动化。</p>\r\n							<p>　　复杂逻辑的封装和有用知识的抽象之间存在差异。有时，信息应该明确，以便易于理解。如果你抽象它们，它们会产生相反的效果并且更难理解。</p>\r\n							<p>　　在CLI中使用某些类型的低级命令比抽象知识的高级命令（<a href=\"https://medium.com/@fagnerbrack/it-doesnt-matter-how-fast-you-write-code-2e09b42bfff0\">如Git别名</a>.）更有用。</p>\r\n							<blockquote>\r\n								<p>并非每个命令都值得编写脚本</p>\r\n							</blockquote>\r\n							<p>　　几年前，我使用<a href=\"https://levelup.gitconnected.com/code-less-think-more-incrementally-98adee22df9b\">Incremental\r\n									Delivery</a>进行了一个项目。这是一个身份验证系统，要求用户提交一些个人数据以供第三方提供商验证。</p>\r\n							<p>　　团队想要建立这种奇特的现场验证功能。然而，随着截止日期变得越来越近，验证在每个sprint规划中被排除优先级。最后，该团队发现，首先存在的花式验证没有任何意义。</p>\r\n							<p>　　原因如下：验证是强制性的！</p>\r\n							<p>　　提供有效信息符合用户的利益。如果用户提供了错误的数据，则不会对其进行验证，也无法使用该系统。此外，大多数浏览器都支持足够好的标准HTML验证。</p>\r\n							<p>　　在最糟糕的情况下，无法验证自己的用户会调用支持手动验证。</p>\r\n							<blockquote>\r\n								<p>并非每个功能都值得编码</p>\r\n							</blockquote>\r\n							<p>　　作为开发人员，如果您了解了您尝试解决的问题，那么您将能够提供更好的代码，有时甚至根本没有代码。您不是为在屏幕上书写字符而付费的 <a href=\"https://www.urbandictionary.com/define.php?term=code%20monkey\">Code\r\n									Monkey</a>。你是一个专业的解决问题的人。</p>\r\n							<p>　　您编写的代码的目的是为了创造价值并使现有世界变得更美好，而不是满足您对自我世界应该是什么的以自我为中心的观点。</p>\r\n							<p>　　有人说：“如果你拥有的只是一把锤子，那么一切看起来都像钉子一样。”</p>\r\n							<p>　　最好先钉一个钉子，以便你可以考虑锤子的需要。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n			\r\n		</div>', '0', '2019-12-31 00:08:33', '2019-12-31 00:08:33', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1010', '程序员，为什么千万不要重写代码？', '程序员都有一颗工程师的心，所以当他们到一片新的场地想做的第一件事就是，将旧的一切推倒重来。是的，他们决不会满足于简单的增量劳动。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　程序员都有一颗工程师的心，所以当他们到一片新的场地想做的第一件事就是，将旧的一切推倒重来。是的，他们决不会满足于简单的增量劳动。</p>\r\n							<p>　　或许这种微妙的心理定位可以解释：为什么程序员进入新项目组后宁愿丢掉旧代码重新写，也不愿意修修补补。他们认为旧代码简直一团糟。</p>\r\n							<p>　　但是，事实上真是这样吗？你之所以认为旧代码一团糟，其实是由编程的一个基本定律决定的，那就是：写代码容易，读代码难。</p>\r\n							<h3>　　为什么你觉得旧代码异常混乱？因为读代码更难。</h3>\r\n							<p>　　这大概就是代码Reuse难以实现的原因。 这就是你组里的每个人都喜欢用不同的功能将分割的字符串转换成一个数组。比起猜测旧的功能是怎样实现的，重新写一个自己的功能要简单和有趣多了。</p>\r\n							<p>　　作为这个公理的推论，你可以问问身边的程序员他们正在奋战的代码怎么样？「简直是一塌糊涂！」他们肯定会这样说。「我简直想推倒重来！」</p>\r\n							<p>　　为什么认为代码这么糟糕呢？「额，看看这个功能，竟然有两页长！完全不知道这些东西为什么在这里！完全不知道这些API是干什么的。」他们会这样回答你。</p>\r\n							<p>　　曾经，Borland的创始人 Philippe Kahn 当初就是向记者们吹嘘：Quattro Pro会比Microsoft Excel要好用得多，因为它是从头开始编写的，全部都是新的源代码！</p>\r\n							<p>　　但是，认为新代码比旧代码好简直就是荒谬。旧代码是已经运行过的，测试过的。无数的bug在被发现前都上线运行过，发现之后程序员们可能在花了好些日子才修复了这些bug。这种修复可能是一行代码，也可能是几个字符，无数的时间和精力都花在了这些bug修复上。</p>\r\n							<p>　　当你决定抛弃这些旧代码从零开始的时候，你也丢掉全部前任努力的结果。</p>\r\n							<h3>　　新代码一定比旧代码好？NO，重写可能会带来更大的风险。</h3>\r\n							<p>　　对技术领导者来说，重写项目的代码也是一个异常艰难的决定。因为从公司层面说，重现代码甚至会威胁产品的市场竞争力。一旦决定重写代码，那么与竞品相比，你可能落后了2~3年——在软件行业，这时间可够长的。</p>\r\n							<p>　　你理想中的新代码会带来产品功能的提升▼<img width=\"604\" height=\"348\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"\" src=\"https://images0.cnblogs.com/news/145819/201507/271946073441303.jpg\"></p>\r\n							<p>　　但事实上，即便重写的新代码可以实现旧代码的所有功能和需求，但是为产品带来的市场竞争力只有边际提升。因为重写用的新技术、新语言、新框架并没有给产品带来质的飞跃。</p>\r\n							<p>　　更不用说在重写的漫长过程中可能会遇到一些意外情况，比如：</p>\r\n							<p>　　1、缺钱：资金链的断裂<img width=\"611\" height=\"352\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\"\r\n								 src=\"https://images0.cnblogs.com/news/145819/201507/271946076729204.jpg\"></p>\r\n							<p>　　2、缺人：核心程序员离职</p>\r\n							<p>　　最终导致效果不佳：达不到原产品应有的所有功能和需求，白白浪费了时间和金钱，也丢掉了市场竞争力。<img width=\"575\" height=\"306\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201606/1-20160623192203344-1808521243.jpg\"></p>\r\n							<p>　　所以重写代码意味着，你在把自己置身于非常危险的境地，可能几年后你也写不出比以前更好的代码。你只是花了一大笔钱把已经存在的代码又写了一遍。</p>\r\n							<h3>　　当你觉得眼前的旧代码很烂时，该怎么办？</h3>\r\n							<p>　　你觉得旧代码写的很烂，那又怎样呢？它们已经上线，已经在实际运行中经受住了考验。所以当你发现前任留下的代码乱七八糟的时候，不妨冷静下来，从以下三个方面入手理解代码、改善代码：</p>\r\n							<h4>　　1、代码的结构有问题</h4>\r\n							<p>　　如果一段网络代码突然弹出了自己的对话框，应该是UI代码需要被处理。这些问题可以被解决掉，你要一次次小心地移动代码，重构，改变接口。还需要一位细心的工程师立马仔细地检查这些改变是否有问题，从而不打扰到其他人。事实上，甚至比较大的结构变化也可以不扔掉代码来完成。</p>\r\n							<p>　　大牛程序员Joel\r\n								Spolsky回忆说，曾经在某个项目中，他和他的团队花了好几个月重新架构在一点上：把代码动来动去、清理、创建有意义的基类，并创建了模块之间的完美接口。但是他们始终非常小心翼翼，并没有产生新的bug、也没有丢掉任何旧代码。</p>\r\n							<h4>　　2、代码的效率不高</h4>\r\n							<p>　　曾经，Netscape的渲染代码被传非常缓慢。但事实上，这只会影响该项目的一小部分，这部分是你可以优化甚至重写的。你完全不必重写全部代码。优化速度的1％工作量，会让你获得99％的爆炸性提高。</p>\r\n							<h4>　　3、代码写得很丑</h4>\r\n							<p>　　有些代码真的写的很丑，比如Joel曾参与一个项目，开始用下划线做开始的成员变量约定，但后来改用更标准的「M_」。所以一半的功能用「_」开始，一半用「M」开始，这看起来真的很丑陋。但这个问题5分钟就能解决，而不用从头开始写全部的代码。</p>\r\n							<p>　　最后，你要记住，从头开始再写一遍并不意味着你会写出比以前更好的代码。因为你没有参与到上一个版本的创建，所以你其实根本就不算有经验。一旦你准备推倒重写，你可能会再犯一遍版本一犯过的错，甚至会产生更多的新问题。</p>\r\n							<h3>　　面对糟糕的旧代码，Keep Calm &amp; Carry On !</h3>\r\n							<p>　　在大型商业项目中，推倒重来是非常危险的行为。当然，如果你是在做实验，想到新算法可以随时重写。</p>\r\n							<p>　　如果你跳槽、或刚接手一个新项目，面对看上去异常混乱的旧代码，请冷静下来，忍住推倒重写的冲动，想想上面这些经验之谈。</p>\r\n							<p>　　<strong>参考资料：</strong><br>　　Joel Spolsky <a href=\"http://www.joelonsoftware.com\">www.joelonsoftware.com</a><br>　　Jeremy\r\n								Burton vibratingmelon.com</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n			\r\n		</div>', '0', '2019-12-31 00:10:45', '2019-12-31 00:10:45', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1011', '开发人员的客户思维', '工程师日以继夜，终于在约定的时间里交付产品——虽然这在产品经理看来可能还只能算个高保真的原型。产品经理体验了这个原型之后，发现一些与期待不符的地方，提出了改进意见。工程师带着泛起充满自信的笑容，再次进入了封闭的开发阶段。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　都说产品与开发之间的矛盾由来已久。在很多互联网企业，都发生过类似这样的一幕：</p>\r\n							<p>　　工程师日以继夜，终于在约定的时间里交付产品——虽然这在产品经理看来可能还只能算个高保真的原型。产品经理体验了这个原型之后，发现一些与期待不符的地方，提出了改进意见。工程师带着泛起充满自信的笑容，再次进入了封闭的开发阶段。</p>\r\n							<p><img width=\"601\" height=\"531\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/programmers-and-users.jpg\"></p>\r\n							<p>　　类似这样的过程持续往复下去，开发工程师和产品经理对对方的耐心都会受到挑战：</p>\r\n							<p><strong>　　产品</strong>：新的方案也就是改了一种排列方式，数据都是一样的，再花点时间不就能搞定了么？</p>\r\n							<p><strong>　　开发</strong>：你知道上次那个推荐算法，我花了多久才做出来的么？你说改就改？</p>\r\n							<p><strong>　　产品</strong>：可我已经跟老板回复了，说咱们三天就能搞定！</p>\r\n							<p><strong>　　开发</strong>：……</p>\r\n							<p>　　在互联网企业里，开发人员作为产品的直接生产者，地位受到优待；工程师作为“创客”所具有的自豪感及自信心也理所应当。直到随着项目的持续，业务越来越复杂，工程师终于不能在期待的时间里顺利交付功能，即使加班加点已在不知不觉中成为习惯。</p>\r\n							<h3>　　开发人员与客户思维</h3>\r\n							<p>　　在大量的团队里，大家表面看似春意盎然、合作愉快，实际却危机四伏。问题的原因可能很复杂，而从开发人员的角度来说，一个很重要的因素在于开发人员普遍缺乏客户思维。</p>\r\n							<p><a href=\"https://images0.cnblogs.com/download_fail.png\"><img width=\"588\" height=\"330\" class=\"aligncenter size-full wp-image-2916\"\r\n									 style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"2-mind\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/2-mind.jpg\"></a></p>\r\n							<p>　　这样的开发人员也能交付能够工作的产品，但从产品设计人员的角度来说，要么他们交付的产品在细节上与需求有较大出入（或多或少，或错），要么就是花费了大量时间，却没人知道他们在做什么，也无法估计一项需求到底需要多久才能开发完成。</p>\r\n							<p>　　开发人员大多有相似的特性，他们擅长解决问题，却不擅长与人沟通。甚至一些人还有“技术至上”的自负心理，认为测试人员和业务分析师等其他角色可有可无。这或许与他们理工科的成长背景有一定的关系。“因为、所以、得证”\r\n								这是数学里常见的论证步骤，理工科的同学们擅长运用已有命题推理出一个个新的命题，这一特点在软件开发人员这里有着很好的体现。那些曾在算法练习中用过的代码片断就像一段段积木，当产品设计人员提出一个想法，开发人员就心生一计：这事儿没问题！似乎，接下来就缺时间了。</p>\r\n							<p><a href=\"https://images0.cnblogs.com/download_fail.png\"><img width=\"586\" height=\"329\" class=\"aligncenter size-full wp-image-2920\"\r\n									 style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"3-need-more-time\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/3-need-more-time.jpeg\"></a></p>\r\n							<p>　　事实却不会那么简单。一个需求的提出，必然有其商业上的考量，其所在的业务场景、适用的范围和限制，以及要实现的可度量目标。在实现过程中，还需要考虑不同的解决方案，各个方案中可能存在的风险，以及需要投入的成本。在团队中，只有所有人都对业务有一致的理解，所有的努力都朝着一致的方向，才有可能获得成功。</p>\r\n							<p>　　有客户思维的开发人员，能够把工作当作为客户提供服务：自己是服务提供方，而同事、老板就是客户。他们积极地从客户角度思考需求的真正来源，在开发过程中与客户保持沟通，适时给出合理的建议。最终在更高效完成工作的同时，建立更顺畅的协作机制，培养出更健康友好的团队关系。客户思维也能够培养开发人员转变视角的习惯和能力，令其习惯于分析价值并作出决策，既而为职业和事业的发展带来更多可能。</p>\r\n							<h3>　　思考并沟通</h3>\r\n							<p>　　当接到一个新的需求，无论是初次提及，还是后续反馈，首先要思考的是为什么会有这个需求产生，它解决了什么问题、提供了什么价值。虽然开发人员很聪明，却很容易忽略这样一个其实很简单的部分。大部分开发人员的思维方式真的就如同数学证明那样，习惯于接受指令并醉心于实现一些看起来很酷的功能。</p>\r\n							<p><img width=\"622\" height=\"828\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/4-cool-768x1024.jpg\"></p>\r\n							<p>　　然而，如果一开始不弄清楚需求的前因后果，就会出现在做了一半、甚至完成了之后，才发现最终得到了一个与设计人员的期待并不符合的产品。其他情况，由于开发团队内部理解不一致导致接口不兼容、由于前期没有沟通清楚而导致返工浪费等情况更是数不胜数。</p>\r\n							<p><strong>　　举一个实际发生过的例子。</strong></p>\r\n							<p>　　作为一个基于浏览器来管理的电商网站运营方，产品经理希望管理员能够在浏览器中即时收到网站用户下的新订单，而不再需要隔一段时间去刷新浏览器，以便做好发货准备。</p>\r\n							<p>　　在拿到这样的需求之后，工程师很兴奋。他开始着手研究服务器推送的各种技术，并深陷其中不可自拔，学习了长轮循、WebSocket等技术。三天过去了，他终于成功地完成了相关开发工作，急切地找产品经理要演示其进展。可没想到，产品经理却并不买账，没等工程师演示，就黑着脸向他回复，“这三天里，我两次向你询问进展，你都说‘快了’。可我一直没见什么动静。后来，我已经请旁边的阿哲搞定了，他只花了一小时！”<img\r\n								 width=\"548\" height=\"378\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/5-what-700x483.jpg\"></p>\r\n							<p>　　工程师转向阿哲，却发现阿哲用了一个每隔5秒向服务器再取一次数据的“笨方法”。工程师感到委屈不已，向产品经理解释自己的方案比阿哲的方案更有效率，也更先进……</p>\r\n							<p>　　在这个例子里，工程师自认为的高效和先进似乎并不是产品经理所关心的。产品经理作为功能设计者，自然更关心其功能价值，而不是技术方法是否先进。另外，对需求里的“即时收到新订单消息”里“即时”的理解，工程师一开始就将自己的臆测加了进去。</p>\r\n							<p>　　不妨考虑一下，需求的价值是使管理员更早知道新订单到来，但这个“即时性”要求有多高呢？显然没有达到秒级，大概，分钟级也是能接受的——毕竟之前管理员是手动刷新浏览器去完成这个需求的，这说明新订单并没有频繁到需要秒级通知。因此，不管是工程师提前想到了这个结论，还是与产品经理及时沟通了自己的技术方案计划，都可以提早防止浪费。</p>\r\n							<p><img width=\"558\" height=\"277\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/6-work-place-700x348.jpg\"></p>\r\n							<p>　　在工作中，如果只将产品经理视为规则制定者，将领导视为发号施令的老板，我们便会失去思考的机会。逐渐地，思考的能力也将失去。但如果将他们视为客户，那么就更容易理解客户与我们之间可能存在的误解，毕竟大家术业有专攻。这时，不少人便会考虑客户可能的隐藏的想法，耐心地沟通核对，态度也端正友好。</p>\r\n							<h3>　　灵活地给出建议</h3>\r\n							<p>　　对于一家IT公司来说，开发人员是当之无愧的宝贝，各企业为了招来优秀的工程师，都不惜重金。他们是那么的天才，似乎什么问题到了他们那儿都有解决方案。是的，其实一个用技术能够解决的问题，往往都有很多种解决方案，有些方案甚至不涉及技术。在拥有天才一面的同时，开发人员也相当的耿直，有时候甚至过于耿直，过早地将精力集中到技术方案上，而这时的方案往往还只是开发人员一厢情愿的期盼，不一定是客观上合适的方案。令人不安的是，与这些技术人员合作的业务分析人员和管理人员却没有办法预测或是验证其中的风险。</p>\r\n							<p><a href=\"https://images0.cnblogs.com/download_fail.png\"><img width=\"536\" height=\"536\" class=\"aligncenter size-full wp-image-2921\"\r\n									 style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"7-work\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/7-work.jpg\"></a></p>\r\n							<p>　　在手机支付的概念在技术圈风声水起时，有人正对“刷手机乘公交”的想法感到兴奋，在一边走一边与朋友分享的时候，正好有公交车到站。只见朋友伸出手机在刷卡机边轻轻一滑，“嘀”的一声，刷卡成功！他好奇地问朋友，你是怎么做到的？朋友淡定地翻开手机盖，从中缓缓抽出一张公交卡。</p>\r\n							<p>　　虽然这只是一个笑话，但现实中类似的情形却在真实的发生着，就像上一节中提到的例子一样。\r\n								如果开发人员拥有客户思维，就应该在真正行动之前，考虑多个可能的方案、权衡其中的优劣，及时向客户阐明这些方案的利弊；根据对需求的理解，以及客户提供的更多信息，给出具有可操作性的建议。对于一些经验丰富的开发人员来说，给出有价值的建议早就成为了他们的工作习惯，这也正是能体现他们更具专业性的行为之一。</p>\r\n							<p><strong>　　不过，对于老油条们来说，也需要警惕：请注意保持对客户的尊重。</strong>作为客户，他们有时候显得不太专业，甚至不太友好。但开发人员，请一定尊重自己的客户。客户的最终目的是解决问题，而解决方案不一定要花哨炫酷，或是技术先进——开发人员应该在合适的时机，让客户知道他们可以做出选择，而不是由开发人员自行决定。即使开发人员自己有什么偏好，也不应该直接或间接地强加于客户，那样只会画蛇添足、招致反感。</p>\r\n							<p>　　《软技能》一书中指出了一个事实，虽然听起来有点残酷：当我们为了谋生而一头扎进代码的世界里时，其实与小时候老家镇上铁匠铺里的铁匠并没有什么区别。那样的我们，不用考虑顾客为何需要打造一件那么奇形怪状的铁器；在顾客一而再地提出挑剔意见时，我们一开始争辩，后来丧气，最后麻木了。那样的我们，数十年如一日，作为铁匠的技艺愈加纯熟。直到有一天，一种叫做“铸造机床”的远在天边的东西，夺去了我们的饭碗。</p>\r\n							<p><img width=\"542\" height=\"360\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"http://insights.thoughtworkers.org/wp-content/uploads/2016/12/8-mechanic-700x465.jpg\"></p>\r\n							<p>　　如果养成了思考的习惯，拥有为客户提供专业服务的能力，随时都能换个地方另起炉灶。实际上，企业的价值正是体现在它为客户解决的问题上。习惯将工作视作服务客户，把自己当作一个企业去思考，也就具有更独立的人格，为今后真正做出良好的商业决策积累经验、奠定基础。\r\n								一旦拥有了这样的心态，开发人员也就不会只关注完成手头的工作，还知道要计划接下来的职业发展，关注自己和同事的成长；也不会因为觉得作为开发人员去帮老板实现梦想没有意义而烦燥不安。很快，开发人员这种聪明的人种就会成为有思路、有规划的进步青年。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n		</div>', '0', '2019-12-31 00:17:05', '2019-12-31 00:17:05', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1012', '一个程序员的理想主义', '我反正是这么想的，不做管理前，我向技术总监或者部门经理汇报，做管理吧，我就成了汇报中枢了。和人打交道这件事，还是挺复杂的、挺耗时的，我还是省省时间改进代码吧。但毕竟每个人有自己不同的追求，我觉得有能力和爱好的人还是应该尝试管理口的，毕竟管理口的晋升路更宽，有更大的权力，才能做更大的事。像我这种喜欢新事物、喜欢开源、喜欢分享技术的程序员，还是继续搞技术才能让我内心踏实。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<div>\r\n								<p>　　我是一个程序员，也是一个理想主义者。</p>\r\n								<p>　　作为一个五年多的从业者，我回想起当初跨入这一行的初衷，是因为这里是理想主义者的净土。</p>\r\n								<p>　　2011年 iPhone 蓄势待发准备横扫全球，AppStore 开始造富，让我们这些非计算机专业的穷学生，都开始转入 App 行业酌一杯羹。AppStore\r\n									给了全球的开发者一个平台，在这个平台上，人人平等，你不用贿赂巴结苹果的工作人员，也可以常年在榜单上占据一席之地，只要你的软件足够好。</p>\r\n								<p>　　后来走入社会的我，靠着自学的技术，在北京的一家IT公司找了一份不错的工作。毕竟不是科班出身，敬畏心很强的我从工作后一直不敢放松，一直学到今天还在不断学习新的知识。因为在程序员这一行，归根结底看的还是工作能力。也许你内向、沉默寡言，也许你人缘超好、很会维系同事关系，也许你脾气很坏，经常跟产品经理吵架，注意，这都无所谓，只要你的技术是公司无法替代的，公司不会亏待你。</p>\r\n								<p>　　虽然现实情况并没有我说的这么好，比如在我的老东家工作，程序员还是没有商务部门的人强势，甚至会被HR部门压一头，单相对于其它行业，已经强很多了吧，反正我没干过拿报纸、端茶倒水这些伺候人的活。</p>\r\n								<p>　　工作几年后，大部分人都会面临一个现实问题，“要不要转做管理？”</p>\r\n								<p>　　我反正是这么想的，不做管理前，我向技术总监或者部门经理汇报，做管理吧，我就成了汇报中枢了。和人打交道这件事，还是挺复杂的、挺耗时的，我还是省省时间改进代码吧。但毕竟每个人有自己不同的追求，我觉得有能力和爱好的人还是应该尝试管理口的，毕竟管理口的晋升路更宽，有更大的权力，才能做更大的事。像我这种喜欢新事物、喜欢开源、喜欢分享技术的程序员，还是继续搞技术才能让我内心踏实。</p>\r\n								<p>　　我有一些做技术的朋友，小时候崇拜盖茨，工作后推崇老乔，结果他创业做了自己的老板。我觉得他们就不是真的喜欢编程这件工作，因为苹果的技术牛是 Steve Wozniak\r\n									呀。如果轻视技术（设计也是技术），苹果是不会有今天的成就的。当然这句话也可以套用给\r\n									Google、脸书等一大票硅谷的技术公司。所以如果选择了技术这条路，即使你觉得自己站到了巅峰，也会发现巅峰之上原来还有高山，我们要做的，只有相信技术，精益求精。</p>\r\n								<p>　　虽然我是理想主义程序员，但我也是物质的，只是我对单纯的物质没有兴趣罢了。这要怎么理解呢？我举几个例子：比如我会希望自己的 App\r\n									大卖，挣很多钱，但我不会去买彩票，虽然概率差不多（哈哈哈），因为对我来说，大卖的意义要高于挣了很多钱，我更希望去做点什么事，然后顺便挣了点钱糊口。</p>\r\n								<p>　　再比如我也想写技术书籍，把我积累的经验和知识分享给初学者，顺便挣点钱糊口（理想要和物质结合），但我不会去做代购，虽然后者门槛更低挣的更多。因为我只是想做点事，不是单纯地想挣钱，当然代购的人也可以说他们想让国人用到国外的好商品，顺便挣点钱（哈哈哈）。</p>\r\n								<p>　　我们这些八零后成长的三十多年，是我们这个国家和社会疯狂造富的三十多年，我们身边的很多人，可能连高中都没有读，却能在我们大学毕业的时候，就买了车甚至买了房。这不是教育制度的错，而是社会体制和法制的不完善给了“聪明的人”更多的机会。我不聪明，但我也不仇富，他们用辛苦的劳动和过人的智慧积累的财富，我表示尊敬，但我并不想跟他们一样聪明。我挣的不多，但工作很开心，因为我知道，一个人想把自己喜欢的事情变成工作，真的很难。</p>\r\n								<p>　　但即使有这些理由，我们也要面对亲人朋友甚至爱人的质疑，“你写代码能写多久？”</p>\r\n								<p>　　好沉重的一个话题，我也看过其他文章中说国外50多岁的老技术，两天可以完成普通程序员两周才能完成的工作；也看到过国外某些技术公司对待老技术这么好那么好的文章，但是，我们毕竟不在国外。</p>\r\n								<p>　　不在国外我们能写一辈子代码么？我还年轻我无法回答，国内可能还没有在民企做这行，且在这行退休的前辈吧。所以我要立个flag，如果我退休时候还在写代码，我会回来告诉你们答案的。</p>\r\n							</div>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n			\r\n		</div>', '0', '2019-12-31 00:14:49', '2019-12-31 00:14:49', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1013', '为什么你应该（从现在开始就）写博客', '能够交到很多志同道合的朋友。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p style=\"text-align: center;\"><img width=\"400\" height=\"268\" alt=\"\" src=\"https://images0.cnblogs.com/kb/1/201503/171730073134183.jpg\"></p>\r\n							<p>　　原文发布于2009年2月15日</p>\r\n							<p><strong>　　（一）为什么你应该（从现在开始就）写博客</strong></p>\r\n							<p>　　用一句话来说就是，<strong>写一个博客有很多好处，却没有任何明显的坏处</strong>。（阿灵顿的情况属于例外，而非常态，就像不能拿抽烟活到一百岁的英国老太太的个例来反驳抽烟对健康的极大损伤一样）</p>\r\n							<p>　　让我说得更明确一点：<strong>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处</strong>。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。</p>\r\n							<p>　　下面是我个人认为写一个长期的<strong>价值博客</strong>的最大的几点好处：</p>\r\n							<p>　　1)&nbsp;<strong>能够交到很多志同道合的朋友</strong>。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，<strong>因此，和他们即便不打照面，也是心照不宣</strong>。即便素未谋面也能坐下来就聊得热火朝天。</p>\r\n							<p>　　为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，<strong>第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离</strong>，而传统的建立朋友圈子的方法则受到地域限制。<strong>第二</strong>，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“<strong>一次表达，无数次阅读</strong>”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，<strong>用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”</strong>。</p>\r\n							<p>　　<a href=\"http://mindhacks.cn/former-life-of-mindhacks/\">我曾在CSDN上写了近六年的博客</a>，在一年半前建立了一个Google Groups（<a\r\n								 href=\"https://groups.google.com/group/pongba\">TopLanguage</a>），由于我的博客的长期阅读者都是互相有共同语言的，因此这个Group一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个Group的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。</p>\r\n							<p>　　2)<strong>&nbsp;书写是为了更好的思考</strong>。我在<a href=\"http://mindhacks.cn/2009/02/09/writing-is-better-thinking/\">《书写是为了更好的思考》</a>里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀，是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。</p>\r\n							<p>　　3)&nbsp;<strong>“教”是最好的“学”</strong>。<a href=\"https://groups.google.com/group/pongba/browse_frm/thread/6f6140744ab95c72/\"><strong>如果一件事情你不能讲清楚，十有八九你还没有完全理解</strong></a>。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>\r\n							<p>　　为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、<strong>但不知道自己知道</strong>的潜在概念或假设（assumptions）都挖出来，把它们从<a\r\n								 href=\"http://en.wikipedia.org/wiki/Implicit_memory\">内隐记忆</a>拉扯到<a href=\"http://en.wikipedia.org/wiki/Explicit_memory\">外显记忆</a>中。因为只有完全知道、<strong>并知道自己知道</strong>一切来龙去脉的人，才能真正把一件事情讲得<a\r\n								 href=\"http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/\">通通透透</a>。</p>\r\n							<p>　　但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。</p>\r\n							<p>　　TopLanguage上的一位朋友<a href=\"http://sunxiunan.com/\">sagasw</a>曾经讲了这样一个小故事：<strong>据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了</strong>。当然，你不一定要对小熊说，你可以在大脑中虚构一个听众，一个不懂行的听众，然后你说给他听。这是可行的，我经常在路上用。不过如果你能坐下来，我建议你还是说给实际的听众听——即写下你的思考，因为<a\r\n								 href=\"http://mindhacks.cn/2009/02/09/writing-is-better-thinking/\">书写是更好的思考</a>。</p>\r\n							<p>　　我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），<a href=\"http://www.douban.com/subject/1005576/\">我们平时所作的推理过程很大部分都是自动的</a>，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“<strong>反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事</strong>”，对此<strong>你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？</strong></p>\r\n							<p>　　我自己则是非常<strong>珍惜类似这样的机会</strong>，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候<strong>往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候</strong>。另一方面，“<strong>我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题</strong>”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。</p>\r\n							<p>　　为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但<strong>如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会</strong>。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“<strong>反正</strong>”这个词了。</p>\r\n							<p>　　于是，反思的机会就来了。</p>\r\n							<p><strong>　　一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。</strong>很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却<strong>不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢</strong>？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）</p>\r\n							<p>　　绝大多数时候其实我们都会<a href=\"http://www.douban.com/subject/1005576/\">不假思索地得出一些结论，就像上了发条的自动机</a>，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是<a\r\n								 href=\"http://www.douban.com/subject/1005576/\">思维捷径</a>。</p>\r\n							<p><strong>　　去教一个完全不懂的人，则是一种最最强大和彻底的反思途径</strong>——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。<strong>这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻</strong>。</p>\r\n							<p>　　4)&nbsp;<strong>讨论是绝佳的反思</strong>。另一方面，<strong>很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听</strong>，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，<strong>几乎总能看到与你持不同意见的人，</strong>然后你通过<strong>比较你和他的观念之间的差别</strong>，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在<strong>进一步讨论中你们就会不断地迫使对方拿出更深层次的理由</strong>，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一<strong>些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息</strong>。</p>\r\n							<p>　　5)&nbsp;<strong>激励你去持续学习和思考</strong>。如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p>\r\n							<p>　　为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。<strong>我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情</strong>。</p>\r\n							<p>　　为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。</p>\r\n							<p>　　6)&nbsp;<strong>学会持之以恒地做一件事情</strong>。很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造<a\r\n								 href=\"http://en.wikipedia.org/wiki/Flow_(psychology)\">流体验</a>的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p>\r\n							<p>　　7)&nbsp;<strong>一个长期的价值博客是一份很好的简历</strong>。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到<strong>价值博客的时代</strong>，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但<strong>至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛…\r\n									这是一个良性循环</strong>。</p>\r\n							<p><strong>　　（二）怎么做到长期写一个价值博客</strong></p>\r\n							<p>　　注意到我并没有说“怎么做到长期<strong>坚持</strong>写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。</p>\r\n							<p>　　一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。</p>\r\n							<p>　　怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：</p>\r\n							<p><strong>　　让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</strong></p>\r\n							<p>　　就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。</p>\r\n							<p>　　这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。<strong>如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？</strong></p>\r\n							<p><strong>　　（三）可能出现的问题以及怎样应付</strong></p>\r\n							<p>　　即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is\r\n								Skill”，<strong>意志力很大程度上来源于有正确的方法，而非天生</strong>。</p>\r\n							<p>　　1)&nbsp;<strong>担心别人认为没有价值</strong>。事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，<strong>无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。</strong></p>\r\n							<p>　　或者，<strong>你想通了之后觉得其实也很简单，于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力</strong>，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。</p>\r\n							<p>　　最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。</p>\r\n							<p>　　2)&nbsp;<strong>担心想法太幼稚或有漏洞等等被别人笑话</strong>。人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（<a href=\"http://mindhacks.cn/2009/02/09/writing-is-better-thinking/\">《书写是更好的思考》</a>，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。</p>\r\n							<p>　　Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：</p>\r\n							<blockquote>\r\n								<p>将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。</p>\r\n							</blockquote>\r\n							<p>　　况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。</p>\r\n							<p>　　3)&nbsp;<strong>得不到激励</strong>。这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写<strong>价值博客</strong>，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人<a\r\n								 href=\"http://en.wikipedia.org/wiki/Paul_Buchheit\">Paul Buchheit</a>，和编程界名博Coding Horror的博主Jeff\r\n								Atwood都曾经感叹过：Overnight success takes a long time （<a href=\"http://paulbuchheit.blogspot.com/2009/01/overnight-success-takes-long-time.html\">(1)</a>，<a\r\n								 href=\"http://www.codinghorror.com/blog/archives/001207.html\">(2)</a>），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。</p>\r\n							<p>　　4)&nbsp;<strong>写不出来</strong>。这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。</p>\r\n							<p>　　无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），<strong>有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟</strong>。</p>\r\n							<p><strong>　　能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多</strong>。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]</p>\r\n							<p>　　所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。</p>\r\n							<p>　　当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？</p>\r\n							<p>　　–</p>\r\n							<p>　　[1] 你可以看一下<a href=\"http://delicious.com/pongba/toplanguage\">我收藏的一些精彩主题</a>。</p>\r\n							<p>　　[2] 尽管我并不完全同意这句话本身，但它这种解决问题链上更基本环节的问题的精神是我赞同的。</p>\r\n							<p>　　[3] 《影响力2》这个名字起得很聪明，其实它并不是《影响力》的作者写的。</p>\r\n							<p>　　[4] 我忘了这则实验的出处了，但实验的精神是记忆犹新的，哪位同学记得原始出处的麻烦提醒我一下。</p>\r\n							<p>　　[5] 对于阿基米德这个故事的<a href=\"http://en.wikipedia.org/wiki/Eureka_(word)\">真实性是有争议的</a>，毕竟几千年久远的事情谁弄得清呢。但是故事的道理是很本质的，我们平时也经常有类似的体验，加上阿基米德的“尤里卡”实在太出名了，所以我相信用用无妨。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:19:04', '2019-12-31 00:19:04', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1014', '向上管理：管理自己的老板', '当我作为职场新人第一天报道时，就很好奇将要面对的是一位什么样的老板。他是一位斯文的中年人，个子不高，戴副眼镜，书生气十足，一看就是从程序员升上来的管理者。他给我指定了一个Mentor（导师）后，就很少管我，除了周会我们只是在一起吃饭时聊聊无关痛痒的事情——往往是新闻上那些无聊的八卦。给我分配什么任务我就做什么，我从来不挑工作，但也没太多主见。就这样，我唯唯诺诺地度过了职场新人的第一年。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　<strong>了解老板并构建双向关系</strong></p>\r\n							<p>　　当我作为职场新人第一天报道时，就很好奇将要面对的是一位什么样的老板。他是一位斯文的中年人，个子不高，戴副眼镜，书生气十足，一看就是从程序员升上来的管理者。他给我指定了一个Mentor（导师）后，就很少管我，除了周会我们只是在一起吃饭时聊聊无关痛痒的事情——往往是新闻上那些无聊的八卦。给我分配什么任务我就做什么，我从来不挑工作，但也没太多主见。就这样，我唯唯诺诺地度过了职场新人的第一年。</p>\r\n							<p>　　坦白地说，我的老板对我挺好，还帮我申请了公司的一个大奖。但我们除了技术和八卦外，从来没有更深入的交流。他不会问我有什么样的诉求，未来希望的发展方向是什么；而我也从不关心他工作上背负的压力，以及他究竟对我有些什么期望等。不仅如此，就连工资、奖金多一点少一点带来的心理不平衡，我也不会流露出来，更别说抗争。那时的我和大多数职场新人的想法一样，不会刻意讨好老板，也不会和老板作对，也就是“说什么我都照做就OK了”。</p>\r\n							<p>　　后来我换了家公司，是一家在业界很富名望的外企。我的新老板比我大不了几岁，他给我留下的印象是“爱玩，开一辆二手‘大切’，霸气”。他总是在给大家安排任务时和我们唠唠家常，偶尔还会在小黑屋里两人一起聊点严肃的话题。起先我并不适应，还会把自己遮得很严，不怎么敞开心扉，后来逐渐放开了些。有次他邀请我参加他的几个同事朋友的私人聚会，这令我受宠若惊又有点不安，半推半就下最终我还是出席了。大家在河边烧烤，聊着各自的家庭、生活、事业和理想。回来的路上，我看到了他野性的一面：途中有辆“马六”危险超车险些出事故，这惹恼了他，一路猛踩油门狂追，嘴上还骂骂咧咧，全然不顾他媳妇让他冷静的呼喊。狂追几百米后，那车车主被这气势吓住了，默默靠边让出车道停了下来。而他驱车靠近那车，摇下窗户狠狠瞪了车主一眼，然后扬长而去……</p>\r\n							<p>　　这次聚会后，我和这位新老板的心理距离似乎被拉近了——我重新认识了我的老板。对我来说，他的形象逐渐丰满起来，开始有血有肉。</p>\r\n							<p>　　了解老板（及其诉求）很重要。了解老板的性格特点、工作经历、家庭情况甚至是喜欢吃什么等这些小的细节，有助于你把他当成和自己一样平等的一个人去看待。这就是为什么有人在台下聊天能滔滔不绝，而一上台发言就磕磕巴巴无所适从？尽管可能面对的人群未变，但“走上台”也就意味着这种平等、亲密的关系被打破。和老板相处之道也类似，越是将老板放在高高在上的位置，如同图腾一般，你就越无法和他有正常的关系。</p>\r\n							<p>　　<strong><strong>管理双方的目标和期望</strong></strong></p>\r\n							<p>　　后来在我和老板间的One One\r\n								Talk中，我渐渐有话直说。他提出对我的期望，相应地，我也表达出对他的期望以及我的工作目标，然后试图把双方的想法加以协调。老板自然是要管理下属的期望和目标，但我的经验是：作为下属，你也需要好好管理双方的期望和目标。如果老板对你的期望和你对自己的期望有所偏差，需要及时反馈，同时也需要将你对老板的期望及时传达。这就像是谈判，老板对你施加影响，你也可以反过来对他施加合理的影响。当然，如果双方的目标差距太大，除非你更换工作岗位，否则需要以老板的目标为主——因为他是给你定岗发工资的那个人。</p>\r\n							<p>　　管理双方的期望和目标非常重要。它决定了今后的日子里你工作是否快乐。在年度Review中，我会明确告诉我的老板我不希望做的事情，比如说监控项目、把握进度等项目经理的工作，当然，紧急情况下需要我协助做是没有问题的，但前提是不希望这些内容成为我的日常工作。因为我喜爱琢磨技术胜过这些，如果让我去做，即使能做好，也会做得不开心。其实，在这种小问题上，老板一般会让步的。如果你不表达，老板也许想当然认为你比较适合某某工作，而其实你根本不喜欢，或者他为了你的前途考虑而给你分配这样的工作，那你可是哑巴吃黄连有苦说不出，只好硬着头皮做，久而久之会厌倦工作从而萌发离开的念头——如果因为这种原因离开一家公司，对大家而言是双输。</p>\r\n							<p>　　但天下没有不散的宴席。一个人离开一个团队、一家公司去寻求更好的发展也是一种必然。不要羞于说出自己的想法。以我自己举例，在第二家公司的六年间，我一共换过三个团队。要么是因为我认为在某种技术上已做到瓶颈了，再继续就是重复劳动；要么是因为公司的需要，安排我接手某个团队。总之，无论换团队还是换公司，不用藏着掖着，把你自己背后的想法和原因直截了当地跟老板沟通，很多时候会有意想不到的收获。</p>\r\n							<p>　　2008年初，我感觉自己在当时的Team中已做到最好了，再继续下去的动力不大，于是找了几家公司开始面试，最终决定去其中的一家。之后我将准备离开的想法和背后的原因直接跟老板谈了谈。当时我认为早点提出让彼此有个准备，尤其是将工作交接做得更平滑些。交谈中，直接老板看我去意已决并无太多阻拦，反而给我很多不错的建议，此外还让我谈谈对他的工作的建议。之后大老板又找我深入地谈话，这次谈话中，他帮我发现其实我想要的东西目前的公司都能提供：薪水、成长、空间。他还重点提及公司的创业文化和基因，以及我在公司中积累下的口碑和人脉。最后他让我休息几天，仔细分析利弊，做个SWOT分析后再综合考虑。而我照着做了——列了整整两页纸，最终的决定是留下来。</p>\r\n							<p>　　这种分析的思路后来对我考虑问题帮助很大，有类似问题时我还会详细地做SWOT分析，综合各种输入，想明白后再做决定。很多人跳槽仅仅为了20%~40%的涨薪，这样其实并不值。换团队或公司是为了实现个人财富（价值）的提升，而薪水仅仅是财富的一部分，还有很多其他的比如说人脉等，这些无法用薪水估量。</p>\r\n							<p>　　英语中有个短语叫“mutual\r\n								respect”，就是指相互尊重，在管理的课程中经常提到。老板和员工相互尊重的基础是相互了解、信任。作为员工，不要被动地等待这一切的发生，通过自己工作上的努力，通过敞开心扉、直截了当地沟通，去主动寻求“被尊重”。</p>\r\n							<p>　　<strong><strong>管理老板的时间</strong></strong></p>\r\n							<p>　　每个人的时间都是有限的，事情越多，可分配的时间就越少，而老板的可分配时间更是如此。我现在的老板管理跨越不同时区的几个大团队，每天忙得不是在会议室里开会，就是在去会议室的路上。当他来北京出差时，我们还常常能有一些时间聊聊；当我到总部出差时，却连见一面的机会都很少。所以作为员工，你要懂得管理老板的时间——主动地要求他们在日程表上匀出“为你服务”的时间。否则，一忙起来，他们就会把你的事忘得死死的。</p>\r\n							<p>　　我一般会主动和老板约见面的时间。频度每月至少定期聊一次，大约半小时。这听起来似乎并无特别，但想象一下对于要管理数十人团队的人，每月不计其数的会议，这点时间真称得上弥足珍贵。当提出约见如果我老板说不行，我会退让请他给出合适的频度和时间点。这里有个小技巧，《影响力》一书中提到过一种谈判技巧：先提出不那么合理、对方肯定会拒绝的方案，等拒绝后再抛出一个较为合理的方案，那么达成一致的机会要大很多。</p>\r\n							<p>　　我不仅会跟直接老板要时间，还会跟老板的老板，甚至有可能的话，跟跨两三级的老板约时间聊聊。工作中总会有各种各样的疑问，找些人聊聊会有很多意外的收获。而实际中很多工程师除非逼不得已，否则绝不会找大老板跨级聊天，他们认为这样做并不妥，有打小报告的嫌疑，或者觉得根本没有必要。其实不然，在企业中工作，要尽可能利用一切的资源帮助自己成长，让自己增值。很多人想成为更好的工程师，也有不少人想成为一名管理者，这都是很好的想法。但仅仅是坐在那儿自己琢磨或者抱着一堆书学习是远远不够的，你需要善于利用过来人的经验。不少公司会给初入职场的人分配Mentor，但这仅限于初入职场的人。其实纵观一个人的职业生涯，无论走到哪种位置，都需要Mentor或者Advisor。孔子说：三人行必有我师。何况是比自己阅历更为丰富的老板们呢？同样的一个疑问，把它抛给不同级别的老板，你会得到不同程度的见识（insight）。如果从这个角度看待问题，你还会觉得找大老板跨级聊天是件不妥的事情吗？所谓身正不怕影子斜，心里没鬼，什么时候腰板都挺得直。</p>\r\n							<p>　　<strong><strong>公开支持，私下质疑</strong></strong></p>\r\n							<p>　　谈了这么多，我想越讲越明白——老板就是一个实实在在的人，他会有正常人拥有的七情六欲，也会有正常人都会有的各种缺点。</p>\r\n							<p>　　当你跟好朋友私下在一起时会无话不说，常常毫不留情地批评对方。批评的程度越深，说明你们间的信任度越高。但在公开场合，尤其是很多不那么熟悉的朋友面前，你肯定不会毫不留情地把他的缺点暴露出来，因为那样会使对方下不来台。当好友需要支持和鼓励时，你除了会在私底下提供各种各样的支持，往往还会在公开场合对他支持，这种公开的支持和鼓励弥足珍贵，如雪中送炭，好友会非常感激。</p>\r\n							<p>　　好朋友尚且如此，其他人更不必说。所以，跟老板提意见时，最好在One One\r\n								Talk时，两人心平气和地摆事实讲道理。在外企中，直言不讳是大家比较接受的方式。所以私底下我常常会比较直接地跟自己老板说某件事该怎么做不该怎么做。你可以根据自己的实际情况处理。</p>\r\n							<p>　　当老板需要支持和鼓励时，也是同样的道理。只要你认同，那么公开场合就应该旗帜鲜明地支持他。</p>\r\n							<p>　　最后，总结一下管理老板的方法。</p>\r\n							<ol>\r\n								<li>了解老板（及其诉求）并构建双向关系。</li>\r\n								<li>管理双方的期望和目标。如果老板对你的期望有所偏差，及时反馈；同时将你对他的期望及时传达。</li>\r\n								<li>管理老板的时间。每个老板的时间都不是均匀分配给所有员工的，你可以要求定期一对一沟通，要求更多的时间和心思花在你身上。</li>\r\n								<li>公开支持与鼓励，私下质疑与建议。</li>\r\n							</ol>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:22:19', '2019-12-31 00:22:19', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1015', '单身创业的迷思', '我的目标就是利用这一个月的假期，把自己关在屋里，编写一个月的代码，把网站的基本架构搭建好，使核心部分能够正常运转，能够创造利润。 毋庸置疑，我没有实现原定目标， 但是失败的原因并不是那些典型的缺陷，例如项目计划不切实际，没有重心，等等。 不是这些原因，我失败的原因是，我只看到了那些成功的创业者们所提供的经验的表层意思，我只想去“做自己的老板”，却没有理解其内涵的真实意思。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　<strong>英文原文：</strong><a class=\"postheader taggedlink\" href=\"http://www.aaronstannard.com/post/2010/06/12/The-Myth-of-the-Single-Person-Startup.aspx\">The\r\n									Myth of the Single-Person Startup</a></p>\r\n							<p>　　2010年五月，我向公司申请了一个月的停薪留职，我计划用这整整一个月的时间去建立一个我自己的网站形式的创业公司。</p>\r\n							<p><img width=\"300\" height=\"199\" title=\"单身创业的迷思\" class=\"alignright size-medium wp-image-469 lazy \" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"单身创业的迷思\" src=\"https://images0.cnblogs.com/news/145819/201409/282246524513449.jpg\" data-original=\"http://www.vaikan.com/wordpress/wp-content/uploads/2010/07/3734982429_6bb7844bef-300x199.jpg\"></p>\r\n							<p>　　我的目标就是利用这一个月的假期，把自己关在屋里，编写一个月的代码，把网站的基本架构搭建好，使核心部分能够正常运转，能够创造利润。 毋庸置疑，<strong>我没有实现原定目标</strong>，\r\n								但是失败的原因并不是那些典型的缺陷，例如项目计划不切实际，没有重心，等等。 不是这些原因，我失败的原因是，我只看到了那些成功的创业者们所提供的经验的表层意思，我只想去“做自己的老板”，却没有理解其内涵的真实意思。</p>\r\n							<h3>　　与世隔绝不会带来成功</h3>\r\n							<p>　　我父亲是一个成功的创业者，他拥有一个自己投资的公司，事情看起来很简单。很自然，我24岁，没有更多的经验，我以为我有技术能设计出自己的产品，有正确的眼光能挖掘用户真正的需求，有稳重的商业计划，以及足够的时间/资源去市场操作，这一切都很简单。</p>\r\n							<p>　　自然的，当我最终找到了时间开始坚定不移的设计规划我的产品，我给自己设了禁闭，几乎切断了所有与外界的联系，埋头进入程序开发。毕竟，所有的成功的个人创业家们都是这么干的，不是吗？“当然是！”，我认为。</p>\r\n							<p>　　开工了两周后，我不得不删除了几乎所有的代码 – 所有的。真是场灾难。我抛弃了以前的代码，开始重新设计，重新规划整个事情，而且，我仍然没有向任何人透露一点我要做的事情。能让我坚持下去的动力是，我\r\n								现在完全靠我的积蓄过日子，所以，时间=金钱，这个大标语赫然树立在我的脑海里。我重新投入开发中，仍旧期待有所成果。</p>\r\n							<p>　　假期的最后一周，我请了公司的首席架构师吃午饭，平时在公司我跟他一起工作，我希望他看一看我的网站业务的UML图。我告诉他我要做什么业务，我想\r\n								做成什么样子，这段时间我遇到了什么困难。在这一个小时的和他的谈话里，我意识到，如果之前就跟他说了这些，也许就避免了这3个多星期每天16个小时，起 早贪黑，改来改去做的无用功，也不用受这么多挫折才学到这些知识。</p>\r\n							<blockquote>\r\n								<p>这完全是曾经经历过个人创业的那些人的“狗屁”观点，但却被你奉为圣经。尽管有很多的成功企业家最初都是自己一个人投资、一个人苦干起家的，但他们从来都没有自己封闭起来。</p>\r\n								<p>他们周围有很多同事给他们出主意，提意见；他们跟那些熟悉业务人和熟悉某个技术领域的人讨论他们的设计思想；他们在整个创业阶段都一直和他们的潜在的用户和顾客保持交流接触；他们有跟工作相关的网络联络；他们一直很好的和他们的朋友、家人保持关系。</p>\r\n							</blockquote>\r\n							<p>　　而我却在开始我的计划后忽略了一切外界联系，完全把他们给忘了。而我却把大量的时间花在了对错误的想法进行错误的设计、一遍遍的推倒重来上了。而能够避免这一切的方法是，跟那些虽然永远不可能是你的合作者、雇员、投资者的人们去一起探讨，分享观点。</p>\r\n							<h3>　　和你的生活圈保持关系</h3>\r\n							<p>　　教训：把自己关在一个禁闭的空间里，切断一切外界联系，除了一条网线，抱着一摞编程书籍，一堆方便面——如果你年轻，如果你厌倦了人们对你的指手画脚，你可以这样。</p>\r\n							<p>　　然而，当你进行一些创业性的工作时，把自己与世隔绝却是十分危险的 —— 你也许不需要什么合作者在你前后帮助你，但你绝对需要一个可以讨论的环境和能够和你分享经验和想法的朋友。因为终究，如果你所从事的事业从未受到外部观点\r\n								的评价和批评，你很可能犯了主观主义的错误，误入歧途。</p>\r\n							<p>　　尽可能多的获取反馈意见；在工作间与，当你们的数据库DBA在休息室喝咖啡的时候，请他评点你的数据库设计；向你的曾经有过创业的朋友和家人咨询你在创业过程中遇到的困难和问题；参加在线新闻组，和那些与你有相同领域的人保持联系；一切都要保持联系。</p>\r\n							<p>　　记住：自立并不是孤立——你永远都需要一个关系网来支持你，即使他们带来的不是善于的建议和鼓励。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:24:01', '2019-12-31 00:24:01', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1016', '你在支配钱，还是钱在支配你？', '但这样的新产品对他人而言的价值，多数时候无法大过于个别原物料价值的加总。前者是市场的愿付价格，后者是成本。价格没办法大过成本，那商业模式从没办法从 0 走到 1。因此新价值的创造，在于原物料以及组合方式的「选择」，而不是原物料的成本。因此，花很多钱去买有价值的原物料、有价值同仁的工作时间，如果没有搭配上「正确的选择」，那还是徒劳无功。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images0.cnblogs.com/kb/6051/201409/241815145602438.jpg\"><br>　　昨天写完<a\r\n								 href=\"http://mrjamie.cc/2014/09/23/brutal-reality/\" target=\"_blank\">《右脑追求理想，左脑面对现实的残酷》</a>后，一整天我的脑海都在想钱的事情。</p>\r\n							<p>　　事实上，我们已经知道钱可以加速一个商业模式从 1 到 100，但几乎无法帮助它从 0 到 1。因此在还没有 1 之前，钱最多只能帮助创业者多做些尝试，或是不要饿死。</p>\r\n							<p>　　另一方面，我们也知道，因为人性的缺陷，在到达 1 之前得到过多的钱，对于创业者发展商业模式，事实上是伤害远多于帮助 —— 钱多让人浪费、贪心、失去专注，反而让创业者无法用心把某个 0 变成 1。</p>\r\n							<p>　　但回过头来，这让我开始思考，这些事实观察结果中的所谓「钱」，到底该如何定义。</p>\r\n							<p>　　之前我们说钱是介质，用来暂存价值在里面。但显然在这里是不对的定义，因为如果钱是价值，那麽把价值放到 0 里面，应该会大大帮助它变成 1，但事实不是这样。</p>\r\n							<p>　　我昨天苦恼了一天。</p>\r\n							<p>　　但就在今天早上洗澡时，我恍然大悟。原来，钱不是代表对自己的价值，也不是代表对事物的价值。</p>\r\n							<p>　　钱代表的，是对「他人」的价值。</p>\r\n							<p>　　这个逻辑很容易证明，试想，如果他人都不需要钱，那么即使你拥有再多钱，也没办法换得任何价值，因此钱对你而言也就失去了价值。</p>\r\n							<p>　　而当你把钱拿去跟他人换得有价值的原物料，再把这些原物料组合起来，就形成了一个新产品，也就是所谓「创业」的本质。</p>\r\n							<p>　　但这样的新产品对他人而言的价值，多数时候无法大过于个别原物料价值的加总。前者是市场的愿付价格，后者是成本。价格没办法大过成本，那商业模式从没办法从 0 走到\r\n								1。因此新价值的创造，在于原物料以及组合方式的「选择」，而不是原物料的成本。因此，花很多钱去买有价值的原物料、有价值同仁的工作时间，如果没有搭配上「正确的选择」，那还是徒劳无功。</p>\r\n							<p>　　也就是说，从 0 到 1 的价值创造，几乎全在于选择，而不在原物料成本。</p>\r\n							<p>　　换言之，重点是如何支配对他人有价值的金钱，去换得正确的原物料组合，以及他们正确的时间投入。再往后想一层，所有的原物料，讲到底也都是他人用时间去换得的。因此，支配金钱的真正意义，就是在支配他人时间投入的方向。</p>\r\n							<p>　　反过来看，当你用时间投入去换取别人的金钱，也就等于别人在支配你的时间投入方向。</p>\r\n							<p>　　把这两件事情串起来，如果把自己当做一个系统，则当你正确的选择、正确的支配金钱，那会让你累积越来越多的金钱，可以用来支配越来越多人的时间投入。反之，如果你错误的支配金钱，那会让你负债累累，最终，你不但失去支配别人的权力，也会失去支配自己人生的能力。</p>\r\n							<p>　　所以原来，金钱代表的是支配的权力，而不是价值。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:25:26', '2019-12-31 00:25:26', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1017', '如果你做的事情毫不费力，就是在浪费时间', 'Heidi Roizen女士一度是硅谷人人争相学习的典范。她曾创办自己的公司并管理了 14 年之久。后来，她担任苹果公司主管开发者关系的高级副总裁。现在，她是 DFJ Venture 的一位风投家，她还在斯坦福主讲一门名叫“企业家精神”的课程。她几乎认识硅谷的所有重要人物并且灵活地运用着自己的影响力。哈佛商学院甚至还有专门关于她的案例。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p style=\"text-align: center;\"><strong><em><a href=\"http://www.tmtpost.com/?attachment_id=152939\" rel=\"attachment wp-att-152939\"><img\r\n											 width=\"560\" height=\"159\" class=\"aligncenter size-large wp-image-152939\" alt=\"\" src=\"https://images0.cnblogs.com/news/1/201505/140756571895569.jpg\"></a></em></strong></p>\r\n							<p><strong>　　</strong>注：本文作者 Heidi Roizen 系 DFJ Venture 合伙人，曾任苹果公司主管开发者关系的高级副总裁，女性创业者。</p>\r\n							<p>　　Heidi Roizen女士一度是硅谷人人争相学习的典范。她曾创办自己的公司并管理了 14 年之久。后来，她担任苹果公司主管开发者关系的高级副总裁。现在，她是 DFJ Venture\r\n								的一位风投家，她还在斯坦福主讲一门名叫“企业家精神”的课程。她几乎认识硅谷的所有重要人物并且灵活地运用着自己的影响力。哈佛商学院甚至还有专门关于她的案例。</p>\r\n							<p>　　以下是 Roizen 提出的八条原则，她正是利用这些原则来指导自己的工作、建立起广泛的人际网络并不断推动创新。这些过来人的经验对于新入行者弥足珍贵，可以作为职业生涯各个阶段发展重要的领航灯。</p>\r\n							<p>　　<strong>1</strong><strong>）如果你做的事情毫不费力，那就是在浪费时间</strong></p>\r\n							<p>　　梅琳达·盖茨曾有一次路过小女儿的房间，看着她在尝试着自己穿鞋，她女儿说：“这很难，但是我喜欢困难的事。”</p>\r\n							<p>　　我喜欢这种态度。在你经历过很多困难时期后，你会发现渡过难关是你最美好的经历。</p>\r\n							<p>　　成功的创业者追求一种永不止步的状态。你努力工作，超越能力的极限，不断地尝试、失败、再尝试；你每天、每周都问自己“我还能做什么更有难度的事情吗”，这时你才能理解这种劲头。</p>\r\n							<p>　　有趣的是，很多怀有雄心壮志的人却力求消除工作中的困难。他们想平步青云，顺利到达梦想彼岸，这是不对的。”现实情况是，即使你真的轻松成功，你也会感到无聊。所以，找点困难的事情做吧。</p>\r\n							<p><strong>　　创业的美妙之处正在于其艰难。没有安全可言，没有稳定的收入，你必须完全靠自己。</strong></p>\r\n							<p>　　<strong>2</strong><strong>）你的品德决定了你生活的基调</strong></p>\r\n							<p>　　做第一家公司 T/Maker 的 CEO 时，曾有一次防火洒水器故障毁掉了所有库存商品。幸运的是，大多数产品都不太值钱。更幸运的是（从另一个角度说），房东不知道货品不值钱，愿意用保险赔付一切损失。</p>\r\n							<p>　　当时的条件确实很诱人，我们本可以收到 15 万美元的赔款。但是我们决定说出真相，因为不仅我们知道库存的价值，我们的员工也知道，如果我们决定作假，那我们怎么向员工交代。</p>\r\n							<p>　　你要成为员工的榜样，清楚自己所做每件事的后果。如果公司领导层决定收了这笔钱，那就等于告诉员工，作假是被允许的，就好像是在说：“虚报费用是没问题的，如果想要的话把多余的设备带回家也行。”</p>\r\n							<p>　　这看起来轻而易举，但是真正做到却不容易。你可能会想：“我可以怎么简单怎么来，我可以这么说，我可以对消费者撒谎来达成交易。”</p>\r\n							<p><strong>　　有时你能逃脱掉，有时却逃不掉，大多数情况你最终都是逃不掉的。</strong></p>\r\n							<p><strong>　　</strong><strong>3</strong><strong>）你的内心比你掌握更多的信息</strong></p>\r\n							<p>　　你的行为决定了公司的文化基调。做有些事是为了晚上能睡个安稳觉，另一些是为了搭建良好的工作关系。当你把标准定得更高时，你会发现更容易把持自己。</p>\r\n							<p>　　在斯坦福商学院，有一门“商业创新”课程，要求学生进行一周练习：睡前把你明天要做的一个决定写在纸上，第二天早上起来立即做决定。这个练习的目的是告诉学生直觉是如何做决定的，以及直觉能够有多么准确。</p>\r\n							<p>　　但是科技圈的认知却朝向相反的方向发展，做决定越来越靠无尽的数据。人们认为掌握的数据越多就能作出正确的决定。对于有些事情来说，这种方法是有效的，但是并不是所有事。内心的直觉建立在多年的经验以及对于人类行为持续不断的观察上。我们甚至不知道它的具体形式。</p>\r\n							<p>　　我在做一些艰难的决定时往往会听从直觉，尤其是涉及到人的时候——和谁工作，和谁保持联系，把谁炒鱿鱼等。每次数据指示和我想的不一样时，听从数据都会让我后悔不已。</p>\r\n							<p>　　<strong>4</strong><strong>）挑选团队是你要做的最重要的事情</strong></p>\r\n							<p><strong>　　绝大多数公司的成败都取决于团队的质量。</strong></p>\r\n							<p>　　过去这些年里，Roizen\r\n								见过太多年轻的创业者犯同一个错误：他们有一个创意，开了一家公司，但是当需要聘用管理人员的时候，他们不想找一个比他们更懂的人来做。他们不想被威胁，所以就找跟他们同龄，和他们懂得一样多的，找自己信任的熟人。这种做法听起来不错，但是同时，创业者因为怕被压制或大权旁落而错失了许多专业人才。</p>\r\n							<p>　　<strong>5）如果你希望成为团队内最聪明的人，那你会建立一支平庸的队伍。</strong></p>\r\n							<p>　　你真的希望你负责销售的副总比你还不懂销售？你想要你的 CFO 不如你懂财务？当然不是。你应该去冒险，找到正确的人，并且信任他们。你的工作是激励这些人，并确保他们和睦相处。</p>\r\n							<p>　　我的目标永远是成为团队里最笨的人，我希望我的身边都是些真正有才华的人。这才是让人兴奋的事情，我们才能完成最艰难的挑战。</p>\r\n							<p>　　<strong>6</strong><strong>）生活真的是反复无常的</strong></p>\r\n							<p>　　倒霉事儿会发生在你头上，你会失败，失控的事情会发生，你需要接受现实。在这种境遇下，你如何挺过去，坚持到成功呢？一条建议：<strong>把事情都想成一团糟。</strong></p>\r\n							<p><strong>　　快乐的关键是降低你的预期。</strong>这并不是说你不应该追求自己的目标，这意味着你应该对前进路上的不完美做好准备。比如说，Roizen\r\n								出国旅行时会设想行李丢失、航班晚点或是租的车没有按时到达等各种情况。我想到了各种事情最坏的结果，那么当坏事真的发生时，我也不会感到难过。我在随身行李中放了换洗衣服，我在落地两小时内没有安排任何会议。我预期很低，如果坏事没有发生，那我就会很欣喜。<strong>95%</strong><strong>的压力都是自找的。</strong></p>\r\n							<p>　　Roizen 想起她认识的一位总是严谨制定计划的创业者，每一件事都计划得滴水不漏，但是实际上事情从没有完全按计划施行过。</p>\r\n							<p>　　如果你期待每件事都顺利进行，坏事就可能会落到你身上。生活有时候可能很遭，当这种情况真的发生时，整顿行装，继续前行。</p>\r\n							<p><strong>　　如果你跌倒了却爬不起来，那么你的余生也将一事无成。</strong></p>\r\n							<p>　　记住，就像硬币的两面一样，生活的跌宕也可能带来好事。当机会来临时，不要错过，你不知道接下来会发生什么。如果你得到 3 个不错的工作 offer，不要总想着选个最正确的。</p>\r\n							<p>　　可能你选了一个不太好的工作，业绩不好，你被炒了，但以后可能还有更好的工作机会。而且在这份工作中学到的经验教训在另一份更稳定的工作中是得不到的。</p>\r\n							<p>　　Roizen 回忆起自己不久前看的一本书，书中说在问到过去 5 年发生过的最好和最坏的事情是什么时，大部人说出的都是同一件事，甚至包括离婚、得癌症或是失业等。</p>\r\n							<p>　　但当你接着问他什么是促使生活向好的方向发展的事情时，往往就是这些坏事。有时，接受生活的起伏，你会发现一些伪装起来的好事。</p>\r\n							<p>　　<strong>7</strong><strong>）充分利用时间</strong></p>\r\n							<p><strong>　　你所拥有的最重要的东西就是你的时间，因为你不能创造更多时间。</strong></p>\r\n							<p>　　你可以用钱或他人的帮助来节约你的时间，但是，最终你还是会用光自己的时间。所以，你需要对自己如何利用时间了如指掌。很多人不知道每件事情花了多少时间，他们有 1000\r\n								封未回复的邮件，却还说不知道怎么处理。解决方法就是每天安排的工作不要超过 5 个小时，留出 3 个小时回邮件，打电话，阅读，获取最新消息。当别人说没时间时，我会说，<strong>你当然有时间，但你用来做别的事情了。</strong></p>\r\n							<p>　　想想所有需要花时间的事情，开始时对它们一视同仁。你要明白，睡觉是花时间的，阅读也是花时间的。搞清楚你喜欢做什么，什么能够最大限度的拓展你的能力，然后重新规划时间，把时间花在正确的事情上。理想的情况是，你能留出一些时间用来思考和睡觉，但是\r\n								Roizen 说有时候也确实很难实现。</p>\r\n							<p>　　在工作上花更多的时间就意味着陪家人和朋友的时间少了。人们有一种幻觉认为关系和交流不需要用时间来维系，但是实际上不是这样的。你可能没法完全平衡你的时间，但是至少试着来。</p>\r\n							<p><strong>　　如果你不给你自己留时间，那就没时间做些正确的事，总会有各种突发情况。</strong></p>\r\n							<p><strong>　　</strong><strong>8</strong><strong>）20-40-60&nbsp;</strong><strong>法则</strong></p>\r\n							<p>　　演员 Shirley MacLaine 最早提出了这个法则，主要内容是：20 岁时，你总在担心别人是怎么看你的；40 岁时你觉醒了，我才不管别人是怎么想的。60\r\n								岁时你才发现，根本没人管你。这个法则的核心理念就是：从一开始就没有人想着你。</p>\r\n							<p>　　当然，这既是好事儿，也是坏事。坏处在于没有人在一直关心你好不好，挣多少钱，你对工作和人际关系是否满意。“你需要为自己着想，如果你在做一件不喜欢的工作，你需要自己做出决定是否换个工作，你不能在办公室等着别人帮你做决定。</p>\r\n							<p><strong>　　</strong>你的老板不会想着你，你的同事没有想着你，你需要替自己着想。</p>\r\n							<p><strong>　　这听起来令人难以接受。有些人花很多时间思忖别人是怎么看待自己的，深受折磨，其实完全没必要这样。</strong></p>\r\n							<p>　　我曾经也总是顾虑长途飞行后穿着不合时宜的鞋和褶皱的套装时开会是什么状态。我会很担心人们看到我连自己都收拾不利索会怎么看我。但是，有一次开会时，我发现，并没有人认为“虽然这个家伙很聪明，但是他衣冠不整，这人肯定不行”。</p>\r\n							<p>　　人们总是为一些犯过的小错误折磨自己，在会上说错话，叫错人名等。你可能浪费几个星期的时间来懊恼，导致工作效率低下。如果你发现自己是这样的，那么请记住：<strong>没有人像你自己一样关注你。</strong>所以就不要担心太多了。</p>\r\n							<p>　　【本文原载于微信公众号“LinkedIn中国”。LinkedIn领英是全球最大的职业社交网站，会员人数在世界范围内超过3亿，每个《财富》500强公司均有高管加入。LinkedIn微信（ID：linkedin_china）每日推送深度文章，汇聚全球商业领袖的思想精华。】</p>\r\n							<p>　　本文系作者&nbsp;<a title=\"LinkedIn领英\" href=\"http://www.tmtpost.com/user/277016\" target=\"_blank\">LinkedIn领英</a> 授权钛媒体发表，并经钛媒体编辑，转载请注明出处和<a\r\n								 title=\"前苹果副总裁：如果你做的事情毫不费力，就是在浪费时间\" class=\"link\" href=\"http://www.tmtpost.com/152946.html\">本文链接</a></p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:26:51', '2019-12-31 00:26:51', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1018', '我们为什么要思考算法', '在西方，真正推动算法传播的是一个居住在巴格达的阿拉伯人，Al Khwarizmi，他引进了印度更为先进的十进制数字系统。Al Khawarizmi展示了加、减、乘、除，乃至平方根和圆周率π的计算步骤。这些步骤的特点是：简单、无歧义、有效、有穷步骤、正确。数百年后，当十进制阿拉伯数字系统在欧洲广泛应用时，人们便创造出Al Khwarizmi 的拉丁化写法“Algorithm”，来描述这种有规可循的数字计算行为。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p><strong>　　源头</strong></p>\r\n							<p>　　“算法”的中文最早出现在中国汉代的数学名著《周髀算经》中。《周髀算经》卷上有：“数之法出于圆方。圆出于方，方出于矩。矩出于九九八十一”。意思是：\r\n								算数的方法都出于对圆、对方的计算，其中圆出于方(圆形面积=外接正方形x圆周率/4)，方出于矩(正方形源自两边相等的矩)，矩的计算出于九九八十一\r\n								(长乘宽面积的计算依自九九乘法表)。追溯回去，在春秋战国时代，《九九乘法歌诀》已经开始流行起来。话说，自从卡梅伦被8×9等于多少问呆以后，英国教育部就开始聘请上海的小学数学老师赴英训练小九九了……</p>\r\n							<p style=\"text-align: center;\"><strong>Chinese teachers bring the art of maths to English schools</strong></p>\r\n							<p><a href=\"https://images0.cnblogs.com/news/145819/201504/010027202646660.jpg\"><img width=\"414\" height=\"201\"\r\n									 class=\"aligncenter size-full wp-image-26694\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n									 alt=\"大数据\" src=\"http://www.36dsj.com/wp-content/uploads/2015/03/00147.jpg\" data-tag=\"bdshare\"\r\n									 data-bd-imgshare-binded=\"1\"></a></p>\r\n							<p>　　在西方，真正推动算法传播的是一个居住在巴格达的阿拉伯人，Al Khwarizmi，他引进了印度更为先进的十进制数字系统。Al\r\n								Khawarizmi展示了加、减、乘、除，乃至平方根和圆周率π的计算步骤。这些步骤的特点是：简单、无歧义、有效、有穷步骤、正确。数百年后，当十进制阿拉伯数字系统在欧洲广泛应用时，人们便创造出Al Khwarizmi\r\n								的拉丁化写法“Algorithm”，来描述这种有规可循的数字计算行为。</p>\r\n							<p><strong>　　算法的定义</strong></p>\r\n							<p>　　究竟什么是算法呢，字面理解，就是计算的办法或法则。这里的计算不单指加减乘除等算术运算，而是广义的做任何事情的计算。办法和法则，则意味着使用它可以解决眼前的问题。</p>\r\n							<p>　　就拿我们喜闻乐见的世界杯比赛来说，每四年一届比赛的目的就是选出此时世界上踢球最牛掰的那个国家。在200多个国家里头，如果用单循环联赛赛制，也就是每个队都必须和另外所有队踢一场，以此决定本队成绩，假设每隔三天踢一场，最快也要600来天。怎么样，累觉不爱吧，还是广场舞来的更收放自如些。对于比赛组织者来说，明智的策略当然是先在几个大洲里选出几个屈指可数的球队，然后大家聚在一起，一个月内论出高下，这时甚至还要再分成几个组，每组最强的几个队才能突出重围，踏上冠军之路。</p>\r\n							<p>　　道理上来讲，最好的球队，无论哪种赛制，总是会脱颖而出的；而上述这种优中选优的方式，难度和开销就降低许多了。上述过程有一个特定叫法：分治，也就是将一个大问题（寻找全世界的最佳球队），分解成多个类型相同但规模更小的问题（寻找一个大洲的最佳球队），如果小问题得以解决，那么大问题就更加容易解决了（各大洲最佳球队PK一下，就知道世界冠军的奖杯，花落谁家了）。这只是生活中众多算法应用的一个例子，那么由事实到抽象拔高出来一个完备的字典式定义，对应用和分析者来说，其实无太多必要。事实上，算法的定义也因看待的角度不同而不同。</p>\r\n							<p><strong>　　如果你是个哲学家</strong>：算法是解决一个问题的抽象行为序列。</p>\r\n							<p><strong>　　如果你是个码农：</strong>算法是一个计算过程，它接受一些输入，并产生某些输出。</p>\r\n							<p><strong>　　如果你喜欢高大上：</strong>算法是解决一个精确定义的计算问题的工具。</p>\r\n							<p><strong>　　但他们共同强调了一点：算法的不变式，即算法必须能够让人一步一步照着执行。</strong></p>\r\n							<p><strong>　　算法的核心</strong></p>\r\n							<p>　　算法是解决问题的办法或法则。但解决一个问题不一定只有一种办法，不同的办法之间便有了好坏之分。对于解决同一个问题的不同算法，我们如何比较它们的好坏呢？</p>\r\n							<p>　　能够比较的东西当然很多，如模块性、正确性、可维护性、健壮性、友好性、简易性、可扩展性和可靠性等，但这些并不是算法设计与分析中最为关心的问题。但它们更加像是人类附加在算法上的外部属性，因为它们通常依赖于使用或实现算法的人员的其他方面素质：理解力、表述力、编程水平、数据结构的运用与设计技巧等。</p>\r\n							<p>　　那么算法的核心或灵魂是什么呢？也许您已经可以猜到：速度。也就是其解决问题的速度。因为速度往往是区分可行和不可行方案的分水岭。例如，一个让人等上很多年才能运行结束的算法，就是再正确，也不会令我们满意。从实际意义上看，这种算法的正确和不正确并无太大的本质区别。</p>\r\n							<p>　　如果一个算法在你的改进下，效率提高了成百上千倍，则当你坐在显示屏前，所获得的快感不会亚于很多其他的事情。</p>\r\n							<p><strong>　　堆机器还是拼算法</strong></p>\r\n							<p>　　说到提升速度，真壕们会不约而同的移步华强北，血拼内存处理器。然而，计算机速度的增长可以多大程度上解决一些简单问题呢？我们来看一个经典的例子吧。</p>\r\n							<p>　　我们有一个描述兔子增长数量的模型：</p>\r\n							<p>　　原点：一对雌雄兔子</p>\r\n							<p>　　规律：每对兔子每月产下一对兔子，且一生只能生产两次，而且第二次生产后老死。（我们这里假设产下的每对兔子都继续正常繁衍，方舟子及果壳知识帝请绕路……）<img width=\"488\" height=\"323\"\r\n								 class=\"aligncenter size-full wp-image-26695\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/010027202171674.jpg\" data-tag=\"bdshare\"\r\n								 data-bd-imgshare-binded=\"1\"></p>\r\n							<p>　　如果定义在第n个月的兔子数量为F(n)，那么F(n)个兔子中包含这个月新生的兔子（也就是（第n-1月）兔子总数F(n-1)），和上个月的新生兔子数目（因为上个月的老兔子们这个月已经死掉了），即F(n-2)。所以F(n)=F(n-1)+F(n-2)，F(n)的序列叫做斐波那契序列。</p>\r\n							<p>　　那么我们就开始算F(n)吧，比如说你想知道第30个月时的兔子数量，那么F(30)=F(29)+F(28)，那么F(29)=F(28)+F(27)，我们一直分解下去，最后变成数数一共多少个F(0)了。我们写段代码，运行它，约朋友出去打个台球，回来也许可以得到答案。若你眼光长远，想知道第300个月时的兔子数量，那么你必须要寻找其它算法了。因为F(0)的数量太庞大了。这种天真递归解法，事实上要对F(0)进行指数级次的运算。聪明的你会进一步发现斐波那契数列是一个二阶递推数列，于是最后可以用对数级次运算搞定F(300)，这里细节省略，感兴趣的话我们会在后续详细讨论。</p>\r\n							<p>　　问题是，在硬件性能愈加强悍的今天，大规模运算或者大数据的实践者们，时常认为更快的算法也许没有必要。那么我们来看斐波那契数的天真递归解法，它的时间复杂度为1.6的n次方，即计算F(n+1)的时间约是计算F(n)的1.6倍。按照摩尔定律计算性能每18个月翻倍的速度，每过一年，我们只能多计算一个未知的斐波那契数。</p>\r\n							<p>　　我们说IBM的Roadrunner 超级计算机性能为NEC的Earth\r\n								Simulator的30倍，但这也仅仅意味着Roadrunner比后者在同样的时间下以指数级复杂度多算7个数。但如果使用log(n)复杂度的算法，那么Roadrunner可多算10的30次方个斐波那契数。</p>\r\n							<p>　　所以，算法书其实不全是用来垫咖啡杯的……改进算法比起提升硬件速度的效果，还是很显著的，不是吗。</p>\r\n							<p><strong>　　结语</strong></p>\r\n							<p>　　对算法效率的追求，在任何场景中，都可以给你带来意想不到的惊喜。对于产品的突破、开销的降低、技术气氛的凝聚，还有什么方式比思考与重视算法来的更加有效与唯美呢？</p>\r\n							<p>　　<strong>作者：</strong>华傲数据算法部</p>\r\n							<p>　　<strong>声明：</strong>本文部分内容借鉴于T.H.Cormen等著《算法导论》与邹恒明著《算法之道》，特此感谢与声明。图片源自网络。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:29:12', '2019-12-31 00:29:12', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1019', 'HTTPS背后的加密算法', '浏览器支持哪些Cipher？这取决于浏览器支持的SSL/TLS协议的版本。习惯上，我们通常把HTTPS与SSL协议放到一起；事实上，SSL协议是Netcape公司于上世纪90年代中期提出的协议，自身发展到3.0版本。1999年该协议由ITEL接管，进行了标准化，改名为TLS。可以说，TLS 1.0就是SSL 3.1版本。在Wikipedia上并没有SSL独立的条目，而是会重定向到TLS，可见两种协议关系之紧密。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　当你在浏览器的地址栏上输入https开头的网址后，浏览器和服务器之间会在接下来的几百毫秒内进行大量的通信。InfoQ的这篇<a href=\"http://www.infoq.com/articles/HTTPS-Connection-Jeff-Moser\">文章</a>对此有非常详细的描述。这些复杂的步骤的第一步，就是浏览器与服务器之间协商一个在后续通信中使用的密钥算法。这个过程简单来说是这样的：</p>\r\n							<ol>\r\n								<li>浏览器把自身支持的一系列Cipher Suite（密钥算法套件，后文简称Cipher）[C1,C2,C3, …]发给服务器；</li>\r\n								<li>服务器接收到浏览器的所有Cipher后，与自己支持的套件作对比，如果找到双方都支持的Cipher，则告知浏览器；</li>\r\n								<li>浏览器与服务器使用匹配的Cipher进行后续通信。如果服务器没有找到匹配的算法，浏览器（以Firefox 30为例，后续例子中使用的浏览器均为此版本的Firefox）将给出错误信息:</li>\r\n							</ol>\r\n							<p><img width=\"616\" height=\"446\" class=\"alignnone size-full wp-image-773\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"ssl-error-no-cypher-overlap\" src=\"https://images2015.cnblogs.com/news/1/201509/1-20150930155224918-1168515628.png\"></p>\r\n							<p>　　本文将讲述如何探究这一过程。</p>\r\n							<h2>　　1. 浏览器</h2>\r\n							<p>　　浏览器支持哪些Cipher？这取决于浏览器支持的SSL/TLS协议的版本。习惯上，我们通常把HTTPS与SSL协议放到一起；事实上，SSL协议是Netcape公司于上世纪90年代中期提出的协议，自身发展到3.0版本。1999年该协议由ITEL接管，进行了标准化，改名为TLS。可以说，TLS\r\n								1.0就是SSL 3.1版本。在Wikipedia上并没有SSL独立的条目，而是会重定向到<a href=\"http://en.wikipedia.org/wiki/Secure_Sockets_Layer\">TLS</a>，可见两种协议关系之紧密。</p>\r\n							<p>　　目前TLS最新版本是1.2。互联网上有超过99%的网站支持TLS 1.0，而支持TLS\r\n								1.2的网站尚不足40%。打开Firefox浏览器，在地址栏中输入about:config，然后搜索tls.version，会看到下面的选项:</p>\r\n							<p><img width=\"614\" height=\"322\" class=\"alignnone size-full wp-image-771\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"about-config\" src=\"https://images2015.cnblogs.com/news/1/201509/1-20150930155223933-554215370.png\"></p>\r\n							<p>　　其中security.tls.version.min和security.tls.version.max两项决定了Firefox支持的SSL/TLS版本，根据<a href=\"http://kb.mozillazine.org/Security.tls.version.%2A\">Firefox文档</a>的介绍，这两项的可选值及其代表的协议是：</p>\r\n							<ul>\r\n								<li>0 – SSL 3.0</li>\r\n								<li>1 – TLS 1.0</li>\r\n								<li>2 – TLS 1.1</li>\r\n								<li>3 – TLS 1.2</li>\r\n							</ul>\r\n							<p>　　因此上图的设置说明当前浏览器支持协议的下限是SSL 3.0，上限是TLS 1.2。现在，如果把security.tls.version.min一项改为3，那么浏览器就只支持TLS\r\n								1.2了。前文提到，目前只有不足40%的网站支持TLS 1.2，比如Amazon就不在这40%之列，所以此时访问https://amazon.com，就会收到“Secure Connection\r\n								Failed”的错误信息，如图1所示。</p>\r\n							<p>　　了解了SSL/TLS协议后，可以使用Wireshark（或类似的可以抓去网络包的工具）通过分析网络包的信息，来查看浏览器发送给服务器的所有Cipher。Wireshark是一款<a href=\"http://www.cnblogs.com/tankxiao/archive/2012/10/10/2711777.html\">使用简单却非常强大</a>的抓包工具。</p>\r\n							<p>　　浏览器会首先发起握手协议，既一个“ClientHello”消息，在消息体中，可以找到Firefox支持的Cipher。在Wireshark中，按照Protocol协议排序，然后从TLS\r\n								1.2协议的报文中找到一个Info为“Client Hello”的。选中这个，然后在下面的报文信息窗口中依次找到Secure Sockets Layer -&gt; TLSv1.2 Record Layer -&gt;\r\n								Handshake Protocal -&gt; Cipher Suites。例子中的第一个Cipher是TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256，一共有23个:<img width=\"625\"\r\n								 height=\"390\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201509/1-20150930155235293-1793773700.png\"></p>\r\n							<p>　　如果继续找一个Info为“ServerHello”的报文，可以在类似的位置找到服务器返回的Cipher，在本例中是TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:<img width=\"624\"\r\n								 height=\"401\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/1/201509/1-20150930155223621-1116225953.png\"></p>\r\n							<p>　　关于密钥算法这一长串名字的含义，后面说明。接下来，浏览器就要等待服务器响应它的请求。我们来看一看服务器端都做了些什么。</p>\r\n							<h2>　　2. 服务器</h2>\r\n							<p>　　让我们以Windows为例。若要查看操作系统支持哪些密钥算法，可以运行gpedit.msc，依次进入”Computer Configuration” -&gt; ”Administrative Templates”\r\n								-&gt; “Network” -&gt; “SSL Configuration Settings”，这时可以在窗口右边看到”SSL Cipher Suite Order”项：</p>\r\n							<p style=\"text-align: center;\"><img width=\"624\" height=\"400\" alt=\"\" src=\"https://images2015.cnblogs.com/kb/1/201509/1-20150930223338121-1214379149.png\"></p>\r\n							<p>　　点击该项后进入”SSL Cipher Suite Order”。这里可以看到操作系统支持的Cipher的集合，以及对不同Cipher的排序</p>\r\n							<p><img width=\"622\" height=\"569\" class=\"alignnone size-full wp-image-774\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"ssl-suite-order\" src=\"https://images2015.cnblogs.com/news/1/201509/1-20150930155222777-1390433283.png\"></p>\r\n							<p>　　如果需要调整这里排序，或者去掉一些弱的Cipher，可以点击左上角的“Enabled”，然后在“Options”中重写编辑Cipher的列表。如果喜欢命令行，可以通过下面的Powershell命令修改密钥算法套件：</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>Set-ItemProperty -path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\<span style=\"color: #800080;\">0001002</span> -name Functions -value <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">XXX,XXX,XXX</span><span style=\"color: #800000;\">\"</span></pre>\r\n							</div>\r\n							<p>　　那么Cipher的这一长串名字是什么含义呢？其实，每种<a href=\"http://en.wikipedia.org/wiki/Cipher_suite\">Cipher</a>的名字里包含了四部分信息，分别是</p>\r\n							<ul>\r\n								<li><strong>密钥交换算法</strong>，用于决定客户端与服务器之间在握手的过程中如何认证，用到的算法包括RSA，Diffie-Hellman，ECDH，PSK等</li>\r\n								<li><strong>加密算法</strong>，用于加密消息流，该名称后通常会带有两个数字，分别表示密钥的长度和初始向量的长度，比如DES 56/56, RC2 56/128, RC4 128/128, AES\r\n									128/128, AES 256/256</li>\r\n								<li><strong>报文认证信息码（MAC）算法</strong>，用于创建报文摘要，确保消息的完整性（没有被篡改），算法包括MD5，SHA等。</li>\r\n								<li><strong>PRF（伪随机数函数）</strong>，用于生成“master secret”。</li>\r\n							</ul>\r\n							<p>　　完全搞懂上面的内容似乎还需要一本书的介绍（我已经力不从心了）。不过大致了解一下，有助于理解Cipher的名字，比如前面服务器发回给客户端的Cipher，</p>\r\n							<p><strong>　　TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</strong></p>\r\n							<p>　　从其名字可知，它是</p>\r\n							<ul>\r\n								<li>基于TLS协议的；</li>\r\n								<li>使用ECDHE、RSA作为密钥交换算法；</li>\r\n								<li>加密算法是AES（密钥和初始向量的长度都是256）；</li>\r\n								<li>MAC算法（这里就是哈希算法）是SHA。</li>\r\n							</ul>\r\n							<p>　　熟悉了Cipher名字背后的含义后，让我们看看像IIS这样的Web服务器如何选择一个密钥算法呢？假如浏览器发来的密钥算法套件为[C1, C2, C3]，而Windows Server支持的套件为[C4, C2,\r\n								C1, C3]时，C1和C2都是同时被双方支持的算法，IIS是优先返回C1，还是C2呢？<strong>答案是C2</strong>。IIS会遍历服务器的密钥算法套件，取出第一个C4，发现浏览器并不支持；接下来取第二个C2，这个被浏览器支持！于是，IIS选择了C2算法，并将它包含在一个“ServerHello”握手协议中，发回给客户端。这就有了图5中的结果。</p>\r\n							<h2>　　3. 选择</h2>\r\n							<p>　　作为浏览器的使用者，你可以让浏览器只能访问支持TLS\r\n								1.2协议的站点，以获得更好的安全性，以及更差的体验。作为服务器的维护者，似乎将最强壮的Cipher排在前面是正确的选择。就在前不久，我们开发的一个Web报税系统在一次由第三方进行的安全检查中，被报出的问题之一就是服务器默认的Cipher太弱（RC4-based），于是我们使用了AES-based的Cipher，但是密钥长度只是选择了128，而不是256，背后的担忧主要来自于性能——加密与解密是CPU密集型操作，我们担心到报税忙季时，过强的Cipher会带来性能问题。</p>\r\n							<p>　　其实像Amazon和<a href=\"http://crypto.stackexchange.com/questions/853/google-is-using-rc4-but-isnt-rc4-considered-unsafe\">Google</a>这些互联网公司都在使用RC4-based的加密算法。这又是一次理论与实践的交锋。至于这次对于的线上系统所做的调整会不会对性能产生影响，几个月后就能见分晓了。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:43:50', '2019-12-31 00:43:50', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1020', '淘宝搜索算法现状', '淘宝搜索排序的目的是帮助用户快速的找到需要的商品。从技术上来说，就是在用户输入关键词匹配到的商品中，把最符合用户需求的商品排到第一位，其它的依次排在后续相应的位置。为了更好的实现这个目标，算法排序系统基本按三个方面来推进：', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　淘宝搜索排序的目的是帮助用户快速的找到需要的商品。从技术上来说，就是在用户输入关键词匹配到的商品中，把最符合用户需求的商品排到第一位，其它的依次排在后续相应的位置。为了更好的实现这个目标，算法排序系统基本按三个方面来推进：</p>\r\n							<p>　　<strong>一、算法模型</strong></p>\r\n							<p>　　当用户输入关键词进行搜索的时候，系统依据算法模型来给匹配到的每个商品进行实时的计算，并按照分数的大小对商品进行排序。</p>\r\n							<p>　　对于好的算法模型，首先需要考虑我们能够有哪些特征因子可以应用。比如在网页搜索中，算法模型基本就是按网页的重要性和相关性给网页计算一个分数，然后进行排序。这里的相关性，和重要性就是网页排序模型中两个重要的因子。具体来说相关性因子是指搜索关键字在文档中出现的度数，当这个度数越高时，则认为该文档的相关程度越高。重要度因子比如\r\n								Google 的 Pagerank，可以理解为一个网页入口超级链接的数目：一个网页被其他网页引用得越多，则该网页就越有价值。特别地，一个网页被越重要的网页所引用，则该网页的重要程度也就越高。&nbsp;</p>\r\n							<p>　　考虑淘宝搜索的时候，有些特征因子是很容易能想到的，比如：</p>\r\n							<p>　　<strong>A、文本的相关性：</strong>关键词和商品的匹配，匹配的程度，是否重要词的匹配，匹配词之间的距离等，都可能影响相关性。比如搜索“小鸭子洗衣机”的时候，一个商品的中心词是洗衣机的要比卖洗衣机配件商品的相关性高，小鸭子连在一起的相关性要比“小”和“鸭子”分开时候的相关性高等。文本相关性最基本的计算方式可以参考\r\n								BM25 等。</p>\r\n							<p>　　<strong>B、类目热点：</strong>淘宝数据的一个重要特质是每个商品都挂靠在类目属性体系下面，每个商品都做了一个很好的分类。在搜索过程中，同一搜索词的大量用户行为数据很容易聚焦到相应的热点类目，比如“手机”的搜索行为会集中到手机类目，而不是配件类目。</p>\r\n							<p>　　<strong>C、图片质量：</strong>图片是电子商务网站非常重要的一个数据，图片是否精美吸引人，图片上是否有各种各样的“牛皮癣”，和商品匹配度等都很大程度上影响着用户的点击和购买决策。</p>\r\n							<p>　　<strong>D、商品质量：</strong>每个商品都有不同的质量，商品的描述真实性，是否物美价廉，受人欢迎的程度等。</p>\r\n							<p>　　<strong>E、作弊因子：</strong>类似于全网搜索有关键词堆砌，link&nbsp;spam，网页重复等等作弊的问题，电子商务搜索也面临同样的问题，比如商品关键词堆砌，重复铺货，重复开店，广告商品引流等等，也有商品特有的问题如价格作弊，交易作弊等，需要利用统计分析或者机器学习来做异常行为，异常规律的发现和识别并运用到排序中。</p>\r\n							<p>　　<strong>F、公平因子：</strong>淘宝的商品很丰富，每个搜索词下都有足够多的商品在竞争，需要在相似质量的情况下让更多的商品和卖家有展示的机会，而不是像网页搜索一样是一个基本静态的排序，照成商品点击和展示的马太效应。</p>\r\n							<p>　　类似的商品，卖家，买家，搜索词等方面的特征因子有很多，一个排序模型就是把各种各样不同的特征因子组合起来，给出一个最终的关键词到商品的相关性分数。只用其中的一到两个特征因子，已经可以对商品做一些最基本的排序。如果有更多的特征参与到排序，我们就可能得到一个更好的排序算法。组合的方法可以有简单的人工配置到复杂的类似\r\n								Learning&nbsp;to&nbsp;Rank 等的学习模型。</p>\r\n							<p>　　那么如何衡量不同算法之间的优劣呢？&nbsp;</p>\r\n							<p>　　<strong>二、线下评估</strong></p>\r\n							<p>　　算法模型的评估一般分为线下的评估和线上的评估，线下的评估很多都体现在搜索中常用的相关性（Relevance）指标。相关性的定义可以分为狭义相关性和广义相关性两方面，狭义相关性一般指检索结果和用户查询的相关程度。而从广义的层面，相关性可以理解为用户查询的综合满意度。当用户在搜索框输入关键词，到需求获得满足，这之间经历的过程越顺畅，越便捷，搜索相关性就越好。</p>\r\n							<p>　　在淘宝搜索衡量狭义相关性的时候，一般是使用 PI（Per&nbsp;Item）测试的方法：</p>\r\n							<p>　　<strong>A、抽取具有代表性的查询关键词，组成一个规模适当的关键词集合</strong></p>\r\n							<p>　　<strong>B、针对这个关键词集合，从模型的产出结果中查询对应的结果，进行人工标注（人工判断为相关性好、中、差等），&nbsp;对人工评测的结果数据，使用预定义好的评价计算公式比如 DCG\r\n									等，用数值化的方法来评价算法模型的结果和标注的理想结果的接近程度。</strong></p>\r\n							<p>　　利用人工标注数据来计算相关性的分数，来判断模型的好坏；在这个过程中人工不可避免的会有主观的判断，但综合了多人的判断结果还是可以获得一个有统计意义的结果，另一方面标注数据也可以帮助我们找到一个算法表现不理想的地方，有针对性的提升。<br>广义的相关性线下评测比较困难，受人工主观因素的影响更大，一般使用\r\n								SBS（Side&nbsp;by&nbsp;Side）的评测方法，针对一个关键词，把两个不同算法模型产出的结果同时展示在屏幕上，每次新模型和对比模型展示的位置关系都是随即的，人工判断的时候不知道哪一边的数据是新模型的结果，人工判断那一边的搜索结果好，以最终的统计结果综合来衡量新模型和老模型的搜索表现。</p>\r\n							<p>　　线下评测的方法和指标有很多，不同的搜索引擎会关注不同的指标，比如以前 Yahoo 的全网搜索引擎比较关注\r\n								RCFP（Relevance，Coverage，Freshness，Perspective）等，淘宝搜索线下评测时候一般统计 DCG 和 SBS 的指标。</p>\r\n							<p>　　线下的评测方法从统计上有一定的指导意义，能从一定程度上区分模型的好坏，但要真正验证算法模型的好坏，还需要接受真实的流量来验证。</p>\r\n							<p>　　<strong>三、线上测试</strong></p>\r\n							<p>　　为了真实验证一个算法模型的好坏，需要有一个系统能提供真实的流量来检验。淘宝搜索实现的\r\n								BTS（Bucket&nbsp;Testing&nbsp;System）系统就是这样的一个环境，在用户搜索时，由搜索系统根据一定的策略来自动决定用户的分组号（Bucket&nbsp;id），保证自动抽取导入不同分组的流量具有可对比性，然后让不同分组的用户看到的不同算法模型提供的结果。用户在不同模型下的行为将被记录下来，这些行为数据通过数据分析形成一系列指标，而通过这些指标的比较，最后就形成了不同模型之间孰优孰劣的结论。只要分组的流量达到一定的程度，数据指标从统计意义上就具有可比性。</p>\r\n							<p>　　不同的 BTS 系统会关注不同的数据指标，在淘宝搜索，有一些重要的指标是很多算法模型测试的时候关注的：</p>\r\n							<ul>\r\n								<li><strong style=\"line-height: 1.8;\">访问 UV 成交转化率</strong><span style=\"line-height: 1.8;\">：来淘宝搜索的\r\n										UV，最终通过搜索结果成交的用户占比。</span></li>\r\n								<li><strong style=\"line-height: 1.8;\">IPV-UV 转化率</strong><span style=\"line-height: 1.8;\">：来淘宝搜索的\r\n										UV，有多少比例的用户点击了搜索结果</span></li>\r\n								<li><strong style=\"line-height: 1.8;\">CTR</strong><span style=\"line-height: 1.8;\">：搜索产生的点击占搜索产生的 PV 的比例</span></li>\r\n								<li><strong style=\"line-height: 1.8;\">客单价</strong><span style=\"line-height: 1.8;\">：每个成交用户在淘宝搜索上产生成交的平均价格</span></li>\r\n								<li><strong style=\"line-height: 1.8;\">基尼系数</strong><span style=\"line-height: 1.8;\">：基尼系数是一个经济学名词，考量社会财富的集中度；如果社会财富集中到很少一部分富人手中的时候，基尼系数就会增大，社会的稳定性和可持续发展性就会出现问题；淘宝搜索借用了这个概念来衡量搜索带给卖家的\r\n										PV 展示，和点击的集中度，在保证用户体验的前提下，给更多的优质或小小而美的卖家展示的机会。</span></li>\r\n							</ul>\r\n							<p>　　大部分时候我们都有好几个模型和功能在线上测试，我们用 BTS 的方式来观察测试的情况，如果提升稳定就逐渐开放给所有用户，如果没有提升，我们也能从中获得经验帮助我们更好的理解用户。</p>\r\n							<p>　　作者介绍：青峰，淘宝搜索算法总监。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n			\r\n		</div>', '0', '2019-12-31 00:45:22', '2019-12-31 00:45:22', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1021', 'Git协作流程', '协作必须有一个规范的流程，让大家有效地合作，使得项目井井有条地发展下去。\"协作流程\"在英语里，叫做\"workflow\"或者\"flow\"，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　Git 作为一个源码管理系统，不可避免涉及到多人协作。</p>\r\n							<p>　　协作必须有一个规范的流程，让大家有效地合作，使得项目井井有条地发展下去。\"协作流程\"在英语里，叫做\"workflow\"或者\"flow\"，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223834749-235644042.png\"></p>\r\n							<p>　　本文介绍三种广泛使用的协作流程：</p>\r\n							<ul>\r\n								<li>Git flow</li>\r\n								<li>Github flow</li>\r\n								<li>Gitlab flow</li>\r\n							</ul>\r\n							<p>　　如果你对Git还不是很熟悉，可以先阅读下面的文章。</p>\r\n							<ul>\r\n								<li><a href=\"http://www.ruanyifeng.com/blog/2015/08/git-use-process.html\" target=\"_blank\">《Git 使用规范流程》</a></li>\r\n								<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\">《常用 Git 命令清单》</a></li>\r\n								<li><a href=\"http://www.ruanyifeng.com/blog/2014/06/git_remote.html\" target=\"_blank\">《Git 远程操作详解》</a></li>\r\n							</ul>\r\n							<p>　　<strong>一、功能驱动</strong></p>\r\n							<p>　　本文的三种协作流程，有一个共同点：都采用<a href=\"https://en.wikipedia.org/wiki/Feature-driven_development\" target=\"_blank\">\"功能驱动式开发\"</a>（Feature-driven\r\n								development，简称FDD）。</p>\r\n							<p>　　它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p>\r\n							<p>　　<strong>二、Git flow</strong></p>\r\n							<p>　　最早诞生、并得到广泛采用的一种协作流程，就是<a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\">Git\r\n									flow</a>&nbsp;。</p>\r\n							<p>　　<strong>2. 1 特点</strong></p>\r\n							<p>　　它最主要的特点有两个。</p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833921-859190050.png\"></p>\r\n							<p>　　首先，项目存在两个长期分支。</p>\r\n							<ul>\r\n								<li>主分支<code>master</code></li>\r\n								<li>开发分支<code>develop</code></li>\r\n							</ul>\r\n							<p>　　前者用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；后者用于日常开发，存放最新的开发版。</p>\r\n							<p>　　其次，项目存在三种短期分支。</p>\r\n							<ul>\r\n								<li>功能分支（feature branch）</li>\r\n								<li>补丁分支（hotfix branch）</li>\r\n								<li>预发分支（release branch）</li>\r\n							</ul>\r\n							<p>　　一旦完成开发，它们就会被合并进<code>develop</code>或<code>master</code>，然后被删除。</p>\r\n							<p>　　Git flow 的详细介绍，请阅读我翻译的中文版<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\">《Git\r\n									分支管理策略》</a>。</p>\r\n							<p>　　<strong>2. 2 评价</strong></p>\r\n							<p>　　Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将<code>master</code>当作默认分支，可是开发是在<code>develop</code>分支进行的，这导致经常要切换分支，非常烦人。</p>\r\n							<p>　　更大问题在于，这个模式是基于\"版本发布\"的，目标是一段时间以后产出一个新版本。但是，很多网站项目是\"持续发布\"，代码一有变动，就部署一次。这时，<code>master</code>分支和<code>develop</code>分支的差别不大，没必要维护两个长期分支。</p>\r\n							<p>　　<strong>三、Github flow</strong></p>\r\n							<p>　　<a href=\"http://scottchacon.com/2011/08/31/github-flow.html\" target=\"_blank\">Github flow</a>&nbsp;是Git\r\n								flow的简化版，专门配合\"持续发布\"。它是 Github.com 使用的协作流程。</p>\r\n							<p>　　<strong>3. 1 流程</strong></p>\r\n							<p>　　它只有一个长期分支，就是<code>master</code>，因此用起来非常简单。</p>\r\n							<p>　　官方推荐的<a href=\"https://guides.github.com/introduction/flow/index.html\" target=\"_blank\">流程</a>如下。</p>\r\n							<p data-mce-=\"\"><img width=\"660\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833562-1262731757.png\"></p>\r\n							<blockquote>\r\n								<p>　　第一步：根据需求，从<code>master</code>拉出新分支，不区分功能分支或补丁分支。</p>\r\n								<p>　　第二步：新分支开发完成后，或者需要讨论的时候，就向<code>master</code>发起一个<a href=\"https://help.github.com/articles/using-pull-requests/\"\r\n									 target=\"_blank\">pull reqest</a>（简称PR）。</p>\r\n								<p>　　第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p>\r\n								<p>　　第四步：你的Pull Request被接受，合并进<code>master</code>，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>\r\n							</blockquote>\r\n							<p>　　<strong>3. 2 评价</strong></p>\r\n							<p>　　Github flow 的最大优点就是简单，对于\"持续发布\"的产品，可以说是最合适的流程。</p>\r\n							<p>　　问题在于它的假设：<code>master</code>分支的更新与产品的发布是一致的。也就是说，<code>master</code>分支的最新代码，默认就是当前的线上代码。</p>\r\n							<p>　　可是，有些时候并非如此，代码合并进入<code>master</code>分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，<code>master</code>分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于<code>master</code>分支。</p>\r\n							<p>　　上面这种情况，只有<code>master</code>一个主分支就不够用了。通常，你不得不在<code>master</code>分支以外，另外新建一个<code>production</code>分支跟踪线上版本。</p>\r\n							<p>　　<strong>四、Gitlab flow</strong></p>\r\n							<p>　　<a href=\"http://doc.gitlab.com/ee/workflow/gitlab_flow.html\" target=\"_blank\">Gitlab flow</a>&nbsp;是 Git\r\n								flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p>\r\n							<p>　　<strong>4. 1 上游优先</strong></p>\r\n							<p>　　Gitlab flow 的最大原则叫做\"上游优先\"（upsteam first），即只存在一个主分支<code>master</code>，它是所有其他分支的\"上游\"。只有上游分支采纳的代码变化，才能应用到其他分支。</p>\r\n							<p>　　<a href=\"https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first\" target=\"_blank\">Chromium项目</a>就是一个例子，它明确规定，上游分支依次为：</p>\r\n							<blockquote>\r\n								<ol start=\"1\">\r\n									<li>Linus Torvalds的分支</li>\r\n									<li>子系统（比如netdev）的分支</li>\r\n									<li>设备厂商（比如三星）的分支</li>\r\n								</ol>\r\n							</blockquote>\r\n							<p>　　<strong>4. 2 持续发布</strong></p>\r\n							<p>　　Gitlab flow 分成两种情况，适应不同的开发流程。</p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833562-1223970944.png\"></p>\r\n							<p>　　对于\"持续发布\"的项目，它建议在<code>master</code>分支以外，再建立不同的环境分支。比如，\"开发环境\"的分支是<code>master</code>，\"预发环境\"的分支是<code>pre-production</code>，\"生产环境\"的分支是<code>production</code>。</p>\r\n							<p>　　开发分支是预发分支的\"上游\"，预发分支又是生产分支的\"上游\"。代码的变化，必须由\"上游\"向\"下游\"发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到<code>master</code>，确认没有问题，再<code>cherry-pick</code>到<code>pre-production</code>，这一步也没有问题，才进入<code>production</code>。</p>\r\n							<p>　　只有紧急情况，才允许跳过上游，直接合并到下游分支。</p>\r\n							<p>　　<strong>4. 3 版本发布</strong></p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833843-966696947.png\"></p>\r\n							<p>　　对于\"版本发布\"的项目，建议的做法是每一个稳定版本，都要从<code>master</code>分支拉出一个分支，比如<code>2-3-stable</code>、<code>2-4-stable</code>等等。</p>\r\n							<p>　　以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p>\r\n							<p>　　<strong>五、一些小技巧</strong></p>\r\n							<p>　　<strong>5. 1 Pull Request</strong></p>\r\n							<p data-mce-=\"\"><img width=\"660\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833609-949090578.png\"></p>\r\n							<p>　　功能分支合并进<code>master</code>分支，必须通过Pull Request（Gitlab里面叫做 Merge Request）。</p>\r\n							<p data-mce-=\"\"><img width=\"660\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833952-513918951.png\"></p>\r\n							<p>　　前面说过，Pull Request本质是一种对话机制，你可以在提交的时候，<code>@</code>相关<a href=\"https://github.com/blog/1004-mention-autocompletion\"\r\n								 target=\"_blank\">人员</a>或<a href=\"https://github.com/blog/1121-introducing-team-mentions\" target=\"_blank\">团队</a>，引起他们的注意。</p>\r\n							<p>　　<strong>5. 2 Protected branch</strong></p>\r\n							<p>　　<code>master</code>分支应该受到保护，不是每个人都可以修改这个分支，以及拥有审批 Pull Request 的权力。</p>\r\n							<p>　　<a href=\"https://help.github.com/articles/about-protected-branches/\" target=\"_blank\">Github</a>&nbsp;和&nbsp;<a\r\n								 href=\"http://doc.gitlab.com/ce/permissions/permissions.html\" target=\"_blank\">Gitlab</a>&nbsp;都提供\"保护分支\"（Protected\r\n								branch）这个功能。</p>\r\n							<p>　　<strong>5. 3 Issue</strong></p>\r\n							<p>　　Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p>\r\n							<p>　　功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如\"15-require-a-password-to-change-it\"。</p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223833984-1600753265.png\"></p>\r\n							<p>　　开发完成后，在提交说明里面，可以写上\"fixes #14\"或者\"closes #67\"。Github规定，只要commit message里面有下面这些<a href=\"https://help.github.com/articles/closing-issues-via-commit-messages/\"\r\n								 target=\"_blank\">动词</a>&nbsp;+ 编号，就会关闭对应的issue。</p>\r\n							<blockquote>\r\n								<ul>\r\n									<li>close</li>\r\n									<li>closes</li>\r\n									<li>closed</li>\r\n									<li>fix</li>\r\n									<li>fixes</li>\r\n									<li>fixed</li>\r\n									<li>resolve</li>\r\n									<li>resolves</li>\r\n									<li>resolved</li>\r\n								</ul>\r\n							</blockquote>\r\n							<p>　　这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是&nbsp;<code>username/repository#issue_number</code>。</p>\r\n							<p>　　Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p>\r\n							<p>　　<strong>5. 4 Merge节点</strong></p>\r\n							<p>　　Git有两种合并：一种是\"直进式合并\"（fast forward），不生成单独的合并节点；另一种是\"非直进式合并\"（none fast-forword），会生成单独节点。</p>\r\n							<p>　　前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用<code>--no-ff</code>参数）。只要发生合并，就要有一个单独的合并节点。</p>\r\n							<p>　　<strong>5. 5 Squash 多个commit</strong></p>\r\n							<p>　　为了便于他人阅读你的提交，也便于<code>cherry-pick</code>或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。（前提是，该分支只有你一个人开发，且没有跟<code>master</code>合并过。）</p>\r\n							<p data-mce-=\"\"><img title=\"\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201512/24634-20151224223834077-278565440.png\"></p>\r\n							<p>　　这可以采用<code>rebase</code>命令附带的<code>squash</code>操作，具体方法请参考我写的<a href=\"http://www.ruanyifeng.com/blog/2015/08/git-use-process.html\"\r\n								 target=\"_blank\">《Git 使用规范流程》</a>。</p>\r\n							<p>　　（完）</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:47:00', '2019-12-31 00:47:00', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1022', '在浏览器中输入Google.com并且按下回车之后发生了什么？', '为了从头开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接或者通过电容器闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　本文试图回答一个古老的面试问题：当你在浏览器中输入google.com并且按下回车之后发生了什么？</p>\r\n							<p>　　不过我们不再局限于平常的回答，而是想办法回答地尽可能具体，不遗漏任何细节。</p>\r\n							<p>　　这将是一个协作的过程，所以深入挖掘吧，并且帮助我们一起完善它。仍然有大量的细节等待着你来添加，欢迎向我们发送Pull Requset！</p>\r\n							<h3>　　回车键按下</h3>\r\n							<p>　　为了从头开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接或者通过电容器闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。</p>\r\n							<p><em>　　</em>USB键盘：</p>\r\n							<ul>\r\n								<li>键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压</li>\r\n								<li>键码值存储在键盘内部电路一个叫做\"endpoint\"的寄存器内</li>\r\n								<li>USB控制器大概每隔10ms便查询一次\"endpoint\"以得到存储的键码值数据，这个最短时间间隔由键盘提供</li>\r\n								<li>键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包</li>\r\n								<li>这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成\"低速设备\"（USB 2.0 compliance）</li>\r\n								<li>这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层</li>\r\n							</ul>\r\n							<p>　　虚拟键盘（触屏设备）：</p>\r\n							<ul>\r\n								<li>在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标</li>\r\n								<li>然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮</li>\r\n								<li>虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息</li>\r\n								<li>这个消息又返回来向当前活跃的应用通知一个“按键按下”事件</li>\r\n							</ul>\r\n							<h3>　　产生中断[非USB键盘]</h3>\r\n							<p>　　键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数\r\n								。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中端处理器，然后操作系统内核出场了。</p>\r\n							<h3>　　(Windows)一个 <code>WM_KEYDOWN</code> 消息被发往应用程序</h3>\r\n							<p>　　HID把键盘按下的事件传送给 <code>KBDHID.sys</code> 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 <code>VK_RETURN(0x0d)</code>。\r\n								<code>KBDHID.sys</code> 驱动和 <code>KBDCLASS.sys</code> (键盘类驱动,keyboard class\r\n								driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 <code>Win32K.sys</code> ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。</p>\r\n							<p><code>　　Win32K.sys</code> 通过 <code>GetForegroundWindow()</code>\r\n								API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的\"message pump\"机制调用 <code>SendMessage(hWnd, WM_KEYDOWN,\r\n									VK_RETURN, lParam)</code> 函数， <code>lParam</code>\r\n								是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 <code>VK_RETURN</code> ），功能键（alt, shift,\r\n								ctrl）是否被按下（在这里没有），以及一些其他状态。</p>\r\n							<p>　　Windows的 <code>SendMessage</code> API直接将消息添加到特定窗口句柄 <code>hWnd</code> 的消息队列中，之后赋给 <code>hWnd</code>\r\n								的主要消息处理函数 <code>WindowProc</code> 将会被调用，用于处理队列中的消息。</p>\r\n							<p>　　当前活跃的句柄 <code>hWnd</code> 实际上是一个edit control控件，这种情况下，<code>WindowProc</code> 有一个用于处理 <code>WM_KEYDOWN</code>\r\n								消息的处理器，这段代码会查看 <code>SendMessage</code> 传入的第三个参数 <code>wParam</code> ，因为这个参数是 <code>VK_RETURN</code>\r\n								，于是它知道用户按下了回车键。</p>\r\n							<h3>　　(Mac OS X)一个 <code>KeyDown</code> NSEvent被发往应用程序</h3>\r\n							<p>　　中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 <code>WindowServer</code> 进程。然后， <code>WindowServer</code>\r\n								将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 <code>mach_ipc_dispatch</code>\r\n								函数读取到。这个过程通常是由 <code>NSApplication</code> 主事件循环产生并且处理的，通过 <code>NSEventType</code> 为 <code>KeyDown</code> 的\r\n								<code>NSEvent</code> 。</p>\r\n							<h3>　　(GNU/Linux)Xorg 服务器监听键码值</h3>\r\n							<p>　　当使用图形化的 X Server 时，X Server会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity,\r\n								i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。</p>\r\n							<h3>　　解析URL</h3>\r\n							<ul>\r\n								<li>\r\n									<p>浏览器通过URL能够知道下面的信息：</p>\r\n									<blockquote>\r\n										<ul>\r\n											<li>\r\n												<dl><dt><code>Protocol</code> \"http\"</dt>\r\n													<dd>\r\n														<p>使用HTTP协议</p>\r\n													</dd>\r\n												</dl>\r\n											</li>\r\n											<li>\r\n												<dl><dt><code>Resource</code> \"/\"</dt>\r\n													<dd>\r\n														<p>请求的资源是主页(index)</p>\r\n													</dd>\r\n												</dl>\r\n											</li>\r\n										</ul>\r\n									</blockquote>\r\n								</li>\r\n							</ul>\r\n							<h3>　　输入的是URL还是搜索的关键字？</h3>\r\n							<p>　　当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。</p>\r\n							<h3>　　检查HSTS列表···</h3>\r\n							<ul>\r\n								<li>浏览器检查自带的“预加载HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站</li>\r\n								<li>如果网站在这个列表里，浏览器会使用HTTPS而不是HTTP协议，否则，最初的请求会使用HTTP协议发送</li>\r\n								<li>注意，一个网站哪怕不在HSTS列表里，也可以要求浏览器对自己使用HSTS政策进行访问。浏览器向网站发出第一个HTTP请求之后，网站会返回浏览器一个响应，请求浏览器只使用HTTPS发送请求。然而，就是这第一个HTTP请求，却可能会使用户收到\r\n									<a href=\"http://en.wikipedia.org/wiki/SSL_stripping\">downgrade attack</a> 的威胁，这也是为什么现代浏览器都预置了HSTS列表。</li>\r\n							</ul>\r\n							<h3>　　转换非ASCII的Unicode字符</h3>\r\n							<ul>\r\n								<li>浏览器检查输入是否含有不是 <code>a-z</code>， <code>A-Z</code>，<code>0-9</code>， <code>-</code> 或者 <code>.</code> 的字符</li>\r\n								<li>这里主机名是 <code>google.com</code> ，所以没有非ASCII的字符，如果有的话，浏览器会对主机名部分使用 <a href=\"https://en.wikipedia.org/wiki/Punycode\">Punycode</a>\r\n									编码</li>\r\n							</ul>\r\n							<h3>　　DNS查询···</h3>\r\n							<ul>\r\n								<li>浏览器检查域名是否在缓存当中</li>\r\n								<li>如果缓存中没有，就去调用 <code>gethostbynme</code> 库函数（操作系统不同函数也不同）进行查询</li>\r\n								<li><code>gethostbyname</code> 函数在试图进行DNS解析之前首先检查域名是否在本地Hosts里，Hosts的位置 <a href=\"https://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system\">不同的操作系统有所不同</a></li>\r\n								<li>如果 <code>gethostbyname</code> 没有这个域名的缓存记录，也没有在 <code>hosts</code> 里找到，它将会向DNS\r\n									服务器发送一条DNS查询请求。DNS服务器是由网络通信栈提供的，通常是本地路由器或者ISP的缓存DNS服务器。</li>\r\n								<li>查询本地 DNS 服务器</li>\r\n								<li>如果DNS服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询</li>\r\n								<li>如果DNS服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询</li>\r\n							</ul>\r\n							<h3>　　ARP</h3>\r\n							<p>　　要想发送ARP广播，我们需要有一个目标IP地址，同时还需要知道用于发送ARP广播的接口的Mac地址。</p>\r\n							<ul>\r\n								<li>首先查询ARP缓存，如果缓存命中，我们返回结果：目标IP = MAC</li>\r\n							</ul>\r\n							<p>　　如果缓存没有命中：</p>\r\n							<ul>\r\n								<li>查看路由表，看看目标IP地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。</li>\r\n								<li>查询选择的网络接口的MAC地址</li>\r\n								<li>我们发送一个二层ARP请求：</li>\r\n							</ul>\r\n							<p><code>　　ARP Request</code>:</p>\r\n							<pre>Sender MAC: interface:mac:address:here<br>Sender IP: interface.ip.goes.here<br>Target MAC: FF:FF:FF:FF:FF:FF (Broadcast)<br>Target IP: target.ip.goes.here</pre>\r\n							<p>　　根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：</p>\r\n							<p>　　直连：</p>\r\n							<ul>\r\n								<li>如果我们和路由器是直接连接的，路由器会返回一个 <code>ARP Reply</code> （见下面）。</li>\r\n							</ul>\r\n							<p>　　集线器：</p>\r\n							<ul>\r\n								<li>如果我们连接到一个集线器，集线器会把ARP请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 <code>ARP Reply</code> 。</li>\r\n							</ul>\r\n							<p>　　交换机：</p>\r\n							<ul>\r\n								<li>如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个MAC地址，如果没有找到，交换机会向所有其它端口广播这个ARP请求。</li>\r\n								<li>如果交换机的MAC/CAM表中有对应的条目，交换机会向有我们想要查询的MAC地址的那个端口发送ARP请求</li>\r\n								<li>如果路由器也“连接”在其中，它会返回一个 <code>ARP Reply</code></li>\r\n							</ul>\r\n							<p><code>　　ARP Reply</code>:</p>\r\n							<pre>Sender MAC: target:mac:address:here<br>Sender IP: target.ip.goes.here<br>Target MAC: interface:mac:address:here<br>Target IP: interface.ip.goes.here</pre>\r\n							<p>　　现在我们有了DNS服务器或者默认网关的IP地址，我们可以继续DNS请求了：</p>\r\n							<ul>\r\n								<li>使用53端口向DNS服务器发送UDP请求包，如果响应包太大，会使用TCP</li>\r\n								<li>如果本地/ISP DNS服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层DNS服务器做查询，直到查询到起始授权机构，如果找到会把结果返回</li>\r\n							</ul>\r\n							<h3>　　使用套接字</h3>\r\n							<p>　　当浏览器得到了目标服务器的IP地址，以及URL中给出来端口号（http协议默认端口号是80， https默认端口号是443），它会调用系统库函数 <code>socket</code>\r\n								，请求一个TCP流套接字，对应的参数是 <code>AF_INET</code> 和 <code>SOCK_STREAM</code> 。</p>\r\n							<ul>\r\n								<li>这个请求首先被交给传输层，在传输层请求被封装成TCP segment。目标端口会会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)</li>\r\n								<li>TCP segment被送往网络层，网络层会在其中再加入一个IP头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个TCP packet。</li>\r\n								<li>这个TCP\r\n									packet接下来会进入链路层，链路层会在封包中加入frame头部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的MAC地址。像前面说的一样，如果内核不知道网关的MAC地址，它必须进行ARP广播来查询其地址。</li>\r\n							</ul>\r\n							<p>　　到了现在，TCP封包已经准备好了，可是使用下面的方式进行传输：</p>\r\n							<ul>\r\n								<li><a href=\"http://en.wikipedia.org/wiki/IEEE_802.3\">以太网</a></li>\r\n								<li><a href=\"https://en.wikipedia.org/wiki/IEEE_802.11\">WiFi</a></li>\r\n								<li><a href=\"https://en.wikipedia.org/wiki/Cellular_data_communication_protocol\">蜂窝数据网络</a></li>\r\n							</ul>\r\n							<p>　　对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个\r\n								<a href=\"https://en.wikipedia.org/wiki/Computer_network#Network_nodes\">网络节点</a> 处理。节点的目标地址和源地址将在后面讨论。</p>\r\n							<p>　　大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 <a href=\"https://en.wikipedia.org/wiki/Computer_network#Network_nodes\">网络节点</a>\r\n								进行处理。</p>\r\n							<p>　　最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部TTL域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。</p>\r\n							<p>　　上面的发送和接受过程在TCP连接期间会发生很多次：</p>\r\n							<ul>\r\n								<li>\r\n									<p>客户端选择一个初始序列号(ISN)，将设置了SYN位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号</p>\r\n								</li>\r\n								<li>\r\n									<dl><dt>服务器端接受到SYN包，如果它可以建立连接：</dt>\r\n										<dd>\r\n											<ul>\r\n												<li>服务器端选择它自己的初始序列号</li>\r\n												<li>服务器端设置SYN位，表明自己选择了一个初始序列号</li>\r\n												<li>服务器端把 (客户端ISN + 1) 复制到ACK域，并且设置ACK位，表明自己接收到了客户端的第一个封包</li>\r\n											</ul>\r\n										</dd>\r\n									</dl>\r\n								</li>\r\n								<li>\r\n									<dl><dt>客户端通过发送下面一个封包来确认这次连接：</dt>\r\n										<dd>\r\n											<ul>\r\n												<li>自己的序列号+1</li>\r\n												<li>接收端ACK+1</li>\r\n												<li>设置ACK位</li>\r\n											</ul>\r\n										</dd>\r\n									</dl>\r\n								</li>\r\n								<li>\r\n									<dl><dt>数据通过下面的方式传输：</dt>\r\n										<dd>\r\n											<ul>\r\n												<li>当一方发送了N个Bytes的数据之后，将自己的SEQ序列号也增加N</li>\r\n												<li>另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个ACK包，ACK的值设置为接收到的数据包的最后一个序列号</li>\r\n											</ul>\r\n										</dd>\r\n									</dl>\r\n								</li>\r\n								<li>\r\n									<dl><dt>关闭连接时：</dt>\r\n										<dd>\r\n											<ul>\r\n												<li>要关闭连接的一方发送一个FIN包</li>\r\n												<li>另一方确认这个FIN包，并且发送自己的FIN包</li>\r\n												<li>要关闭的一方使用ACK包来确认接收到了FIN</li>\r\n											</ul>\r\n										</dd>\r\n									</dl>\r\n								</li>\r\n							</ul>\r\n							<h4>　　UDP 数据包</h4>\r\n							<h3>　　TLS 握手</h3>\r\n							<ul>\r\n								<li>客户端发送一个 <code>Client hello</code> 消息到服务器端，消息中同时包含了它的TLS版本，可用的加密算法和压缩算法。</li>\r\n								<li>服务器端向客户端返回一个 <code>Server hello</code>\r\n									消息，消息中包含了服务器端的TLS版本，服务器选择了哪个加密和压缩算法，以及服务器的公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥</li>\r\n								<li>客户端根据自己的信任CA列表，验证服务器端的证书是否有效。如果有效，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥</li>\r\n								<li>服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥</li>\r\n								<li>客户端发送一个 <code>Finished</code> 消息给服务器端，使用对称密钥加密这次通讯的一个散列值</li>\r\n								<li>服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 <code>Finished</code> 消息，也使用协商好的对称密钥加密</li>\r\n								<li>从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容</li>\r\n							</ul>\r\n							<h4>　　TCP 数据包</h4>\r\n							<h3>　　HTTP 协议···</h3>\r\n							<p>　　如果浏览器是Google出品的，它不会使用HTTP协议来获取页面信息，而是会与服务器端发送请求，商讨使用SPDY协议。</p>\r\n							<p>　　如果浏览器使用HTTP协议，它会向服务器发送这样的一个请求:</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>GET / HTTP/1.1Host: google.com[其他头部]</pre>\r\n							</div>\r\n							<p>　　“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。这里我们假设浏览器没有违反HTTP协议标准的bug，同时浏览器使用 <code>HTTP/1.1</code>\r\n								协议，不然的话头部可能不包含 <code>Host</code> 字段，同时 <code>GET</code> 请求中的版本号会变成 <code>HTTP/1.0</code> 或者 <code>HTTP/0.9</code>\r\n								。</p>\r\n							<p>HTTP/1.1 定义了“关闭连接”的选项 \"close\"，发送者使用这个选项指示这次连接在响应结束之后会断开:</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>Connection:close</pre>\r\n							</div>\r\n							<p>　　不支持持久连接的 HTTP/1.1 必须在每条消息中都包含 \"close\" 选项。</p>\r\n							<p>　　在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。</p>\r\n							<p>　　服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>200 OK[response headers]</pre>\r\n							</div>\r\n							<p>　　然后是一个换行，接下来有效载荷(payload)，也就是 <code>www.google.com</code>\r\n								的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供以后的请求重用。</p>\r\n							<p>　　如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部，以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:</p>\r\n							<div class=\"cnblogs_code\">\r\n								<pre>304 Not Modified[response headers]</pre>\r\n							</div>\r\n							<p>　　这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。</p>\r\n							<p>　　在解析完HTML之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 <code>GET / HTTP/1.1</code>\r\n								会变成 <code>GET /$(相对www.google.com的URL) HTTP/1.1</code> 。</p>\r\n							<p>　　如果HTML引入了 <code>www.google.com</code> 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 <code>Host</code>\r\n								头部会变成另外的域名。</p>\r\n							<h3>　　HTTP服务器请求处理</h3>\r\n							<p>　　HTTPD(HTTP Daemon)在服务器端处理请求/相应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，与 Windows 上的 IIS。</p>\r\n							<ul>\r\n								<li>\r\n									<p>HTTPD接收请求</p>\r\n								</li>\r\n								<li>\r\n									<dl><dt>服务器把请求拆分为以下几个参数：</dt>\r\n										<dd>\r\n											<ul>\r\n												<li>HTTP请求方法(GET, POST, HEAD, PUT 和 DELETE )。在访问Google这种情况下，使用的是GET方法</li>\r\n												<li>域名：google.com</li>\r\n												<li>请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)</li>\r\n											</ul>\r\n										</dd>\r\n									</dl>\r\n								</li>\r\n								<li>\r\n									<p>服务器验证其上已经配置了google.com的虚拟主机</p>\r\n								</li>\r\n								<li>\r\n									<p>服务器验证google.com接受GET方法</p>\r\n								</li>\r\n								<li>\r\n									<p>服务器验证该用户可以使用GET方法(根据IP地址，身份信息等)</p>\r\n								</li>\r\n								<li>\r\n									<p>如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求</p>\r\n								</li>\r\n								<li>\r\n									<p>服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 \"/\" ,会访问首页文件。(你可以重写这个规则，但是这个是最常用的)</p>\r\n								</li>\r\n								<li>\r\n									<p>服务器会使用指定的处理程序分析处理这个文件，比如假设Google使用PHP，服务器会使用PHP解析index文件，并捕获输出，把PHP的输出结果给请求者</p>\r\n								</li>\r\n							</ul>\r\n							<h3>　　浏览器背后的故事</h3>\r\n							<p>　　当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：</p>\r\n							<ul>\r\n								<li>解析 HTML，CSS，JS</li>\r\n								<li>渲染——构建 DOM 树 -&gt; 渲染 -&gt; 布局 -&gt; 绘制</li>\r\n							</ul>\r\n							<h3>　　浏览器</h3>\r\n							<p>　　浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource\r\n								Identifier) 来确定。</p>\r\n							<p>　　浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。</p>\r\n							<p>　　不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：</p>\r\n							<ul>\r\n								<li>一个地址栏</li>\r\n								<li>后退和前进按钮</li>\r\n								<li>书签选项</li>\r\n								<li>刷新和停止按钮</li>\r\n								<li>主页按钮</li>\r\n							</ul>\r\n							<p><strong>　　浏览器高层架构</strong></p>\r\n							<p>　　组成浏览器的组件有：</p>\r\n							<ul>\r\n								<li><strong>用户界面</strong> 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分</li>\r\n								<li><strong>浏览器引擎</strong> 浏览器引擎负责让 UI 和渲染引擎协调工作</li>\r\n								<li><strong>渲染引擎</strong> 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上</li>\r\n								<li><strong>网络组件</strong> 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现</li>\r\n								<li><strong>UI后端</strong> UI后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现</li>\r\n								<li><strong>Javascript 解释器</strong> Javascript 解释器用于解析和执行 Javascript 代码</li>\r\n								<li><strong>数据存储</strong> 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL\r\n									和 FileSystem 之类的存储机制</li>\r\n							</ul>\r\n							<h3>　　HTML 解析</h3>\r\n							<p>　　浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。</p>\r\n							<p>　　HTML解析器的主要工作是对HTML文档进行解析，生成解析树。</p>\r\n							<p>　　解析树是以DOM元素以及属性为节点的树。DOM是文档对象模型(Document Object\r\n								Model)的缩写，它是HTML文档的对象表示，同时也是HTML元素面向外部(如Javascript)的接口。树的根部是\"Document\"对象。整个DOM和HTML文档几乎是一对一的关系。</p>\r\n							<p><strong>　　解析算法</strong></p>\r\n							<p>　　HTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:</p>\r\n							<ul>\r\n								<li>语言本身的“宽容”特性</li>\r\n								<li>HTML本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们</li>\r\n								<li>解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于HTML来说，动态代码，例如脚本元素中包含的 document.write()\r\n									方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容</li>\r\n							</ul>\r\n							<p>　　由于不能使用常用的解析技术，浏览器创造了专门用于解析HTML的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。</p>\r\n							<p><strong>　　解析结束之后</strong></p>\r\n							<p>　　浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。</p>\r\n							<p>　　此时浏览器把文档标记为“可交互的”，浏览器开始解析处于“推迟”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成”，浏览器会进行“加载”事件。</p>\r\n							<p>　　注意解析 HTML 网页时永远不会出现“语法错误”，浏览器会修复所有错误，然后继续解析。</p>\r\n							<p>　　执行同步 Javascript 代码。</p>\r\n							<h3>　　CSS 解析</h3>\r\n							<ul>\r\n								<li>根据 <a href=\"http://www.w3.org/TR/CSS2/grammar.html\">CSS词法和句法</a> 分析CSS文件和 <code>&lt;style&gt;</code>\r\n									标签包含的内容</li>\r\n								<li>每个CSS文件都被解析成一个样式表对象，这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象</li>\r\n								<li>CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器</li>\r\n							</ul>\r\n							<h3>　　页面渲染</h3>\r\n							<ul>\r\n								<li>通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值</li>\r\n								<li>通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算\"Frame 树\"中每个节点首的选(preferred)宽度</li>\r\n								<li>通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度</li>\r\n								<li>通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度</li>\r\n								<li>使用上面的计算结果构建每个节点的坐标</li>\r\n								<li>当存在元素使用 <code>floated</code>，位置有 <code>absolutely</code> 或 <code>relatively</code> 属性的时候，会有更多复杂的计算，详见<a\r\n									 href=\"http://dev.w3.org/csswg/css2/\">http://dev.w3.org/csswg/css2/</a> 和 <a href=\"http://www.w3.org/Style/CSS/current-work\">http://www.w3.org/Style/CSS/current-work</a></li>\r\n								<li>创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层</li>\r\n								<li>页面上的每个层都被分配了纹理(?)</li>\r\n								<li>每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制</li>\r\n								<li>上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量</li>\r\n								<li>计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。</li>\r\n							</ul>\r\n							<h3>　　GPU 渲染</h3>\r\n							<ul>\r\n								<li>在渲染过程中，图形处理层可能使用通用用途的CPU，也可能使用图形处理器GPU</li>\r\n								<li>当使用GPU用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用GPU强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。</li>\r\n							</ul>\r\n							<h3>　　Window Server</h3>\r\n							<h3>　　后期渲染与用户引发的处理</h3>\r\n							<p>　　渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google\r\n								Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:48:35', '2019-12-31 00:48:35', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1023', '什么是软件', '软件的历史，实际上可以说是用机器模拟人的历史。不管大家（包括在这个历史过程中的参与者）有没有意识到，我们都有意无意的在计算机上模仿人类的行为。从冯诺依曼结构开始，程序逻辑开始脱离硬件，采用二进制编码。加上存储，配合输入输出，一个简化的大脑就出现了。图灵机则是模拟大脑的计算，用数学的方式把计算的过程定义了出来，著名的邱奇-图灵论题：一切直觉上能行可计算的函数都可用图灵机计算，反之亦然。软硬件两者一结合，一个可编程的大脑出现了，这也是现在为什么我们把计算机叫做电脑。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							\r\n							<p>　　<strong>冯诺依曼结构，图灵机，以模拟人为目标</strong></p>\r\n							<p>　　软件的历史，实际上可以说是用机器模拟人的历史。不管大家（包括在这个历史过程中的参与者）有没有意识到，我们都有意无意的在计算机上模仿人类的行为。从冯诺依曼结构开始，程序逻辑开始脱离硬件，采用二进制编码。加上存储，配合输入输出，一个简化的大脑就出现了。图灵机则是模拟大脑的计算，用数学的方式把计算的过程定义了出来，著名的邱奇-图灵论题：一切直觉上能行可计算的函数都可用图灵机计算，反之亦然。软硬件两者一结合，一个可编程的大脑出现了，这也是现在为什么我们把计算机叫做电脑。在硬件上编写出的程序，就是软件，是用来控制硬件的行为的。</p>\r\n							<p>　　<strong>成本为王</strong></p>\r\n							<p>　　在初期，软件使用二进制编写的，从硬件到软件，成本都非常的高。随着半导体技术的进步，硬件的成本越来越低，性能越来越高，甚至出现了摩尔定律：当价格不变时，集成电路上可容纳的元器件数目，约每隔18-24个月增加一倍，性能提升一倍。软件方面，为了简化难度，开始采用汇编，进一步出现了类似于人类的语言的高级语言，比如C/C++/Java等，这使得人类可以用类似于人的语言来和计算机沟通。软件工程师慢慢越来越多，开发软件的成本也越来越低。计算机就好像是一个只需要电，不需要休息的人，可以无休无止的工作。</p>\r\n							<p>　　人们越来越愿意把原来只有人才能做的事情，交给计算机来做。结果就导致软件越来越丰富，能够做的事情也越来越多，成本也越来越低。可以这么说，成本是我们为什么采用软件的主要动力，可以节省大量的人员培训，减少雇员的数目。随着互联网的发展，人类社会也开始软件化了。原来必须实体店来进行售卖的，搬到互联网上，开店成本更低，并且能够接触到更多的人。想象一下，一个门店每天的人流达到百万级别是很恐怖的，由实体空间大小来决定。但是在互联网上，访问量千万级别都不算什么。最终的结果就变成，每个人能够负担的工作越来越多，成本越来越低。这也是为什么软件这么热的原因。</p>\r\n							<p>　　<strong>软件扮演的角色</strong></p>\r\n							<p>　　随着软件的规模的变大，做好一个软件也变得越来越难了。早期的程序员写程序，主要是为了帮助自己研究课题。这些程序员熟练了之后，提高了自己的生产力，并发现还可以帮助别人写程序，慢慢软件就变成了一个独立的行业。程序从早期由一个人完成，也逐渐变成了由很多不同角色的人共同合作来完成。以下讨论的前提，都是基于帮助别人写程序，多人合作的基础上的。结论对于单人为自己写程序也适用。</p>\r\n							<p>　　在没有软件之前，每个人干自己的工作，自行保存自己的工作结果。人们面对面或者通过电话等沟通，如下图所示。</p>\r\n							<p data-mce-=\"\"><img width=\"400\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201603/24634-20160316185324834-965304553.png\"></p>\r\n							<p>　　有了软件之后，实际上，我们是把我们日常生活中所做的事情，包括我们自己本人都一起虚拟化到了计算机中。而人则演化成了，通过计算机的输入输出设备，控制计算机中的自己，来完成日常的工作，以及与其他人的沟通。也就是说，软件一直以来的动力，始终都是来模拟人和这个社会的。比如模拟大气运动（天气预报），模拟人类社会（互联网社交），模拟交易，包括现在正在流行的VR，人工智能等等。模拟的对象越来越高级，难度越来越大。</p>\r\n							<p>　　不管如何发展，模拟人的所有行为都是一个大的趋势。也就是说，软件的主要目的，还是把人类的生活模拟化，提供更低成本，高效率的新的生活。从这个角度来看，软件主要依赖的还是人类的生活知识。软件更多的是扮演一个cost\r\n								center，这也是为什么会出现很多的软件代工。</p>\r\n							<p data-mce-=\"\"><img width=\"550\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"\" src=\"https://images2015.cnblogs.com/news/24634/201603/24634-20160316185324662-575248877.jpg\"></p>\r\n							<p>　　<strong>软件开发的架构演变</strong></p>\r\n							<p>　　软件工程师是实现这个模拟过程的关键人物，他必须先理解人是怎么在日常生活中完成工作的，才能够很好的把这些工作在计算机中模拟出来。可是软件工程师需要学习大量的计算机语言和计算机知识，还需要学习各行各业的专业知识。软件工程师本身的培养就比较难，同时行业知识也要靠时间的积累，这样就远远超出了软件工程师的能力了。所以软件开发就开始有分工了，行业知识和业务的识别，会交给BA，系统的设计会交给架构师，设计的实现交给架构师，实现的检验交给测试，还有很多其他角色的配合。为了组织这些角色的工作，还有项目经理。这就把原来一个人的连续工作，拆分成了不同角色的人的连续配合，演化成了不同的软件开发的模式。然后慢慢演变出专门为别人开发软件的软件公司。</p>\r\n							<p>　　<strong>软件架构的出现</strong></p>\r\n							<p>　　如同前面描述的架构的定义，软件架构的出现也是同样的。一开始是懵懵懂懂的去写软件，后来慢慢的就有意识的去切分，演变成了不同的架构。这个背后的动力也是一样的，就是提升参与的人的利益，降低成本。导火索也是软件工程师的任务太重，我们需要把很多工作拆分出来。拆分的原则也是一样的，如何让权责一致。同样，这个拆分也是需要组织架构的调整，来保证架构的落地。具体如何分拆，如何调整，我们将在另外一篇中着重讨论。</p>\r\n							<p>　　以上通过简单的描述计算机和软件的发展历史，阐明软件的本质，其实就是通过把人类的日常工作生活虚拟化，减少成本，提升单个人员的生产力，提升人类自己的利益。软件工程师的职责在这个浪潮中，不堪重负，自然而然就分拆为不同的角色，形成了一个独特的架构体系。这一切的背后，仍然是为了提升人类自己的利益，解决人类自己的问题。</p>\r\n							<p>　　<strong>下篇：</strong><a href=\"http://kb.cnblogs.com/page/541740/\">架构漫谈（六）：软件架构到底是要解决什么问题？</a></p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:50:16', '2019-12-31 00:50:16', '1001', '0', '1', '0');
INSERT INTO `article` VALUES ('1024', 'LinkedIn大数据后台是如何运作的', '我在六年前的一个令人兴奋的时刻加入到LinkedIn公司。从那个时候开始我们就破解单一的、集中式数据库的限制，并且启动到特殊的分布式系统套件的转换。这是一件令人兴奋的事情：我们构建、部署，而且直到今天仍然在运行的分布式图形数据库、分布式搜索后端、Hadoop安装以及第一代和第二代键值数据存储。', '<div id=\"main_content\">\r\n			<div id=\"left_content\">\r\n				<div id=\"left_content_pages\">\r\n					\r\n					<div class=\"contents_main\">\r\n						<div id=\"ArticleCnt\">\r\n							<p>　　<strong>英文原文：</strong><a href=\"http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\"\r\n								 target=\"_blank\">The Log: What every software engineer should know about real-time data\'s unifying abstraction</a></p>\r\n							<p>　　我在六年前的一个令人兴奋的时刻加入到LinkedIn公司。从那个时候开始我们就破解单一的、集中式数据库的限制，并且启动到特殊的分布式系统套件的转换。这是一件令人兴奋的事情：我们构建、部署，而且直到今天仍然在运行的分布式图形数据库、分布式搜索后端、Hadoop安装以及第一代和第二代键值数据存储。</p>\r\n							<p>　　从这一切里我们体会到的最有益的事情是我们构建的许多东西的核心里都包含一个简单的理念：日志。有时候也称作预先写入日志或者提交日志或者事务日志，日志几乎在计算机产生的时候就存在，同时它还是许多分布式数据系统和实时应用结构的核心。</p>\r\n							<p>　　不懂得日志，你就不可能完全懂得数据库，NoSQL存储，键值存储，复制，paxos,Hadoop,版本控制以及几乎所有的软件系统；然而大多数软件工程师对它们不是很熟悉。我愿意改变这种现状。在这篇博客文章里，我将带你浏览你必须了解的有关日志的所有的东西，包括日志是什么，如何在数据集成、实时处理和系统构建中使用日志等。</p>\r\n							<h1><strong>　　第一部分：日志是什么？</strong></h1>\r\n							<p><img width=\"396\" height=\"187\" class=\"size-full wp-image-6389 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"日志\" src=\"https://images0.cnblogs.com/news/145819/201504/092026097585202.png\"></p>\r\n							<p>　　日志是一种简单的不能再简单的存储抽象。它是一个只能增加的，完全按照时间排序的一系列记录。日志看起来如下：</p>\r\n							<blockquote>我们可以给日志的末尾添加记录，并且可以从左到右读取日志记录。每一条记录都指定了一个唯一的有一定顺序的日志记录编号。</blockquote>\r\n							<p>　　日志记录的排序是由“时间”来确定的，这是因为位于左边的日志记录比位于右边的要早些。日志记录编号可以看作是这条日志 记录的“时间戳”。在一开始就把这种排序说成是按时间排序显得有点多余 ，不过\r\n								，与任何一个具体的物理时钟相比，时间 属性是非常便于使用的属性。在我们运行多个分布式系统的时候，这个属性就显得非常重要。</p>\r\n							<p>　　对于这篇讨论的目标而言，日志记录的内容和格式不怎么重要。另外提醒一下，在完全耗尽存储空间的情况下，我们不可能 再给日志添加记录。稍后我们将会提到这个问题。</p>\r\n							<p>　　日志并不是完全不同于文件或者数据表的。文件是由一系列字节组成，表是由一系列记录组成，而日志实际上只是按照时间顺序存储记录的 一种数据表或者文件。</p>\r\n							<p>　　此时，你可能奇怪为什么要讨论这么简单的事情呢？ 不同环境下的一个只可增加的有一定顺序的日志记录是怎样与数据系统关联起来的呢？答案是日志有其特定的应用目标：它记录了什么时间发生了什么事情。\r\n								而对分布式数据系统许多方面而言， 这才是问题的真正核心。</p>\r\n							<p>　　不过，在我们进行更加深入的讨论之前，让我先澄清有些让人混淆的概念。每个编程人员都熟悉另一种日志记录-应用使用syslog或者log4j可能写入到本地文件里的没有结构的错误信息或者追踪信息。为了区分开来，我们把这种情形的日志记录称为“应用日志记录”。应用日志记录是我在这儿所说的日志的一种低级的变种。最大的区别是：文本日志意味着主要用来方便人们阅读，而我所说明的“日志”或者“数据日志”的建立是方便程序访问。</p>\r\n							<p>　　（实际上，如果你对它进行深入的思考，那么人们读取某个机器上的日志这种理念有些不顺应时代潮流。当涉及到许多服务和服务器的时候，这种方法很快就变成一个难于管理的方式，而且为了认识多个机器的行为，日志的目标很快就变成查询和图形化这些行为的输入了-对多个机器的某些行为而言，文件里的英文形式的文本同这儿所描述的这种结构化的日志相比几乎就不适合了。）</p>\r\n							<p>　　<strong>数据库日志</strong></p>\r\n							<p>　　我不知道日志概念起源于何处-可能它就像二进制搜索一样：发明者认为它太简单而不能当作一项发明。它早在IBM的系统R出现时候就出现了。数据库里的用法是在崩溃的时候用它来同步各种数据结构和索引。为了保证操作的原子性和持久性，在对数据库维护的所有各种数据结构做更改之前，数据库把即将修改的信息誊写到日志里。日志记录了发生了什么，而且其中的每个表或者索引都是一些数据结构或者索引的历史映射。由于日志是即刻永久化的，可以把它当作崩溃发生时用来恢复其他所有永久性结构的可信赖数据源。</p>\r\n							<p>　　随着时间的推移，日志的用途从实现ACID细节成长为数据库间复制数据的一种方法。利用日志的结果就是发生在数据库上的更改顺序与远端复制数据库上的更改顺序需要保持完全同步。</p>\r\n							<p>　　Oracle,MySQL\r\n								和PostgreSQL都包括用于给备用的复制数据库传输日志的日志传输协议。Oracle还把日志产品化为一个通用的数据订阅机制，这样非Oracle数据订阅用户就可以使用XStreams和GoldenGate订阅数据了，MySQL和PostgreSQL上的类似的实现则成为许多数据结构的关键组件。\r\n								<br>　　正是由于这样的起源，机器可识别的日志的概念大部分都被局限在数据库内部。日志用做数据订阅的机制似乎是偶然出现的，不过要把这种 抽象用于支持所有类型的消息传输、数据流和实时数据处理是不切实际的。</p>\r\n							<p>　　<strong>分布式系统日志</strong></p>\r\n							<p>　　日志解决了两个问题：更改动作的排序和数据的分发，这两个问题在分布式数据系统里显得尤为重要。协商出一致的更改动作的顺序（或者说保持各个子系统本身的做法，但可以进行存在副作用的数据拷贝）是分布式系统设计的核心问题之一。</p>\r\n							<p>　　以日志为中心实现分布式系统是受到了一个简单的经验常识的启发，我把这个经验常识称为状态机复制原理：如果两个相同的、确定性的进程从同一状态开始，并且以相同的顺序获得相同的输入，那么这两个进程将会生成相同的输出，并且结束在相同的状态。</p>\r\n							<p>　　这也许有点难以理解，让我们更加深入的探讨，弄懂它的真正含义。</p>\r\n							<p>　　确定性意味着处理过程是与时间无关的，而且任何其他“外部的“输入不会影响到处理结果。例如，如果一个程序的输出会受到线程执行的具体顺序影响，或者受到gettimeofday调用、或者其他一些非重复性事件的影响，那么这样的程序一般最有可能被认为是非确定性的。</p>\r\n							<p>　　进程状态是进程保存在机器上的任何数据，在进程处理结束的时候，这些数据要么保存在内存里，要么保存在磁盘上。</p>\r\n							<p>　　以相同的顺序获得相同输入的地方应当引起注意-这就是引入日志的地方。这儿有一个重要的常识：如果给两段确定性代码相同的日志输入，那么它们就会生成相同的输出。</p>\r\n							<p>　　分布式计算这方面的应用就格外明显。你可以把用多台机器一起执行同一件事情的问题缩减为实现分布式一致性日志为这些进程输入的问题。这儿日志的目的是把所有非确定性的东西排除在输入流之外，来确保每个复制进程能够同步地处理输入。</p>\r\n							<p>　　当你理解了这个以后，状态机复制原理就不再复杂或者说不再深奥了：这或多或少的意味着“确定性的处理过程就是确定性的”。不管怎样，我都认为它是分布式系统设计里较常用的工具之一。</p>\r\n							<p>　　这种方式的一个美妙之处就在于索引日志的时间戳就像时钟状态的一个副本——你可以用一个单独的数字描述每一个副本，这就是经过处理的日志的时间戳。时间戳与日志一一对应着整个副本的状态。</p>\r\n							<p>　　由于写进日志的内容的不同，也就有许多在系统中应用这个原则的不同方式。举个例子，我们记录一个服务的请求，或者服务从请求到响应的状态变化，或者它执行命令的转换。理论上来说，我们甚至可以为每一个副本记录一系列要执行的机器指令或者调用的方法名和参数。只要两个进程用相同的方式处理这些输入，这些进程就会保持副本的一致性。</p>\r\n							<p>　　一千个人眼中有一千种日志的用法。数据库工作者通常区分物理日志和逻辑日志。物理日志就是记录每一行被改变的内容。逻辑日志记录的不是改变的行而是那些引起行的内容被改变的SQL语句（insert，update和delete语句）。</p>\r\n							<p>　　分布式系统通常可以宽泛分为两种方法来处理数据和完成响应。“状态机器模型”通常引用一个主动-主动的模型——也就是我们为之记录请求和响应的对象。对此进行一个细微的更改，称之为“预备份模型”，就是选出一个副本做为leader，并允许它按照请求到达的时间来进行处理并从处理过程中输出记录其状态改变的日志。其他的副本按照leader状态改变的顺序而应用那些改变，这样他们之间达到同步，并能够在leader失败的时候接替leader的工作。</p>\r\n							<p><img width=\"477\" height=\"243\" class=\"size-full wp-image-6390 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"日志\" src=\"https://images0.cnblogs.com/news/145819/201504/092026096807459.png\"></p>\r\n							<p>　　为了理解两种方式的不同，我们来看一个不太严谨的例子。假定有一个算法服务的副本，保持一个独立的数字作为它的状态（初始值为0），并对这个值进行加法和乘法运算。主动-主动方式应该会输出所进行的变换，比如“+1”，“*2”等。每一个副本都会应用这些变换，从而得到同样的解集。主动-被动方式将会有一个独立的主体执行这些变换并输出结果日志，比如“1”，“3”，“6”等。这个例子也清楚的展示了为什么说顺序是保证各副本间一致性的关键：一次加法和乘法的顺序的改变将会导致不同的结果。</p>\r\n							<p><img width=\"400\" height=\"273\" class=\"size-full wp-image-6391 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"日志\" src=\"https://images0.cnblogs.com/news/145819/201504/092026100081659.jpg\"></p>\r\n							<p>　　分布式日志可以理解为一致性问题模型的数据结构。因为日志代表了后续追加值的一系列决策。你需要重新审视Paxos算法簇，尽管日志模块是他们最常见的应用。\r\n								在Paxos算法中，它通常通过使用称之为多paxos的协议，这种协议将日志建模为一系列的问题，在日志中每个问题都有对应的部分。在ZAB，\r\n								RAFT等其它的协议中，日志的作用尤为突出，它直接对维护分布式的、一致性的日志的问题建模。</p>\r\n							<p>　　我怀疑的是，我们就历史发展的观点是有偏差的，可能是由于过去的几十年中，分布式计算的理论远超过了其实际应用。在现实中，共识的问题是有点太简单了。计算机系统很少需要决定单个值，他们几乎总是处理成序列的请求。这样的记录，而不是一个简单的单值寄存器，自然是更加抽象。</p>\r\n							<p>　　此外，专注于算法掩盖了 抽象系统需要的底层的日志。我怀疑，我们最终会把日志中更注重作为一个商品化的基石，不论其是否以同样的方式 实施的，我们经常谈论一个哈希表而不是纠结我们\r\n								得到是不是具体某个细节的哈希表，例如线性或者带有什么什么其它变体哈希表。日志将成为一种大众化的接口，为大多数算法和其实现提升提供最好的保证和最佳的性能。</p>\r\n							<p>　<strong>　变更日志101： 表与事件的二相性</strong></p>\r\n							<p>　　让我们继续聊数据库。数据库中存在着大量变更日志和表之间的二相性。这些日志有点类似借贷清单和银行的流程，数据库表就是当前的盈余表。如果你有大量的变更日志，你就可以使用这些变更用以创建捕获当前状态的表。这张表将记录每个关键点（日志中一个特别的时间点）的状态信息。这就是为什么日志是非常基本的数据结构的意义所在：日志可用来创建基本表，也可以用来创建各类衍生表。同时意味着可以存储非关系型的对象。</p>\r\n							<p><img width=\"520\" height=\"520\" class=\"size-full wp-image-6392 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"八卦\" src=\"https://images0.cnblogs.com/news/145819/201504/092026096188244.jpg\"></p>\r\n							<p>　　这个流程也是可逆的：如果你正在对一张表进行更新，你可以记录这些变更，并把所有更新的日志发布到表的状态信息中。这些变更日志就是你所需要的支持准实时的克隆。基于此，你就可以清楚的理解表与事件的二相性：\r\n								表支持了静态数据而日志捕获变更。日志的魅力就在于它是变更的完整记录，它不仅仅捕获了表的最终版本的内容，它还记录了曾经存在过的其它版本的信息。日志实质上是表历史状态的一系列备份。</p>\r\n							<p>　　这可能会引起你对源代码的版本管理。源代码管理和数据库之间有密切关系。版本管理解决了一个大家非常熟悉的问题，那就是什么是分布式数据系统需要解决的—\r\n								时时刻刻在变化着的分布式管理。版本管理系统通常以补丁的发布为基础，这实际上可能是一个日志。您可以直接对当前 类似于表中的代码做出“快照”互动。你会注意到， 与其他分布式状态化系统类似，版本控制系统\r\n								当你更新时会复制日志，你希望的只是更新补丁并将它们应用到你的当前快照中。</p>\r\n							<p>　　最近，有些人从Datomic –一家销售日志数据库的公司得到了一些想法。这些想法使他们对如何 在他们的系统应用这些想法有了开阔的认识。 当然这些想法不是只针对这个系统，他们会成为\r\n								十多年分布式系统和数据库文献的一部分。</p>\r\n							<p>　　这可能似乎有点过于理想化。但是不要悲观！我们会很快把它实现。</p>\r\n							<p>　　请让我首先解释 一下“数据集成”是什么意思，还有为什么我觉得它很重要，之后我们再来看看它和日志有什么关系。</p>\r\n							<p>　　数据集成就是将数据组织起来，使得在与其有关的服务和系统中可以访问它们。“数据集成”（data integration）这个短语应该不止这么简单，但是我找不到一个更好的解释。而更常见的术语 ETL\r\n								通常只是覆盖了数据集成的一个有限子集(译注：ETL，Extraction-Transformation-Loading的缩写，即数据提取、转换和加载)——相对于关系型数据仓库。但我描述的东西很大程度上可以理解为，将ETL推广至实时系统和处理流程。</p>\r\n							<p><img width=\"520\" height=\"519\" class=\"size-full wp-image-6397 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"36大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026099462444.jpg\"></p>\r\n							<p>　　你一定不会听到数据集成就兴趣盎然屏住呼吸，并且天花乱坠的想到关于大数据的概念，不过，我相信世俗的问题“让数据可被访问” 是一个组织应该关注的有价值的事情。</p>\r\n							<p>　　对数据的高效使用遵循一种 马斯洛的需要层次理论\r\n								。金字塔的基础部分包括捕获所有相关数据，能够将它们全部放到适当的处理环境（那个环境应该是一个奇妙的实时查询系统，或者仅仅是文本文件和python脚本）。这些数据需要以统一的方式建模，这样就可以方便读取和数据处理。如果这种以统一的方式捕获数据的基本需求得到满足，那么就可以在基础设施上以若干种方法处理这些数据——映射化简（MapReduce），实时查询系统，等等。</p>\r\n							<p>　　很明显，有一点值得注意：如果没有可靠的、完整的数据流，Hadoop集群除了象昂贵的且难于安装的空间取暖器哪样外不会做更多事情了。一旦数据和处理可用，人们就会关心良好数据模型和一致地易于理解的语法哪些更细致的问题。最后，人们才会关注更加高级的处理-更好的可视化、报表以及处理和预测算法。</p>\r\n							<p>　　以我的经验，大多数机构在数据金字塔的底部存在巨大的漏洞-它们缺乏可靠的、完整的数据流-而是打算直接跳到高级数据模型技术上。这样做完全是反着来做的。因此，问题是我们如何构建通过机构内所有数据系统的可靠的数据流。</p>\r\n							<p>　　<strong>数据集成：两个并发症</strong></p>\r\n							<p>　　两种趋势使数据集成变得更困难。</p>\r\n							<p><strong>　　事件数据管道</strong></p>\r\n							<p>　　第一个趋势是增长的事件数据(event\r\n								data)。事件数据记录的是发生的事情，而不是存在的东西。在web系统中，这就意味着用户活动日志，还有为了可靠的操作以及监控数据中心的机器的目的，所需要记录的机器级别的事件和统计数字。人们倾向称它们为“日志数据”，因为它们经常被写到应用的日志中，但是这混淆了形式与功能。这种数据位于现代web的中心：归根结底，Google的资产是由这样一些建立在点击和映像基础之上的相关管道所生成的——那也就是事件。</p>\r\n							<p>　　这些东西并不是仅限于网络公司，只是网络公司已经完全数字化，所以它们更容易用设备记录。财务数据一直是面向事件的。RFID(无线射频识别)将这种跟踪能力赋予物理对象。我认为这种趋势仍将继续，伴随着这个过程的是传统商务活动的数字化。</p>\r\n							<p>　　这种类型的事件数据记录下发生的事情，而且往往比传统数据库应用要大好几个数量级。这对于处理提出了重大挑战。</p>\r\n							<p><strong>　　专门的数据系统的爆发</strong></p>\r\n							<p>　　第二个趋势来自于专门的数据系统的爆发，通常这些数据系统在最近的五年中开始变得流行，并且可以免费获得。专门的数据系统是为OLAP, 搜索, 简单 在线 存储, 批处理, 图像分析, 等 等 而存在的。</p>\r\n							<p>　　更多的不同类型数据的组合，以及将这些数据存放到更多的系统中的愿望，导致了一个巨大的数据集成问题。</p>\r\n							<p>　　<strong>日志结构数据流</strong></p>\r\n							<p>　　为了处理系统之间的数据流，日志是最自然的数据结构。其中的秘诀很简单：</p>\r\n							<p>　　将所有组织的数据提取出来，并将它们放到一个中心日志，以便实时查阅。</p>\r\n							<p>　　每个逻辑数据源都可以建模为它自己的日志。一个数据源可以是一个应用程序的事件日志（如点击量或者页面浏览量），或者是一个接受修改的数据库表。每个订阅消息的系统都尽可能快的从日志读取信息，将每条新的记录保存到自己的存储，并且提升其在日志中的地位。订阅方可以是任意一种数据系统\r\n								—— 一个缓存，Hadoop，另一个网站中的另一个数据库，一个搜索系统，等等。</p>\r\n							<p><img width=\"320\" height=\"305\" class=\"size-full wp-image-6398 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"36大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026099937429.png\"></p>\r\n							<p>　　例如，日志针对每个更改给出了逻辑时钟的概念，这样所有的订阅方都可以被测量。推导不同的订阅系统的状态也因此变得相对简单的多，因为每个系统都有一个读取动作的“时间点”。</p>\r\n							<p>　　为了让这个显得更具体，我们考虑一个简单的案例，有一个数据库和一组缓存服务器集群。日志提供了一种同步更新所有这些系统，并推导出每一个系统的接触时间点的方法。我们假设写了一条日志X，然后需要从缓存做一次读取。如果我们想保证看到的不是陈旧的数据，我们只需保证没有从任何尚未复制X的缓存中读取即可。</p>\r\n							<p>　　日志也起到缓存的作用，使数据生产与数据消费相同步。由于许多原因这个功能很重要，特别是在多个订阅方消费数据的速度各不相同的时候。这意味着一个订阅数据系统可以宕机，或者下线维护，之后重新上线以后再赶上来：订阅方按照自己控制的节拍来消费数据。批处理系统，如Hadoop或者是一个数据仓库，或许只是每小时或者每天消费一次数据，而实时查询系统可能需要及时到秒。由于无论是原始数据源还是日志，都没有各种目标数据系统的相关知识，因此消费方系统可以被添加和删除，而无需传输管道的变化。</p>\r\n							<p><img width=\"402\" height=\"402\" class=\"size-full wp-image-6399 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"36大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026102908872.jpg\"></p>\r\n							<blockquote><em>每个工作数据管道设计得就像是一个日志；每个损坏的数据管道以其自己的方式损坏。”—Count Leo Tolstoy</em></blockquote>\r\n							<p>　　特别重要的是：目标系统只知道日志，不知道数据源系统的任何细节。消费方系统自身无需考虑数据到底是来自于一个RDBMS（关系型数据库管理系统Relational Database Management\r\n								System），一种新型的键值存储，或者它不是由任何形式的实时查询系统所生成的。这似乎是一个小问题，但实际上是至关重要的。</p>\r\n							<p>　　这里我使用术语“日志”取代了“消息系统”或者“发布-订阅”，因为它在语义上更明确，并且对支持数据复制的实际实现这样的需求，有着更接近的描述。我发现“发布订阅”并不比间接寻址的消息具有更多的含义——如果你比较任何两个发布-订阅的消息传递系统的话，你会发现他们承诺的是完全不同的东西，而且大多数模型在这一领域都不是有用的。你可以认为日志是一种消息系统，它具有持久性保证和强大的订阅语义。在分布式系统中，这个通信模型有时有个(有些可怕的)名字叫做原子广播。</p>\r\n							<p>　　值得强调的是，日志仍然只是基础设施。这并不是管理数据流这个故事的结束：故事的其余部分围绕着元数据，模式，兼容性，以及处理数据结构的所有细节及其演化。除非有一种可靠的，一般的方法来处理数据流运作，语义在其中总是次要的细节。</p>\r\n							<p>　　<strong>在 LinkedIn（SNS社交网站）</strong></p>\r\n							<p>　　在LinkedIn从集中式关系数据库向分布式系统集合转化的过程中，我看到这个数据集成问题迅速演变。</p>\r\n							<p>　　现在主要的数据系统包括：</p>\r\n							<ul>\r\n								<li>搜索</li>\r\n								<li>社交图谱</li>\r\n								<li>Voldemort (键值存储)(译注：一种分布式数据库)</li>\r\n								<li>Espresso (文档存储)</li>\r\n								<li>推举引擎</li>\r\n								<li>OLAP查询引擎(译注：OLAP联机分析技术)</li>\r\n								<li>Hadoop</li>\r\n								<li>Terradata</li>\r\n								<li>Ingraphs (监控图表和指标服务)</li>\r\n							</ul>\r\n							<p>　　这些都是专门的分布式系统，在其专业领域提供先进的功能。</p>\r\n							<p><img width=\"500\" height=\"500\" class=\"size-full wp-image-6400 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"linkedin\" src=\"https://images0.cnblogs.com/news/145819/201504/092026104152601.png\"></p>\r\n							<p>　　这种使用日志作为数据流的思想，甚至在我到这里之前就已经与LinkedIn相伴了。我们开发的一个最早的基础设施之一，是一种称为databus\r\n								的服务，它在我们早期的Oracle表上提供了一种日志缓存抽象，可伸缩订阅数据库修改,这样我们就可以很好支持我们的社交网络和搜索索引。</p>\r\n							<p>　　我会给出一些历史并交代一下上下文。我首次参与到这些大约是在2008年左右，在我们转移键值存储之后。我的下一个项目是让一个工作中的Hadoop配置演进，并给其增加一些我们的推荐流程。由于缺乏这方面的经验，我们自然而然的安排了数周计划在数据的导入导出方面，剩下的时间则用来实现奇妙的预测算法。这样我们就开始了长途跋涉。</p>\r\n							<p>　　我们本来计划是仅仅将数据从现存的Oracle数据仓库中剖离。但是我们首先发现将数据从Oracle中迅速取出是一种黑暗艺术。更糟的是，数据仓库的处理过程与我们为Hadoop而计划的批处理生产过程不适合——其大部分处理都是不可逆转的，并且与即将生成的报告具体相关。最终我们采取的办法是，避免使用数据仓库，直接访问源数据库和日志文件。最后，我们为了加载数据到键值存储\r\n								并生成结果，实现了另外一种管道。 <br>这种普通的数据复制最终成为原始开发项目的主要内容之一。糟糕的是，在任何时间任意管道都有一个问题，Hadoop系统很大程度上是无用的——在错误的数据基础上运行奇特的算法，只会产生更多的错误数据。</p>\r\n							<p>　　虽然我们已经以一种通用的方式创建事物，但是每个数据源都需要自定义配置安装。这也被证明是巨量错误与失败的根源。我们在Hadoop上实现的网站功能已经开始流行起来，同时我们发现我们有一长串感兴趣的工程师。每个用户都有他们想要集成的一系列系统，他们想要的一系列新数据源。</p>\r\n							<p><img width=\"300\" height=\"327\" class=\"size-full wp-image-6401 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"古希腊\" src=\"https://images0.cnblogs.com/news/145819/201504/092026105717086.jpg\"></p>\r\n							<blockquote><em>古希腊时代的 ETL（提取转换加载Extract Transform and Load）。并没有太多变化。</em></blockquote>\r\n							<p>　　有些东西在我面前开始渐渐清晰起来。</p>\r\n							<p>　　首先，我们已建成的通道虽然有一些杂乱，但实质上它们是很有价值的。在采用诸如Hadoop的新的处理系统生成可用数据的过程，它开启了大量的可能性。 基于这些数据过去很难实现的计算，如今变为可能。\r\n								许多新的产品和分析技术都来源于把分片的数据放在一起，这些数据过被锁定在特定的系统中。</p>\r\n							<p>　　第二，\r\n								众所周知，可靠的数据加载需要数据通道的深度支持。如果我们可以捕获所有我们需要的结构，我就就可以使得Hadoop数据全自动的加载，这样就不需要额外的操作来增加新的数据源或者处理模式变更–数据就会自动的出现在HDFS，Hive表就会自动的生成对应于新数据源的恰当的列。</p>\r\n							<p>　　第三，我们的数据覆盖率仍然非常低。如果你查看存储于Hadoop中的可用的Linked 数据的全部百分比，它仍然是不完整的。花费大量的努力去使得各个新的数据源运转起来，使得数据覆盖度完整不是一件容易的事情。</p>\r\n							<p>　　我们正在推行的，为每个数据源和目标增建客户化数据加载，这种方式很显然是不可行的。我们有大量的数据系统和数据仓库。把这些系统和仓库联系起来，就会导致任意一对系统会产生如下所示的客户化通道。</p>\r\n							<p><img width=\"615\" height=\"210\" class=\"size-full wp-image-6402 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"36大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026106183072.png\"></p>\r\n							<p>　　需要注意的是：数据是双向流动的：例如许多系统诸如数据库和Hadoop既是数据转化的来源又是数据转化的目的地。这就意味着我们我们不必为每个系统建立两个通道：一个用于数据输入，一个用于数据输出。</p>\r\n							<p>　　这显然需要一大群人，而且也不具有可操作性。随着我们接近完全连接，最终我们将有差不多O(N2)条管道。</p>\r\n							<p>　　替代的，我们需要像这样通用的东西：</p>\r\n							<p><img width=\"616\" height=\"258\" class=\"size-full wp-image-6403 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026106969814.png\"></p>\r\n							<p>　　我们需要尽可能的将每个消费者与数据源隔离。理想情形下，它们应该只与一个单独的数据仓库集成，并由此让他们能访问到所有东西。</p>\r\n							<p>　　这个思想是增加一个新的数据系统——或者它是一个数据源或者它是一个数据目的地——让集成工作只需连接到一个单独的管道，而无需连接到每个数据消费方。</p>\r\n							<p>　　这种经历使得我关注创建Kafka来关联我们在消息系统所见的与数据库和分布式系统内核所发布的日志。我们希望一些实体作为中心的通道，首先用于所有的活动数据，逐步的扩展到其他用途，例如Hadoop外的数据实施，数据监控等。</p>\r\n							<p>　　在相当长的时间内，Kafka是独一无二的底层产品，它既不是数据库，也不是日志文件收集系统，更不是传统的消息系统。但是最近Amazon提供了非常类似Kafka的服务，称之为Kinesis.相似度包括了分片处理的方式，数据的保持，甚至包括在Kafka\r\n								API中，有点特别的高端和低端消费者分类。我很开心看到这些，这表明了你已经创建了很好的底层协议，AWS已经把它作为服务提供。他们对此的期待与我所描述的吻合：通道联通了所有的分布式系统，诸如DynamoDB,\r\n								RedShift, S3等，它同时作为使用EC2进行分布式流处理的基础。</p>\r\n							<p>　　<strong>与ETL和数据仓库的关系</strong></p>\r\n							<p>　　我们再来聊聊数据仓库。数据仓库是清洗和归一数据结构用于支撑数据分析的仓库。这是一个伟大的理念。对不熟悉数据仓库概念的人来说，数据仓库方法论包括了：周期性的从数据源抽取数据，把它们转化为可理解的形式，然后把它导入中心数据仓库。对于数据集中分析和处理，拥有高度集中的位置存放全部数据的原始副本是非常宝贵的资产。在高层级上，也许你抽取和加载数据的顺序略微调整，这个方法论不会有太多变化,无论你使用传统的数据仓库Oracle还是Teradata或者Hadoop。</p>\r\n							<p>　　数据仓库是极其重要的资产，它包含了原始的和规整的数据，但是实现此目标的机制有点过时了。</p>\r\n							<p><img width=\"601\" height=\"382\" class=\"size-full wp-image-6404 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"数据仓库\" src=\"https://images0.cnblogs.com/news/145819/201504/092026107901787.jpg\"></p>\r\n							<p>　　对以数据为中心的组织关键问题是把原始的归一数据联结到数据仓库。数据仓库是批处理的基础查询：它们适用于各类报表和临时性分析，特别是当查询包含了简单的计数、聚合和过滤。但是如果一个批处理系统仅仅包含了原始的完整的数据的数据仓库，这就意味着这些数据对于实时数据处理、搜索索引和系统监控等实时的查询是不可用的。</p>\r\n							<p>　　依我之见，ETL包括两件事：首先，它是抽取和数据清洗过程–特别是释放被锁在组织的各类系统中的数据，移除系统专有的无用物。第二，依照数据仓库的查询重构数据。例如使其符合关系数据库类型系统，强制使用星号、雪花型模式，或者分解为高性能的柱状格式等。合并这两者是有困难的。这些规整的数据集应当可以在实时或低时延处理中可用，也可以在其它实施存储系统索引。</p>\r\n							<p>　　在我看来，正是因为这个原因有了额外好处：使得数据仓库ETL更具了组织级的规模。数据仓库的精典问题是数据仓库负责收集和清洗组织中各个组所生成的全部数据。各组织的动机是不同的，数据的生产者并不知晓在数据仓库中数据的使用情况，最终产生的数据很难抽取，或者需要花费规模化的转化才可以转化为可用的形式。当然，\r\n								中心团队不可能恰到好处的掌握规模，使得这规模刚好与组织中其它团队相匹配，因此数据的覆盖率常常差别很大，数据流是脆弱的同时变更是缓慢的。</p>\r\n							<p>　　较好的方法是有一个中心通道，日志和用于增加数据的定义良好的API。与通道集成的且提供良好的结构化的数据文件的职责依赖于数据的生产者所生成的数据文件。这意味着在设计和实施其它系统时应当考虑数据的输出以及输出的数据如何转化为结构良好的形式并传递给中心通道。增加新的存储系统倒是不必因为数据仓库团队有一个中心结点需要集成而关注数据仓库团队。数据仓库团队仅需处理简单的问题，例如从中心日志中加载结构化的数据，向其它周边系统实施个性化的数据转化等。</p>\r\n							<p><img width=\"464\" height=\"306\" class=\"size-full wp-image-6405 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"数据库\" src=\"https://images0.cnblogs.com/news/145819/201504/092026109773730.png\"></p>\r\n							<p>　　如图所示：当考虑在传统的数据仓库之外增加额外的数据系统时，组织结构的可扩展性显得尤为重要。例如，可以考虑为组织的完整的数据集提供搜索功能。或者提供二级的数据流监控实时数据趋势和告警。无论是这两者中的哪一个，传统的数据仓库架构甚至于Hadoop聚簇都不再适用。更糟的是，ETL的流程通道的目的就是支持数据加载，然而ETL似乎无法输出到其它的各个系统，也无法通过引导程序，使得这些外围的系统的各个架构成为适用于数据仓库的重要资产。这就不难解释为什么组织很难轻松的使用它的全部数据。反之，如果组织已建立起了一套标准的、结构良好的数据，那么任何新的系统要使用这些数据仅仅需要与通道进行简单的集成就可以实现。</p>\r\n							<p><strong>　　这种架构引出了数据清理和转化在哪个阶段进行的不同观点：</strong></p>\r\n							<ul>\r\n								<li>由数据的生产者在把数据增加到公司全局日志之前。</li>\r\n								<li>在日志的实时转化阶段进行，这将会产生一个新的转化日志。</li>\r\n								<li>在向目标系统加载数据时，做为加载过程的一部分进行。</li>\r\n							</ul>\r\n							<p>　　理想的模形是：由数据的生产者在把数据发布到日志之前对数据进行清理。这样可以确保数据的权威性，不需要维护其它的遗留物例如为数据产生的特殊处理代码或者维护这些数据的其它的存储系统。这些细节应当由产生数据的团队来处理，因为他们最了解他们自己的数据。这个阶段所使用的任何逻辑都应该是无损的和可逆的。</p>\r\n							<p>　　任何可以实时完成的增值转化类型都应当基于原始日志进行后期处理。这一过程包括了事件数据的会话流程，或者增加大众感兴趣的衍生字段。原始的日志仍然是可用的，但是这种实时处理产生的衍生日志包含了参数数据。</p>\r\n							<p>　　最终，只有针对目标系统的聚合需要做了加载流程的一部分。它包括了把数据转化成特定的星型或者雪花状模式，从而用于数据仓库的分析和报表。因为在这个阶段，大部分自然的映射到传统的ETL流程中，而现在它是在一个更加干净和规整的数据流集在进行的，它将会更加的简单。</p>\r\n							<p>　　<strong>日志文件和事件</strong></p>\r\n							<p>　　我们再来聊聊这种架构的优势：它支持解耦和事件驱动的系统。</p>\r\n							<p>　　在网络行业取得活动数据的典型方法是把它记为文本形式的日志，这些文本文件是可分解进入数据仓库或者Hadoop，用于聚合和查询处理的。由此产生的问题与所有批处理的ETL的问题是相同的：它耦合了数据流进入数据仓库系统的能力和流程的调度。</p>\r\n							<p>　　在LinkedIn中，我们已经以中心日志的方式构建了事件数据处理。我们正在使用Kafka做为中心的、多订阅者事件日志。我们已经定义了数百种事件类型，每种类型都会捕获用于特定类型动作的独特的属性。这将会覆盖包括页面视图、表达式、搜索以及服务调用、应用异常等方方面面。</p>\r\n							<p>　　为了进一步理解这一优势：设想一个简单的事务–在日志页面显示已发布的日志。这个日志页面应当只包括显示日志所需要的逻辑。然而，在相当多的动态站点中，日志页面常常变的添加了很多与显示日志无关的逻辑。例如，我们将对如下的系统进行集成：</p>\r\n							<ol>\r\n								<li>需要把数据传送到Hadoop和数据仓库中用于离线数据处理。</li>\r\n								<li>需要对视图进行统计，确保视图订阅者不会攻击一些内容片段。</li>\r\n								<li>需要聚合这些视图，视图将用于作业发布者的分析页面显示。</li>\r\n								<li>需要记录视图以确保我们为作业推荐的使用者提供了恰当的印象覆盖，我们不想一次次的重复同样的事情。</li>\r\n								<li>推荐系统需要记录日志用于正确的跟踪作业的普及度。</li>\r\n								<li>等等。</li>\r\n							</ol>\r\n							<p>　　不久，简单的作业显示变得相当的复杂。我们增加了作业显示的其它终端–移动终端应用等–这些逻辑必须继续存在，复杂度不断的增加。更糟的是我们需要与之做接口交互的系统现在是错综复杂的–在为显示日作业而工作的工程师们需要知晓多个其它系统和它们的特征，才可以确保它们被正确的集成了。这仅仅是问题的简单版本，真实的的应用系统只会更加的复杂。</p>\r\n							<p>　　“事件驱动”的模式提供了一种简化这类问题的机制。作业显示页面现在只显示作业并记录与正在显示的作业，作业订阅者相关的其它属性，和其它与作业显示相关的其它有价值的属性。每个与此相关的其它系统诸如推荐系统、安全系统、作业推送分析系统和数据仓库，所有这些只是订阅种子文件，并进行它们的操作。显示代码并不需要关注其它的系统，也不需要因为增加了数据的消费者而相应的进行变更。</p>\r\n							<p>　<strong>　构建可伸缩的日志</strong></p>\r\n							<p>　　当然，把发布者与订阅者分离不再是什么新鲜事了。但是如果你想要确保提交日志的行为就像多个订阅者实时的分类日志那样记录网站发生的每件事时，可扩展性就会成为你所面临的首要挑战。如果我们不能创建快速、高性价比和可扩展性灵活的日志以满足实际的可扩展需求，把日志做为统一的集成机制不再是美好的想像。</p>\r\n							<p>　　人们普遍认为分布式日志是缓慢的、重量经的概念（并且通常会把它仅仅与“原数据”类型的使用联系起来，对于这类使用Zookeeper可以适用）。但是深入实现并重点关注分类记录大规模的数据流，这种需求是不切实际的。在LinkedIn,\r\n								我们现在每天通过Kafka运行着超过600亿个不同的消息写入点(如果统计镜相与数据中心之间的写入，那么这个数字会是数千亿。)</p>\r\n							<p><strong>　　我们在Kafk中使用了一些小技巧来支持这种可扩展性：</strong></p>\r\n							<ul>\r\n								<li>日志分片</li>\r\n								<li>通过批处理读出和写入优化吞吐力</li>\r\n								<li>规避无用的数据复制。</li>\r\n							</ul>\r\n							<p>　　为了确保水平可扩展性，我们把日志进行切片：</p>\r\n							<p><a href=\"https://images0.cnblogs.com/news/145819/201504/092026110248716.png\"> <img width=\"352\" height=\"206\"\r\n									 class=\"alignnone size-full wp-image-6406\" style=\"display: block; margin-left: auto; margin-right: auto;\" alt=\"数据库\"\r\n									 src=\"http://www.36dsj.com/wp-content/uploads/2014/03/a13.png\"> </a></p>\r\n							<p>　　每个切片都是一篇有序的日志，但是各片之间没有全局的次序（这个有别于你可能包含在消息中的挂钟时间）。把消息分配到特定的日志片段这是由写入者控制的，大部分使用者会通过用户ID等键值来进行分片。分片可以把日志追加到不存在协作的片段之间，也可以使系统的吞吐量与Kafka聚簇大小成线性比例关系。</p>\r\n							<p>　　每个分片都是通过可配置数量的复制品复制的，每个复制品都有分片的一份完全一致的拷贝。无论何时，它们中的任一个都可以做为主分片，如果主分片出错了，任何一个复制品都可以接管并做为主分片。</p>\r\n							<p>　　缺少跨分片的全局顺序是这个机制的局限性，但是我们不认为它是最主要的。事实上，与日志的交互主要来源于成百上千个不同的流程，以致于对于它们的行为排一个总体的顺序是没什么意义的。相反，我们可以确保的是我们提供的每个分片都是按顺序保留的。Kafka保证了追加到由单一发送者送出的特定分片会按照发送的顺序依次处理。</p>\r\n							<p>　　日志，就像文件系统一样，是容易优化成线性可读可写的样式的。日志可以把小的读入和写出组合成大的、高吞吐量的操作。Kafka一直至立于实现这一优化目标。批处理可以发生在由客户端向服务器端发送数据、写入磁盘;在服务器各端之间复制；数据传递给消费者和确认提交数据等诸多环节。</p>\r\n							<p>　　最终，Kafka使用简单的二进制形式维护内存日志，磁盘日志和网络数据传送。这使得我们可以使用包括“0数据复制传送”在内的大量的优化机制。</p>\r\n							<p>　　这些优化的积累效应是你常常进行的写出和读入数据的操作可以在磁盘和网络上得到支持，甚至于维护内存以外的大量数据集。</p>\r\n							<p>　　到此为止，我只是描述从端到端数据复制的理想机制。但是在存储系统中搬运字节不是所要讲述内容的全部。最终我们发现日志是流的另一种说法，日志是流处理的核心。</p>\r\n							<p>　　但是，等等，什么是流处理呢？</p>\r\n							<p>　　如果你是90年代晚期或者21世纪初数据库文化或者数据基础架构产品的爱好者，那么你就可能会把流处理与建创SQL引擎或者创建“箱子和箭头”接口用于事件驱动的处理等联系起来。</p>\r\n							<p>　　如果你关注开源数据库系统的大量出现，你就可能把流处理和一些开源数据库系统关联起来，这些系统包括了：Storm,Akka,S4和Samza.但是大部分人会把这些系统作为异步消息处理系统，这些系统与支持群集的远程过程调用层的应用没什么差别（而事实上在开源数据库系统领域某些方面确实如此）。</p>\r\n							<p>　　这些视图都有一些局限性。流处理与SQL是无关的。它也局限于实时流处理。不存在内在的原因限制你不能处理昨天的或者一个月之前的流数据，且使用多种不同的语言表达计算。</p>\r\n							<p><img width=\"350\" height=\"446\" class=\"size-full wp-image-6411 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"数据流\" src=\"https://images0.cnblogs.com/news/145819/201504/092026112115958.jpg\"></p>\r\n							<p>　　我把流处理视为更广泛的概念：持续数据流处理的基础架构。我认为计算模型可以像MapReduce或者分布式处理架构一样普遍，但是有能力处理低时延的结果。</p>\r\n							<p>　　处理模型的实时驱动是数据收集方法。成批收集的数据是分批处理的。数据是不断收集的，它也是按顺序不断处理的。</p>\r\n							<p>　　美国的统计调查就是成批收集数据的良好典范。统计调查周期性的开展，通过挨门挨户的走访，使用蛮力发现和统计美国的公民信息。1790年统计调查刚刚开始时这种方式是奏效的。那时的数据收集是批处理的，它包括了骑着马悠闲的行进，把信息写在纸上，然后把成批的记录传送到人们统计数据的中心站点。现在，在描述这个统计过程时，人们立即会想到为什么我们不保留出生和死亡的记录，这样就可以产生人口统计信息这些信息或是持续的或者是其它维度的。</p>\r\n							<p>　　这是一个极端的例子，但是大量的数据传送处理仍然依赖于周期性的转储，批量转化和集成。处理大容量转储的唯一方法就是批量的处理。但是随着这些批处理被持续的供给所取代，人们自然而然的开始不间断的处理以平滑的处理所需资源并且消除延迟。</p>\r\n							<p>　　例如LinkedIn几乎没有批量数据收集。大部分的数据或者是活动数据或者是数据库变更，这两者都是不间断发生的。事实上，你可以想到的任何商业，正如：Jack\r\n								Bauer告诉我们的，低层的机制都是实时发生的不间断的流程事件。数据是成批收集的，它总是会依赖于一些人为的步骤，或者缺少数字化或者是一些自动化的非数字化流程处理的遗留信息。当传送和处理这些数据的机制是邮件或者人工的处理时，这一过程是非常缓慢的。首轮自动化总是保持着最初的处理形式，它常常会持续相当长的时间。</p>\r\n							<p>　　每天运行的批量处理作业常常是模拟了一种一天的窗口大小的不间断计算。当然，低层的数据也经常变化。在LinkedIn,这些是司空见贯的，并且使得它们在Hadoop运转的机制是有技巧的，所以我们实施了一整套管理增量的Hadoop工作流的架构。</p>\r\n							<p>　　由此看来，对于流处理可以有不同的观点。流处理包括了在底层数据处理的时间概念，它不需要数据的静态快照，它可以产生用户可控频率的输出，而不用等待数据集的全部到达。从这个角度上讲，流处理就是广义上的批处理，随着实时数据的流行，会儿更加普遍。</p>\r\n							<p>　　这就是为什么从传统的视角看来流处理是利基应用。我个人认为最大的原因是缺少实时数据收集使得不间断的处理成为了学术性的概念。</p>\r\n							<p>　　我想缺少实时数据收集就像是商用流处理系统注定的命运。他们的客户仍然需要处理面向文件的、每日批量处理ETL和数据集成。公司建设流处理系统关注的是提供附着在实时数据流的处理引擎，但是最终当时极少数人真正使用了实时数据流。事实上，在我在LinkedIn工作的初期，有一家公司试图把一个非常棒的流处理系统销售给我们，但是因为当时我们的全部数据都按小时收集在的文件里，当时我们提出的最好的应用就是在每小时的最后把这些文件输入到流处理系统中。他们注意到这是一个普遍性的问题。这些异常证明了如下规则：流处理系统要满足的重要商业目标之一是：财务，\r\n								它是实时数据流已具备的基准，并且流处理已经成为了瓶颈。</p>\r\n							<p>　　甚至于在一个健康的批处理系统中，流处理作为一种基础架构的实际应用能力是相当广泛的。它跨越了实时数据请求-应答服务和离线批量处理之间的鸿沟。现在的互联网公司，大约25%的代码可以划分到这个类型中。</p>\r\n							<p>　　最终这些日志解决了流处理中绝大部分关键的技术问题。在我看来，它所解决的最大的问题是它使得多订阅者可以获得实时数据。对这些技术细节感兴趣的朋友，我们可以用开源的Samza,它是基于这些理念建设的一个流处理系统。这些应用的更多技术细节我们在此文档中有详细的描述。</p>\r\n							<p>　　<strong>数据流图</strong></p>\r\n							<p><img width=\"289\" height=\"327\" class=\"size-full wp-image-6412 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"大数据\" src=\"https://images0.cnblogs.com/news/145819/201504/092026112745173.png\"></p>\r\n							<p>　　流处理最有趣的角度是它与流处理系统内部无关，但是与之密切相关的是如何扩展了我们谈到的早期数据集成的数据获取的理念。我们主要讨论了基础数据的获取或日志–事件和各类系统执行中产生的数据等。但是流处理允许我们包括了计算其它数据的数据。这些衍生的数据在消费者看来与他们计算的原始数据没什么差别。这些衍生的数据可以按任意的复杂度进行压缩。</p>\r\n							<p>　　让我们再深入一步。我们的目标是：流处理作业可以读取任意的日志并把日志写入到日志或者其它的系统中。他们用于输入输出的日志把这些处理关联到一组处理过程中。事实上，使用这种样式的集中日志，你可以把组织全部的数据抓取、转化和工作流看成是一系列的日志和写入它们的处理过程。</p>\r\n							<p>　　流处理器根本不需要理想的框架：它可能是读写日志的任何处理器或者处理器集合，但是额外的基础设施和辅助可以提供帮助管理处理代码。</p>\r\n							<p><strong>　　日志集成的目标是双重的：</strong></p>\r\n							<p>　　首先，它确保每个数据集都有多个订阅者和有序的。让我们回顾一下状态复制原则来记住顺序的重要性。为了使这个更加具体，设想一下从数据库中更新数据流–如果在处理过程中我们把对同一记录的两次更新重新排序，可能会产生错误的输出。\r\n								TCP之类的链接仅仅局限于单一的点对点链接，这一顺序的持久性要优于TCP之类的链接，它可以在流程处理失败和重连时仍然存在。</p>\r\n							<p>　　第二，日志提供了流程的缓冲。这是非常基础的。如果处理流程是非同步的，那么上行生成流数据的作业比下行消费流数据的作业运行的更快。这将会导致处理流程阻塞，或者缓冲数据，或者丢弃数据。丢弃数据并不是可行的方法，阻塞将会导致整个流程图立即停止。\r\n								日志实际上是一个非常大的缓冲，它允许流程重启或者停止但不会影响流程图其它部分的处理速度。如果要把数据流扩展到更大规模的组织，如果处理作业是由多个不同的团队提供的，这种隔离性是极其重的。我们不能容忍一个错误的作业引发后台的压力，这种压力会使得整个处理流程停止。</p>\r\n							<p>　　Storm和Sama这两者都是按非同步方式设计的，可以使用Kafka或者其它类似的系统作为它们的日志。</p>\r\n							<p>　　<strong>有状态的实时流处理</strong></p>\r\n							<p>　　一些实时流处理在转化时是无状态的记录。在流处理中大部分的应用会是相当复杂的统计、聚合、不同窗口之间的关联。例如有时人们想扩大包含用户操作信息的事件流（一系列的单击动作）–实际上关联了用户的单击动作流与用户的账户信息数据库。不变的是这类流程最终会需要由处理器维护的一些状态信息。例如数据统计时，你需要统计到目前为止需要维护的计数器。如果处理器本身失败了，如何正确的维护这些状态信息呢？</p>\r\n							<p>　　最简单的替换方案是把这些状态信息保存在内存中。但是如果流程崩溃，它就会丢失中间状态。如果状态是按窗口维护的，流程就会回退到日志中窗口开始的时间点上。但是，如果统计是按小时进行的，那么这种方式就会变得不可行。</p>\r\n							<p>　　另一个替换方案是简单的存储所有的状态信息到远程的存储系统，通过网络与这些存储关联起来。这种机制的问题是没有本地数据和大量的网络间通信。</p>\r\n							<p>　　我们如何支持处理过程可以像表一样分区的数据呢?</p>\r\n							<p>　　回顾一下关于表和日志二相性的讨论。这一机制提供了工具把数据流转化为与处理过程协同定位的表，同时也提供了这些表的容错处理的机制。</p>\r\n							<p>　　流处理器可以把它的状态保存在本地的表或索引–bdb,或者leveldb,甚至于类似于Lucene\r\n								或fastbit一样不常见的索引。这些内容存储在它的输入流中（或许是使用任意的转化）。生成的变更日志记录了本地的索引，它允许存储事件崩溃、重启等的状态信息。流处理提供了通用的机制用于在本地输入流数据的随机索引中保存共同分片的状态。</p>\r\n							<p>　　当流程运行失败时，它会从变更日志中恢复它的索引。每次备份时，日志把本地状态转化成一系列的增量记录。</p>\r\n							<p>　　这种状态管理的方法有一个优势是把处理器的状态也做为日志进行维护。我们可以把这些日志看成与数据库表相对应的变更日志。事实上，这些处理器同时维护着像共同分片表一样的表。因为这些状态它本身就是日志，其它的处理器可以订阅它。如果流程处理的目标是更新结点的最后状态，这种状态又是流程的输出，那么这种方法就显得尤为重要。</p>\r\n							<p>　　为了数据集成，与来自数据库的日志关联，日志和数据库表的二象性就更加清晰了。变更日志可以从数据库中抽取出来，日志可以由不同的流处理器（流处理器用于关联不同的事件流）按不同的方式进行索引。</p>\r\n							<p>　　我们可以列举在Samza中有状态流处理管理的更多细节和大量实用的例子。</p>\r\n							<p>　　<strong>日志压缩</strong></p>\r\n							<p>　　当然，我们不能奢望保存全部变更的完整日志。除非想要使用无限空间，日志不可能完全清除。为了澄清它，我们再来聊聊Kafka的实现。在Kafka中,清理有两种选择，这取决于数据是否包括关键更新和事件数据。对于事件数据，Kafka支持仅维护一个窗口的数据。通常，配置需要一些时间，窗口可以按时间或空间定义。虽然对于关键数据而言，完整日志的重要特征是你可以重现源系统的状态信息，或者在其它的系统重现。</p>\r\n							<p>　　随着时间的推移，保持完整的日志会使用越来越多的空间，重现所耗费的时间越来越长。因些在Kafka中,我们支持不同类型的保留。我们移除了废弃的记录(这些记录的主键最近更新过)而不是简单的丢弃旧日志。我们仍然保证日志包含了源系统的完整备份，但是现在我们不再重现原系统的全部状态，而是仅仅重现最近的状态。我们把这一特征称为日志压缩。</p>\r\n							<p>　　我们最后要讨论的是在线数据系统设计中日志的角色。</p>\r\n							<p>　　在分布式数据库数据流中日志的角色和在大型组织机构数据完整中日志的角色是相似的。在这两个应用场景中，日志是对于数据源是可靠的，一致的和可恢复的。组织如果不是一个复杂的分布式数据系统呢，它究竟是什么？</p>\r\n							<p>　　如果换个角度，你可以看到把整个组织系统和数据流看做是单一的分布式数据系统。你可以把所有的子查询系统（诸如Redis,\r\n								SOLR,Hive表等）看成是数据的特定索引。你可以把Storm或Samza一样的流处理系统看成是发展良好的触发器和视图具体化机制。我已经注意到，传统的数据库管理人员非常喜欢这样的视图，因为它最终解释了这些不同的数据系统到底是做什么用的–它们只是不同的索引类型而已。</p>\r\n							<p>　　不可否认这类数据库系统现在大量的出现，但是事实上，这种复杂性一直都存在。即使是在关系数据库系统的鼎盛时期，组织中有大量的关系数据库系统。或许自大型机时代开始，所有的数据都存储在相同的位置，真正的集成是根本不存在的。存在多种外在需求，需要把数据分解成多个系统，这些外在需求包括：规模、地理因素、安全性，性能隔离是最常见的因素。这些需求都可以由一个优质的系统实现：例如，组织可以使用单一的Hadoop聚簇，它包括了全部的数据，可以服务于大型的和多样性的客户。</p>\r\n							<p>　　因此在向分布式系统变迁的过程中，已经存在一种处理数据的简便的方法：把大量的不同系统的小的实例聚合成为大的聚簇。许多的系统还不足以支持这一方法：因为它们不够安全，或者性能隔离性得不到保证，或者规模不符合要求。不过这些问题都是可以解决的。</p>\r\n							<p>　　依我之见，不同系统大量出现的原因是建设分布式数据库系统很困难。通过削减到单一的查询或者用例，每个系统都可以把规模控制到易于实现的程度。但是运行这些系统产生的复杂度依然很高。</p>\r\n							<p><strong>　　未来这类问题可能的发展趋势有三种：</strong></p>\r\n							<p><strong>　　第一种可能是保持现状：</strong>孤立的系统还会或长或短的持续一段时间。这是因为建设分布式系统的困难很难克服，或者因为孤立系统的独特性和便捷性很难达到。基于这些原因，数据集成的核心问题仍然是如何恰当的使用数据。因此，集成数据的外部日志非常的重要。</p>\r\n							<p><strong>　　第二种可能是重构：</strong>具备通用性的单一的系统逐步融合多个功能形成超极系统。这个超级系统表面看起来类似关系数据库系统，但是在组织中你使用时最大的不同是你只需要一个大的系统而不是无数个小系统。在这个世界里，除了在系统内已解决的这个问题不存在什么真正的数据集成问题。我想这是因为建设这样的系统的实际困难。</p>\r\n							<p>　　虽然另一种可能的结果对于工程师来说是很有吸引力的。新一代数据库系统的特征之一是它们是完全开源的。开源提供了第三种可能性\r\n								：数据基础架构不必打包成服务集或者面向应用的系统接口。在Java栈中，你可以看到在一定程度上，这种状况已经发生了。</p>\r\n							<p>　　分类计价吗？</p>\r\n							<ul>\r\n								<li>Zookeeper用于处理多个系统之间的协调，或许会从诸如Helix 或者Curator等高级别的抽象中得到一些帮助。</li>\r\n								<li>Mesos和YARN用于处理流程可视化和资源管理。</li>\r\n								<li>Lucene和LevelDB等嵌入式类库做为索引。</li>\r\n								<li>Netty,Jetty和Finagle,rest.li等封装成高级别的用于处理远程通信。</li>\r\n								<li>Avro,Protocol Buffers,Thrift和umpteen zillion等其它类库用于处理序列化。</li>\r\n								<li>Kafka和Bookeeper提供支持日志。</li>\r\n							</ul>\r\n							<p>　　如果你把这些堆放在一起，换个角度看，它有点像是简化版的分布式数据库系统工程。你可以把这些拼装在一起，创建大量的可能的系统。显而易见，现在探讨的不是最终用户所关心的API或者如何实现，而是在不断多样化和模块化的过程中如何设计实现单一系统的途径。因为随着可靠的、灵活的模块的出现，实施分布式系统的时间周期由年缩减为周，聚合形成大型整体系统的压力逐步消失。</p>\r\n							<p>　　<strong>日志文件在系统结构中的地位</strong></p>\r\n							<p>　　那些提供外部日志的系统如今已允许个人电脑抛弃他们自身复杂的日志系统转而使用共享日志。在我看来，日志可以做到以下事情：</p>\r\n							<ul>\r\n								<li>通过对节点的并发更新的排序处理数据的一致性（无论在及时还是最终情况下）</li>\r\n								<li>提供节点之间的数据复制</li>\r\n								<li>提供”commit“语法（只有当写入器确保数据不会丢失时才会写入）</li>\r\n								<li>位系统提供外部的数据订阅资源</li>\r\n								<li>提供存储失败的复制操作和引导新的复制操作的能力</li>\r\n								<li>处理节点间的数据平衡</li>\r\n							</ul>\r\n							<p>　　这实际上是一个数据分发系统最重要的部分，剩下的大部分内容与终端调用的API和索引策略相关。这正是不同系统间的差异所在，例如：一个全文本查询语句需要查询所有的分区，而一个主键查询只需要查询负责键数据的单个节点就可以了。</p>\r\n							<p>　　下面我们来看下该系统是如何工作的。系统被分为两个逻辑区域：日志和服务层。日志按顺序捕获状态变化，服务节点存储索引提供查询服务需要的所有信息（键-值的存储可能以B-tree或SSTable的方式进行，而搜索系统可能存在与之相反的索引）。写入器可以直接访问日志，尽管需要通过服务层代理。在写入日志的时候会产生逻辑时间戳（即log中的索引），如果系统是分段式的，那么就会产生与段数目相同数量的日志文件和服务节点，这里的数量和机器数量可能会有较大差距。</p>\r\n							<p><img width=\"192\" height=\"331\" class=\"size-full wp-image-6415 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"数据库\" src=\"https://images0.cnblogs.com/news/145819/201504/092026114309658.png\"></p>\r\n							<p>　　服务节点订阅日志信息并将写入器按照日志存储的顺序尽快应用到它的本地索引上。</p>\r\n							<p>　　客户端只要在查询语句中提供对应的写入器的时间戳，它就可以从任何节点中获取”读写“语义。服务节点收到该查询语句后会将其中的时间戳与自身的索引比较，如果必要，服务节点会延迟请求直到对应时间的索引建立完毕，以免提供旧数据。</p>\r\n							<p>　　服务节点或许根本无需知道”控制“或”投标选择（leader election）“的概念，对很多简单的操作，服务节点可以爱完全脱离领导的情况下提供服务，日志即是信息的来源。</p>\r\n							<p>　　分发系统所需要做的其中一个比较复杂的工作，就是修复失败节点并移除几点之间的隔离。保留修复的数据并结合上各区域内的数据快照是一种较为典型的做法，它与保留完整的数据备份并从垃圾箱内回收日志的做法几乎等价。这就使得服务层简单了很多，日志系统也更有针对性。</p>\r\n							<p>　　有了这个日志系统，你可以订阅到API，这个API提供了把ETL提供给其它系统的数据内容。事实上，许多系统都可以共享相同的日志同时提供不同的索引，如下所示：</p>\r\n							<p><img width=\"320\" height=\"314\" class=\"size-full wp-image-6416 aligncenter\" style=\"display: block; margin-left: auto; margin-right: auto;\"\r\n								 alt=\"数据库\" src=\"https://images0.cnblogs.com/news/145819/201504/092026114934172.png\"></p>\r\n							<p>　　这样一个以日志为中心的系统是如何做到既数据流的提供者又同时加载其它系统的数据的呢？因为流处理器既可以消费多个输入的数据流，随后又可以通过其它系统对数据做索引为它们提供服务。</p>\r\n							<p>　　这个系统的视图可以清晰的分解到日志和查询API,因为它允许你从系统的可用性和一致性角度分解查询的特征。这可以帮助我们对系统进行分解，并理解那些并没按这种方式设计实施的系统。</p>\r\n							<p>　　虽然Kafka和Bookeeper都是一致性日志，但这不是必须的，也没什么意义。你可以轻松的把Dynamo之类的数据构分解为一致性的AP日志和键值对服务层。这样的日志使用起来灵活，因为它重传了旧消息，像Dynamo一样，这样的处理取决于消息的订阅者。</p>\r\n							<p>　　在很多人看来，在日志中另外保存一份数据的完整复本是一种浪费。事实上，虽然有很多因素使得这件事并不困难。首先，日志可以是一种有效的存储机制。我们在Kafka生产环境的服务器上存储了5\r\n								TB的数据。同时有许多的服务系统需要更多的内存来提供有效的数据服务，例如文本搜索，它通常是在内存中的。服务系统同样也需样硬盘的优化。例如，我们的实时数据系统或者在内存外提供服务或者使用固态硬盘。相反，日志系统只需要线性的读写，因此，它很乐于使用TB量级的硬盘。最终，如上图所示，由多个系统提供的数据，日志的成本分摊到多个索引上，这种聚合使得外部日志的成本降到了最低点。</p>\r\n							<p>　　LinkedIn就是使用了这种方式实现它的多个实时查询系统的。这些系统提供了一个数据库（使用数据总线做为日志摘要，或者从Kafka去掉专用的日志），这些系统在顶层数据流上还提供了特殊的分片、索引和查询功能。这也是我们实施搜索、社交网络和OLAP查询系统的方式。事实上这种方式是相当普遍的：为多个用于实时服务的服务系统提供单一的数据（这些来自Hadoop的数据或是实时的或是衍生的）。这种方式已被证实是相当简洁的。这些系统根本不需要外部可写入的API，Kafka和数据库被用做系统的记录和变更流，通过日志你可以查询系统。持有特定分片的结点在本地完成写操作。这些结点盲目的把日志提供的数据转录到它们自己的存储空间中。通过回放上行流日志可以恢复转录失败的结点。</p>\r\n							<p>　　这些系统的程度则取决于日志的多样性。一个完全可靠的系统可以用日志来对数据分片、存储结点、均衡负载，以及用于数据一致性和数据复制等多方面。在这一过程中，服务层实际上只不过是一种缓存机制，这种缓存机制允许直接写入日志的流处理。</p>\r\n							<p>　　<strong>结束语</strong></p>\r\n							<p>　　如果你对于本文中所谈到的关于日志的大部内容，如下内容是您可以参考的其它资料。对于同一事务人们会用不同的术语，这会让人有一些困惑，从数据库系统到分布式系统，从各类企业级应用软件到广阔的开源世界。无论如何，在大方向上还是有一些共同之处。</p>\r\n						</div>\r\n\r\n\r\n					</div>\r\n					\r\n				</div>\r\n			</div>\r\n			\r\n		</div>', '0', '2019-12-31 00:52:27', '2019-12-31 00:52:27', '1001', '0', '1', '0');

-- ----------------------------
-- Table structure for article_type
-- ----------------------------
DROP TABLE IF EXISTS `article_type`;
CREATE TABLE `article_type` (
  `atype_id` int(11) NOT NULL AUTO_INCREMENT,
  `atype_name` varchar(30) NOT NULL,
  PRIMARY KEY (`atype_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1008 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_type
-- ----------------------------
INSERT INTO `article_type` VALUES ('1001', '编程分享');
INSERT INTO `article_type` VALUES ('1002', '程序人生');
INSERT INTO `article_type` VALUES ('1003', '生活日记');
INSERT INTO `article_type` VALUES ('1004', '工具推荐');
INSERT INTO `article_type` VALUES ('1005', '编程语言');
INSERT INTO `article_type` VALUES ('1006', '编程基础');
INSERT INTO `article_type` VALUES ('1007', '编程入门');

-- ----------------------------
-- Table structure for article_type_intermediary
-- ----------------------------
DROP TABLE IF EXISTS `article_type_intermediary`;
CREATE TABLE `article_type_intermediary` (
  `article_type_intermediary_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `atype_id` int(11) NOT NULL,
  PRIMARY KEY (`article_type_intermediary_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1025 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_type_intermediary
-- ----------------------------
INSERT INTO `article_type_intermediary` VALUES ('1001', '1004', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1002', '1003', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1003', '1002', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1004', '1001', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1005', '1005', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1006', '1006', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1007', '1007', '1001');
INSERT INTO `article_type_intermediary` VALUES ('1008', '1008', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1009', '1009', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1010', '1010', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1011', '1011', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1012', '1012', '1002');
INSERT INTO `article_type_intermediary` VALUES ('1013', '1013', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1014', '1014', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1015', '1015', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1016', '1016', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1017', '1017', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1018', '1018', '1003');
INSERT INTO `article_type_intermediary` VALUES ('1019', '1019', '1004');
INSERT INTO `article_type_intermediary` VALUES ('1020', '1020', '1004');
INSERT INTO `article_type_intermediary` VALUES ('1021', '1021', '1004');
INSERT INTO `article_type_intermediary` VALUES ('1022', '1022', '1004');
INSERT INTO `article_type_intermediary` VALUES ('1023', '1023', '1004');
INSERT INTO `article_type_intermediary` VALUES ('1024', '1024', '1004');

-- ----------------------------
-- Table structure for banner
-- ----------------------------
DROP TABLE IF EXISTS `banner`;
CREATE TABLE `banner` (
  `banner_id` int(11) NOT NULL AUTO_INCREMENT,
  `image` varchar(255) NOT NULL,
  PRIMARY KEY (`banner_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of banner
-- ----------------------------

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `commen_conten` varchar(255) NOT NULL,
  `article_id` int(11) NOT NULL,
  `commen_createTime` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1093 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1014', '嘟嘟~', '1001', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1015', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1017', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1018', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1019', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1020', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1021', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1022', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1023', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1024', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1025', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1026', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1027', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1028', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1029', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1030', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1031', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1032', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1033', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1034', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1035', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1036', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1037', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1038', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1039', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1040', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1041', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1042', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1043', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1044', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1045', '嘟嘟~', '1002', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1046', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1047', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1048', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1049', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1050', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1051', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1052', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1053', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1054', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1055', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1056', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1057', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1058', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1059', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1060', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1061', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1062', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1063', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1064', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1065', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1066', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1067', '嘟嘟~', '1003', '2019-12-22 03:50:11');
INSERT INTO `comment` VALUES ('1068', '嘟嘟', '1016', '2019-12-22 04:39:52');
INSERT INTO `comment` VALUES ('1069', '嘟嘟', '1013', '2019-12-22 04:41:31');
INSERT INTO `comment` VALUES ('1076', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1077', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1078', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1079', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1080', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1081', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1082', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1083', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1084', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1085', '这文章很好', '1001', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1086', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1087', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1088', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1089', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1090', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1091', '这文章很好', '1002', '2019-12-22 04:52:33');
INSERT INTO `comment` VALUES ('1092', '这文章很好', '1003', '2019-12-22 04:52:33');

-- ----------------------------
-- Table structure for commentaudit
-- ----------------------------
DROP TABLE IF EXISTS `commentaudit`;
CREATE TABLE `commentaudit` (
  `commentaudit_id` int(11) NOT NULL AUTO_INCREMENT,
  `commentaudit_conten` varchar(255) NOT NULL,
  `article_id` int(11) NOT NULL,
  `commentaudit_createTime` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`commentaudit_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1049 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of commentaudit
-- ----------------------------
INSERT INTO `commentaudit` VALUES ('1027', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1028', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1029', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1030', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1031', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1032', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1033', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1034', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1035', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1036', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1037', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1038', '这文章很好', '1003', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1039', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1040', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1041', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1042', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1043', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1044', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1045', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1046', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1047', '这文章很好', '1004', '2019-12-22 04:52:33');
INSERT INTO `commentaudit` VALUES ('1048', '这文章很好', '1004', '2019-12-22 04:52:33');
